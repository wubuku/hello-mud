// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { Script } from "forge-std/Script.sol";
import { console } from "forge-std/console.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId, WorldResourceIdLib } from "@latticexyz/world/src/WorldResourceId.sol";
import { RESOURCE_SYSTEM } from "@latticexyz/world/src/worldResourceTypes.sol";

contract PrintSystemInfo is Script {
  function run(address worldAddress) external {
    StoreSwitch.setStoreAddress(worldAddress);

    // Load the private key from the `PRIVATE_KEY` environment variable (in .env)
    // uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
    // address deployerAddress = vm.addr(deployerPrivateKey);

    // // Start broadcasting transactions from the deployer account
    //  vm.startBroadcast(deployerPrivateKey);

    // console.log("Current account:", deployerAddress);

    // uint256 balance = deployerAddress.balance;
    // console.log("Account balance:", balance);

    ResourceId systemId;
    address systemAddress;
    bool systemPublicAccess;
    bytes32 errorHash;
    bytes32 eventHash;

    console.log("// -------- PositionSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "PositionSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("PositionCreatedEvent(address,int32,int32,string)");
    console.log("event PositionCreatedEvent(address,int32,int32,string) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("PositionUpdatedEvent(address,int32,int32,string)");
    console.log("event PositionUpdatedEvent(address,int32,int32,string) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect PositionSystem errors");


    console.log("// -------- TerrainSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "TerrainSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("TerrainCreatedEvent(uint32,uint32,string,uint8[],bytes)");
    console.log("event TerrainCreatedEvent(uint32,uint32,string,uint8[],bytes) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("TerrainUpdatedEvent(uint32,uint32,string,uint8[],bytes)");
    console.log("event TerrainUpdatedEvent(uint32,uint32,string,uint8[],bytes) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect TerrainSystem errors");


    console.log("// -------- PlayerSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "PlayerSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("PlayerCreatedEvent(uint256,string,address)");
    console.log("event PlayerCreatedEvent(uint256,string,address) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("IslandClaimedEvent(uint256,uint32,uint32,uint64)");
    console.log("event IslandClaimedEvent(uint256,uint32,uint32,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("PlayerAirdroppedEvent(uint256,uint32,uint32)");
    console.log("event PlayerAirdroppedEvent(uint256,uint32,uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("PlayerIslandResourcesGatheredEvent(uint256)");
    console.log("event PlayerIslandResourcesGatheredEvent(uint256) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect PlayerSystem errors");


    console.log("// -------- PlayerFriendSystem --------");
    console.log("// Truncated system name: PlayerFriendSyst");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "PlayerFriendSyst"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("PlayerItemsDeductedEvent(uint256)");
    console.log("event PlayerItemsDeductedEvent(uint256) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("PlayerXpAndItemsIncreasedEvent(uint256,uint32,uint16)");
    console.log("event PlayerXpAndItemsIncreasedEvent(uint256,uint32,uint16) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect PlayerFriendSystem errors");


    console.log("// -------- ShipFriendSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipFriendSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("ShipCreatedEvent(uint256,uint256,uint32,uint32,uint32,uint32,uint32,uint32[],uint32[])");
    console.log("event ShipCreatedEvent(uint256,uint256,uint32,uint32,uint32,uint32,uint32,uint32[],uint32[]) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ShipInventoryIncreasedEvent(uint256)");
    console.log("event ShipInventoryIncreasedEvent(uint256) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ShipInventoryDeductedEvent(uint256)");
    console.log("event ShipInventoryDeductedEvent(uint256) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect ShipFriendSystem errors");


    console.log("// -------- RosterFriendSystem --------");
    console.log("// Truncated system name: RosterFriendSyst");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterFriendSyst"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("RosterCreatedEvent(uint256,uint32,uint32,uint32)");
    console.log("event RosterCreatedEvent(uint256,uint32,uint32,uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("RosterShipAddedEvent(uint256,uint32,uint256,uint64)");
    console.log("event RosterShipAddedEvent(uint256,uint32,uint256,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect RosterFriendSystem errors");


    console.log("// -------- RosterSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("EnvironmentRosterCreatedEvent(uint256,uint32,uint32,uint32,uint32,uint32,uint32)");
    console.log("event EnvironmentRosterCreatedEvent(uint256,uint32,uint32,uint32,uint32,uint32,uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("RosterShipsPositionAdjustedEvent(uint256,uint32,uint64[],uint256[])");
    console.log("event RosterShipsPositionAdjustedEvent(uint256,uint32,uint64[],uint256[]) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("RosterShipTransferredEvent(uint256,uint32,uint256,uint256,uint32,uint64,uint64)");
    console.log("event RosterShipTransferredEvent(uint256,uint32,uint256,uint256,uint32,uint64,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("RosterMultiShipsTransferredEvent(uint256,uint32,uint256[],uint256,uint32,uint64,uint64)");
    console.log("event RosterMultiShipsTransferredEvent(uint256,uint32,uint256[],uint256,uint32,uint64,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect RosterSystem errors");


    console.log("// -------- RosterSailingSystem --------");
    console.log("// Truncated system name: RosterSailingSys");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterSailingSys"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("RosterSetSailEvent(uint256,uint32,uint32,uint32,uint64,UpdateLocationParams,uint64)");
    console.log("event RosterSetSailEvent(uint256,uint32,uint32,uint32,uint64,UpdateLocationParams,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("RosterLocationUpdatedEvent(uint256,uint32,UpdateLocationParams,uint64,uint8,uint8)");
    console.log("event RosterLocationUpdatedEvent(uint256,uint32,UpdateLocationParams,uint64,uint8,uint8) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect RosterSailingSystem errors");


    console.log("// -------- RosterCleaningSystem --------");
    console.log("// Truncated system name: RosterCleaningSy");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterCleaningSy"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("RosterBattleDestroyedShipsCleanedUpEvent(uint256,uint32,uint256,uint32,uint8)");
    console.log("event RosterBattleDestroyedShipsCleanedUpEvent(uint256,uint32,uint256,uint32,uint8) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect RosterCleaningSystem errors");


    console.log("// -------- RosterShipInventorySystem --------");
    console.log("// Truncated system name: RosterShipInvent");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterShipInvent"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("RosterShipInventoryTransferredEvent(uint256,uint32,uint256,uint256)");
    console.log("event RosterShipInventoryTransferredEvent(uint256,uint32,uint256,uint256) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("RosterShipInventoryTakenOutEvent(uint256,uint32,uint256,UpdateLocationParams)");
    console.log("event RosterShipInventoryTakenOutEvent(uint256,uint32,uint256,UpdateLocationParams) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("RosterShipInventoryPutInEvent(uint256,uint32,uint256,UpdateLocationParams)");
    console.log("event RosterShipInventoryPutInEvent(uint256,uint32,uint256,UpdateLocationParams) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect RosterShipInventorySystem errors");


    console.log("// -------- ShipBattleInitiateSystem --------");
    console.log("// Truncated system name: ShipBattleInitia");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipBattleInitia"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("ShipBattleInitiatedEvent(uint256,uint256,uint256,uint32,uint256,uint32,ShipBattleLocationParams,uint64,uint8,uint256,uint256)");
    console.log("event ShipBattleInitiatedEvent(uint256,uint256,uint256,uint32,uint256,uint32,ShipBattleLocationParams,uint64,uint8,uint256,uint256) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect ShipBattleInitiateSystem errors");


    console.log("// -------- ShipBattleSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipBattleSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("ShipBattleMoveMadeEvent(uint256,uint8,uint8,uint32,uint32,uint32,bool,uint8,uint64,uint8,uint256,uint256)");
    console.log("event ShipBattleMoveMadeEvent(uint256,uint8,uint8,uint32,uint32,uint32,bool,uint8,uint64,uint8,uint256,uint256) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect ShipBattleSystem errors");


    console.log("// -------- ShipBattleTakeLootSystem --------");
    console.log("// Truncated system name: ShipBattleTakeLo");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipBattleTakeLo"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("ShipBattleLootTakenEvent(uint256,uint8,uint64,uint32,uint16,uint32,uint16)");
    console.log("event ShipBattleLootTakenEvent(uint256,uint8,uint64,uint32,uint16,uint32,uint16) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect ShipBattleTakeLootSystem errors");


    console.log("// -------- ItemSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ItemSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("ItemCreatedEvent(uint32,bool,uint32,string)");
    console.log("event ItemCreatedEvent(uint32,bool,uint32,string) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ItemUpdatedEvent(uint32,bool,uint32,string)");
    console.log("event ItemUpdatedEvent(uint32,bool,uint32,string) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect ItemSystem errors");


    console.log("// -------- ItemCreationSystem --------");
    console.log("// Truncated system name: ItemCreationSyst");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ItemCreationSyst"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("ItemCreationCreatedEvent(uint8,uint32,uint16,uint32,uint32,uint64,uint64,uint16,uint32)");
    console.log("event ItemCreationCreatedEvent(uint8,uint32,uint16,uint32,uint32,uint64,uint64,uint16,uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ItemCreationUpdatedEvent(uint8,uint32,uint16,uint32,uint32,uint64,uint64,uint16,uint32)");
    console.log("event ItemCreationUpdatedEvent(uint8,uint32,uint16,uint32,uint32,uint64,uint64,uint16,uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect ItemCreationSystem errors");


    console.log("// -------- ItemProductionSystem --------");
    console.log("// Truncated system name: ItemProductionSy");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ItemProductionSy"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("ItemProductionCreatedEvent(uint8,uint32,uint16,uint32,uint32,uint64,uint64,uint16,uint32[],uint32[])");
    console.log("event ItemProductionCreatedEvent(uint8,uint32,uint16,uint32,uint32,uint64,uint64,uint16,uint32[],uint32[]) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ItemProductionUpdatedEvent(uint8,uint32,uint16,uint32,uint32,uint64,uint64,uint16,uint32[],uint32[])");
    console.log("event ItemProductionUpdatedEvent(uint8,uint32,uint16,uint32,uint32,uint64,uint64,uint16,uint32[],uint32[]) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect ItemProductionSystem errors");


    console.log("// -------- SkillProcessFriendSystem --------");
    console.log("// Truncated system name: SkillProcessFrie");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "SkillProcessFrie"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("SkillProcessCreatedEvent(uint8,uint256,uint8)");
    console.log("event SkillProcessCreatedEvent(uint8,uint256,uint8) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ProductionProcessStartedEvent(uint8,uint256,uint8,uint32,uint32,uint64,uint64)");
    console.log("event ProductionProcessStartedEvent(uint8,uint256,uint8,uint32,uint32,uint64,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ShipProductionProcessStartedEvent(uint8,uint256,uint8,uint32,uint64,uint64)");
    console.log("event ShipProductionProcessStartedEvent(uint8,uint256,uint8,uint32,uint64,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("CreationProcessStartedEvent(uint8,uint256,uint8,uint32,uint32,uint32,uint64,uint64)");
    console.log("event CreationProcessStartedEvent(uint8,uint256,uint8,uint32,uint32,uint32,uint64,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect SkillProcessFriendSystem errors");


    console.log("// -------- SkillProcessSystem --------");
    console.log("// Truncated system name: SkillProcessSyst");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "SkillProcessSyst"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("ProductionProcessCompletedEvent(uint8,uint256,uint8,uint32,uint64,uint64,uint64,bool,uint32,uint32,uint16)");
    console.log("event ProductionProcessCompletedEvent(uint8,uint256,uint8,uint32,uint64,uint64,uint64,bool,uint32,uint32,uint16) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ShipProductionProcessCompletedEvent(uint8,uint256,uint8,uint32,uint64,uint64,uint64,bool,uint32,uint32,uint16)");
    console.log("event ShipProductionProcessCompletedEvent(uint8,uint256,uint8,uint32,uint64,uint64,uint64,bool,uint32,uint32,uint16) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("CreationProcessCompletedEvent(uint8,uint256,uint8,uint32,uint64,uint64,uint64,bool,uint32,uint32,uint16)");
    console.log("event CreationProcessCompletedEvent(uint8,uint256,uint8,uint32,uint64,uint64,uint64,bool,uint32,uint32,uint16) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect SkillProcessSystem errors");


    console.log("// -------- EnergyDropSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "EnergyDropSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("EnergyDropRequestedEvent(address,uint256)");
    console.log("event EnergyDropRequestedEvent(address,uint256) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect EnergyDropSystem errors");


    console.log("// -------- IslandClaimWhitelistSystem --------");
    console.log("// Truncated system name: IslandClaimWhite");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "IslandClaimWhite"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("IslandClaimWhitelistAddedEvent(address)");
    console.log("event IslandClaimWhitelistAddedEvent(address) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("IslandClaimWhitelistUpdatedEvent(address,bool)");
    console.log("event IslandClaimWhitelistUpdatedEvent(address,bool) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("IslandClaimWhitelistRemovedEvent(address)");
    console.log("event IslandClaimWhitelistRemovedEvent(address) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect IslandClaimWhitelistSystem errors");


    console.log("// -------- CounterSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "CounterSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("CounterIncreasedEvent(uint32)");
    console.log("event CounterIncreasedEvent(uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect CounterSystem errors");


    console.log("// -------- MapSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("MapCreatedEvent(bool,bool)");
    console.log("event MapCreatedEvent(bool,bool) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("MapUpdatedEvent(bool,bool)");
    console.log("event MapUpdatedEvent(bool,bool) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("IslandAddedEvent(uint32,uint32)");
    console.log("event IslandAddedEvent(uint32,uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("MultiIslandsAddedEvent(uint32[],uint32)");
    console.log("event MultiIslandsAddedEvent(uint32[],uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("IslandResourcesAirdroppedEvent(uint32,uint32,uint32[],uint32[])");
    console.log("event IslandResourcesAirdroppedEvent(uint32,uint32,uint32[],uint32[]) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect MapSystem errors");


    console.log("// -------- MapFriendSystem --------");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapFriendSystem"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("MapIslandClaimedEvent(uint32,uint32,uint256,uint64)");
    console.log("event MapIslandClaimedEvent(uint32,uint32,uint256,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("IslandResourcesGatheredEvent(uint256,uint64,uint32,uint32)");
    console.log("event IslandResourcesGatheredEvent(uint256,uint64,uint32,uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect MapFriendSystem errors");


    console.log("// -------- ExperienceTableSystem --------");
    console.log("// Truncated system name: ExperienceTableS");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ExperienceTableS"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("ExperienceLevelAddedEvent(uint16,uint32,uint32)");
    console.log("event ExperienceLevelAddedEvent(uint16,uint32,uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ExperienceLevelUpdatedEvent(uint16,uint32,uint32)");
    console.log("event ExperienceLevelUpdatedEvent(uint16,uint32,uint32) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ExperienceTableCreatedEvent(bool)");
    console.log("event ExperienceTableCreatedEvent(bool) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("ExperienceTableUpdatedEvent(bool)");
    console.log("event ExperienceTableUpdatedEvent(bool) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect ExperienceTableSystem errors");


    console.log("// -------- EnergyTokenSystem --------");
    console.log("// Truncated system name: EnergyTokenSyste");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "EnergyTokenSyste"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    eventHash = keccak256("EnergyTokenCreatedEvent(address,uint256,uint64)");
    console.log("event EnergyTokenCreatedEvent(address,uint256,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    eventHash = keccak256("EnergyTokenUpdatedEvent(address,uint256,uint64)");
    console.log("event EnergyTokenUpdatedEvent(address,uint256,uint64) signature topic:", vm.toString(abi.encodePacked(eventHash)));
    console.log("// # forge inspect EnergyTokenSystem errors");


    console.log("// -------- AggregatorServiceSystem --------");
    console.log("// Truncated system name: AggregatorServic");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "AggregatorServic"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    console.log("// # forge inspect AggregatorServiceSystem errors");


    console.log("// -------- ShipBattleServiceSystem --------");
    console.log("// Truncated system name: ShipBattleServic");
    systemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipBattleServic"
    });
    console.log("resourceId (hex):", vm.toString(ResourceId.unwrap(systemId)));
    (systemAddress, systemPublicAccess) = Systems.get(systemId);
    console.log("address:", systemAddress);
    console.log("publicAccess:", systemPublicAccess);
    console.log("// # forge inspect ShipBattleServiceSystem errors");


    // vm.stopBroadcast();
  }
}
