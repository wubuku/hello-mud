// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ItemProductionData {
  uint16 requirementsLevel;
  uint32 baseQuantity;
  uint32 baseExperience;
  uint64 baseCreationTime;
  uint64 energyCost;
  uint16 successRate;
  uint32[] materialItemIds;
  uint32[] materialItemQuantities;
}

library ItemProduction {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "ItemProduction", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000004974656d50726f64756374696f6e0000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x001c060202040408080200000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint8, uint32)
  Schema constant _keySchema = Schema.wrap(0x0005020000030000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint16, uint32, uint32, uint64, uint64, uint16, uint32[], uint32[])
  Schema constant _valueSchema = Schema.wrap(0x001c060201030307070165650000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "itemProductionIdSkillType";
    keyNames[1] = "itemProductionIdItemId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "requirementsLevel";
    fieldNames[1] = "baseQuantity";
    fieldNames[2] = "baseExperience";
    fieldNames[3] = "baseCreationTime";
    fieldNames[4] = "energyCost";
    fieldNames[5] = "successRate";
    fieldNames[6] = "materialItemIds";
    fieldNames[7] = "materialItemQuantities";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get requirementsLevel.
   */
  function getRequirementsLevel(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint16 requirementsLevel) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get requirementsLevel.
   */
  function _getRequirementsLevel(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint16 requirementsLevel) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set requirementsLevel.
   */
  function setRequirementsLevel(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint16 requirementsLevel
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requirementsLevel)), _fieldLayout);
  }

  /**
   * @notice Set requirementsLevel.
   */
  function _setRequirementsLevel(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint16 requirementsLevel
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requirementsLevel)), _fieldLayout);
  }

  /**
   * @notice Get baseQuantity.
   */
  function getBaseQuantity(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint32 baseQuantity) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get baseQuantity.
   */
  function _getBaseQuantity(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint32 baseQuantity) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set baseQuantity.
   */
  function setBaseQuantity(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32 baseQuantity
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((baseQuantity)), _fieldLayout);
  }

  /**
   * @notice Set baseQuantity.
   */
  function _setBaseQuantity(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32 baseQuantity
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((baseQuantity)), _fieldLayout);
  }

  /**
   * @notice Get baseExperience.
   */
  function getBaseExperience(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint32 baseExperience) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get baseExperience.
   */
  function _getBaseExperience(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint32 baseExperience) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set baseExperience.
   */
  function setBaseExperience(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32 baseExperience
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((baseExperience)), _fieldLayout);
  }

  /**
   * @notice Set baseExperience.
   */
  function _setBaseExperience(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32 baseExperience
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((baseExperience)), _fieldLayout);
  }

  /**
   * @notice Get baseCreationTime.
   */
  function getBaseCreationTime(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint64 baseCreationTime) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get baseCreationTime.
   */
  function _getBaseCreationTime(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint64 baseCreationTime) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set baseCreationTime.
   */
  function setBaseCreationTime(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint64 baseCreationTime
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((baseCreationTime)), _fieldLayout);
  }

  /**
   * @notice Set baseCreationTime.
   */
  function _setBaseCreationTime(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint64 baseCreationTime
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((baseCreationTime)), _fieldLayout);
  }

  /**
   * @notice Get energyCost.
   */
  function getEnergyCost(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint64 energyCost) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get energyCost.
   */
  function _getEnergyCost(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint64 energyCost) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set energyCost.
   */
  function setEnergyCost(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId, uint64 energyCost) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((energyCost)), _fieldLayout);
  }

  /**
   * @notice Set energyCost.
   */
  function _setEnergyCost(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId, uint64 energyCost) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((energyCost)), _fieldLayout);
  }

  /**
   * @notice Get successRate.
   */
  function getSuccessRate(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint16 successRate) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get successRate.
   */
  function _getSuccessRate(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint16 successRate) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set successRate.
   */
  function setSuccessRate(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId, uint16 successRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((successRate)), _fieldLayout);
  }

  /**
   * @notice Set successRate.
   */
  function _setSuccessRate(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint16 successRate
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((successRate)), _fieldLayout);
  }

  /**
   * @notice Get materialItemIds.
   */
  function getMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint32[] memory materialItemIds) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get materialItemIds.
   */
  function _getMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint32[] memory materialItemIds) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Set materialItemIds.
   */
  function setMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32[] memory materialItemIds
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((materialItemIds)));
  }

  /**
   * @notice Set materialItemIds.
   */
  function _setMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32[] memory materialItemIds
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((materialItemIds)));
  }

  /**
   * @notice Get the length of materialItemIds.
   */
  function lengthMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of materialItemIds.
   */
  function _lengthMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get an item of materialItemIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint256 _index
  ) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of materialItemIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint256 _index
  ) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Push an element to materialItemIds.
   */
  function pushMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to materialItemIds.
   */
  function _pushMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from materialItemIds.
   */
  function popMaterialItemIds(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Pop an element from materialItemIds.
   */
  function _popMaterialItemIds(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Update an element of materialItemIds at `_index`.
   */
  function updateMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint256 _index,
    uint32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of materialItemIds at `_index`.
   */
  function _updateMaterialItemIds(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint256 _index,
    uint32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get materialItemQuantities.
   */
  function getMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint32[] memory materialItemQuantities) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get materialItemQuantities.
   */
  function _getMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint32[] memory materialItemQuantities) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Set materialItemQuantities.
   */
  function setMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32[] memory materialItemQuantities
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((materialItemQuantities)));
  }

  /**
   * @notice Set materialItemQuantities.
   */
  function _setMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32[] memory materialItemQuantities
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((materialItemQuantities)));
  }

  /**
   * @notice Get the length of materialItemQuantities.
   */
  function lengthMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of materialItemQuantities.
   */
  function _lengthMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get an item of materialItemQuantities.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint256 _index
  ) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of materialItemQuantities.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint256 _index
  ) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Push an element to materialItemQuantities.
   */
  function pushMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to materialItemQuantities.
   */
  function _pushMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from materialItemQuantities.
   */
  function popMaterialItemQuantities(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 4);
  }

  /**
   * @notice Pop an element from materialItemQuantities.
   */
  function _popMaterialItemQuantities(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 4);
  }

  /**
   * @notice Update an element of materialItemQuantities at `_index`.
   */
  function updateMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint256 _index,
    uint32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of materialItemQuantities at `_index`.
   */
  function _updateMaterialItemQuantities(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint256 _index,
    uint32 _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (ItemProductionData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal view returns (ItemProductionData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint16 requirementsLevel,
    uint32 baseQuantity,
    uint32 baseExperience,
    uint64 baseCreationTime,
    uint64 energyCost,
    uint16 successRate,
    uint32[] memory materialItemIds,
    uint32[] memory materialItemQuantities
  ) internal {
    bytes memory _staticData = encodeStatic(
      requirementsLevel,
      baseQuantity,
      baseExperience,
      baseCreationTime,
      energyCost,
      successRate
    );

    EncodedLengths _encodedLengths = encodeLengths(materialItemIds, materialItemQuantities);
    bytes memory _dynamicData = encodeDynamic(materialItemIds, materialItemQuantities);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    uint16 requirementsLevel,
    uint32 baseQuantity,
    uint32 baseExperience,
    uint64 baseCreationTime,
    uint64 energyCost,
    uint16 successRate,
    uint32[] memory materialItemIds,
    uint32[] memory materialItemQuantities
  ) internal {
    bytes memory _staticData = encodeStatic(
      requirementsLevel,
      baseQuantity,
      baseExperience,
      baseCreationTime,
      energyCost,
      successRate
    );

    EncodedLengths _encodedLengths = encodeLengths(materialItemIds, materialItemQuantities);
    bytes memory _dynamicData = encodeDynamic(materialItemIds, materialItemQuantities);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    ItemProductionData memory _table
  ) internal {
    bytes memory _staticData = encodeStatic(
      _table.requirementsLevel,
      _table.baseQuantity,
      _table.baseExperience,
      _table.baseCreationTime,
      _table.energyCost,
      _table.successRate
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.materialItemIds, _table.materialItemQuantities);
    bytes memory _dynamicData = encodeDynamic(_table.materialItemIds, _table.materialItemQuantities);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId,
    ItemProductionData memory _table
  ) internal {
    bytes memory _staticData = encodeStatic(
      _table.requirementsLevel,
      _table.baseQuantity,
      _table.baseExperience,
      _table.baseCreationTime,
      _table.energyCost,
      _table.successRate
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.materialItemIds, _table.materialItemQuantities);
    bytes memory _dynamicData = encodeDynamic(_table.materialItemIds, _table.materialItemQuantities);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint16 requirementsLevel,
      uint32 baseQuantity,
      uint32 baseExperience,
      uint64 baseCreationTime,
      uint64 energyCost,
      uint16 successRate
    )
  {
    requirementsLevel = (uint16(Bytes.getBytes2(_blob, 0)));

    baseQuantity = (uint32(Bytes.getBytes4(_blob, 2)));

    baseExperience = (uint32(Bytes.getBytes4(_blob, 6)));

    baseCreationTime = (uint64(Bytes.getBytes8(_blob, 10)));

    energyCost = (uint64(Bytes.getBytes8(_blob, 18)));

    successRate = (uint16(Bytes.getBytes2(_blob, 26)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint32[] memory materialItemIds, uint32[] memory materialItemQuantities) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    materialItemIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    materialItemQuantities = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (ItemProductionData memory _table) {
    (
      _table.requirementsLevel,
      _table.baseQuantity,
      _table.baseExperience,
      _table.baseCreationTime,
      _table.energyCost,
      _table.successRate
    ) = decodeStatic(_staticData);

    (_table.materialItemIds, _table.materialItemQuantities) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint16 requirementsLevel,
    uint32 baseQuantity,
    uint32 baseExperience,
    uint64 baseCreationTime,
    uint64 energyCost,
    uint16 successRate
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint32[] memory materialItemIds,
    uint32[] memory materialItemQuantities
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(materialItemIds.length * 4, materialItemQuantities.length * 4);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    uint32[] memory materialItemIds,
    uint32[] memory materialItemQuantities
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((materialItemIds)), EncodeArray.encode((materialItemQuantities)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint16 requirementsLevel,
    uint32 baseQuantity,
    uint32 baseExperience,
    uint64 baseCreationTime,
    uint64 energyCost,
    uint16 successRate,
    uint32[] memory materialItemIds,
    uint32[] memory materialItemQuantities
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      requirementsLevel,
      baseQuantity,
      baseExperience,
      baseCreationTime,
      energyCost,
      successRate
    );

    EncodedLengths _encodedLengths = encodeLengths(materialItemIds, materialItemQuantities);
    bytes memory _dynamicData = encodeDynamic(materialItemIds, materialItemQuantities);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(
    uint8 itemProductionIdSkillType,
    uint32 itemProductionIdItemId
  ) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemProductionIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemProductionIdItemId));

    return _keyTuple;
  }
}
