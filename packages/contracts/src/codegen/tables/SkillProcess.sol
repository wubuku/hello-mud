// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct SkillProcessData {
  uint32 itemId;
  uint64 startedAt;
  uint64 creationTime;
  bool completed;
  uint64 endedAt;
  uint32 batchSize;
  bool existing;
}

library SkillProcess {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "SkillProcess", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626170700000000000000000000000536b696c6c50726f6365737300000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0022070004080801080401000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint8, uint256, uint8)
  Schema constant _keySchema = Schema.wrap(0x00220300001f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint32, uint64, uint64, bool, uint64, uint32, bool)
  Schema constant _valueSchema = Schema.wrap(0x0022070003070760070360000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "skillProcessIdSkillType";
    keyNames[1] = "skillProcessIdPlayerId";
    keyNames[2] = "skillProcessIdSequenceNumber";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "itemId";
    fieldNames[1] = "startedAt";
    fieldNames[2] = "creationTime";
    fieldNames[3] = "completed";
    fieldNames[4] = "endedAt";
    fieldNames[5] = "batchSize";
    fieldNames[6] = "existing";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get itemId.
   */
  function getItemId(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (uint32 itemId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get itemId.
   */
  function _getItemId(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (uint32 itemId) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set itemId.
   */
  function setItemId(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint32 itemId
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((itemId)), _fieldLayout);
  }

  /**
   * @notice Set itemId.
   */
  function _setItemId(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint32 itemId
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((itemId)), _fieldLayout);
  }

  /**
   * @notice Get startedAt.
   */
  function getStartedAt(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (uint64 startedAt) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get startedAt.
   */
  function _getStartedAt(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (uint64 startedAt) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set startedAt.
   */
  function setStartedAt(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint64 startedAt
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((startedAt)), _fieldLayout);
  }

  /**
   * @notice Set startedAt.
   */
  function _setStartedAt(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint64 startedAt
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((startedAt)), _fieldLayout);
  }

  /**
   * @notice Get creationTime.
   */
  function getCreationTime(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (uint64 creationTime) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get creationTime.
   */
  function _getCreationTime(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (uint64 creationTime) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set creationTime.
   */
  function setCreationTime(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint64 creationTime
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((creationTime)), _fieldLayout);
  }

  /**
   * @notice Set creationTime.
   */
  function _setCreationTime(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint64 creationTime
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((creationTime)), _fieldLayout);
  }

  /**
   * @notice Get completed.
   */
  function getCompleted(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (bool completed) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get completed.
   */
  function _getCompleted(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (bool completed) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set completed.
   */
  function setCompleted(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    bool completed
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((completed)), _fieldLayout);
  }

  /**
   * @notice Set completed.
   */
  function _setCompleted(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    bool completed
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((completed)), _fieldLayout);
  }

  /**
   * @notice Get endedAt.
   */
  function getEndedAt(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (uint64 endedAt) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get endedAt.
   */
  function _getEndedAt(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (uint64 endedAt) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set endedAt.
   */
  function setEndedAt(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint64 endedAt
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((endedAt)), _fieldLayout);
  }

  /**
   * @notice Set endedAt.
   */
  function _setEndedAt(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint64 endedAt
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((endedAt)), _fieldLayout);
  }

  /**
   * @notice Get batchSize.
   */
  function getBatchSize(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (uint32 batchSize) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get batchSize.
   */
  function _getBatchSize(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (uint32 batchSize) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set batchSize.
   */
  function setBatchSize(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint32 batchSize
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((batchSize)), _fieldLayout);
  }

  /**
   * @notice Set batchSize.
   */
  function _setBatchSize(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint32 batchSize
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((batchSize)), _fieldLayout);
  }

  /**
   * @notice Get existing.
   */
  function getExisting(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (bool existing) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get existing.
   */
  function _getExisting(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (bool existing) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set existing.
   */
  function setExisting(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    bool existing
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((existing)), _fieldLayout);
  }

  /**
   * @notice Set existing.
   */
  function _setExisting(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    bool existing
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((existing)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (SkillProcessData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal view returns (SkillProcessData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint32 itemId,
    uint64 startedAt,
    uint64 creationTime,
    bool completed,
    uint64 endedAt,
    uint32 batchSize,
    bool existing
  ) internal {
    bytes memory _staticData = encodeStatic(itemId, startedAt, creationTime, completed, endedAt, batchSize, existing);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    uint32 itemId,
    uint64 startedAt,
    uint64 creationTime,
    bool completed,
    uint64 endedAt,
    uint32 batchSize,
    bool existing
  ) internal {
    bytes memory _staticData = encodeStatic(itemId, startedAt, creationTime, completed, endedAt, batchSize, existing);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    SkillProcessData memory _table
  ) internal {
    bytes memory _staticData = encodeStatic(
      _table.itemId,
      _table.startedAt,
      _table.creationTime,
      _table.completed,
      _table.endedAt,
      _table.batchSize,
      _table.existing
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber,
    SkillProcessData memory _table
  ) internal {
    bytes memory _staticData = encodeStatic(
      _table.itemId,
      _table.startedAt,
      _table.creationTime,
      _table.completed,
      _table.endedAt,
      _table.batchSize,
      _table.existing
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint32 itemId,
      uint64 startedAt,
      uint64 creationTime,
      bool completed,
      uint64 endedAt,
      uint32 batchSize,
      bool existing
    )
  {
    itemId = (uint32(Bytes.getBytes4(_blob, 0)));

    startedAt = (uint64(Bytes.getBytes8(_blob, 4)));

    creationTime = (uint64(Bytes.getBytes8(_blob, 12)));

    completed = (_toBool(uint8(Bytes.getBytes1(_blob, 20))));

    endedAt = (uint64(Bytes.getBytes8(_blob, 21)));

    batchSize = (uint32(Bytes.getBytes4(_blob, 29)));

    existing = (_toBool(uint8(Bytes.getBytes1(_blob, 33))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (SkillProcessData memory _table) {
    (
      _table.itemId,
      _table.startedAt,
      _table.creationTime,
      _table.completed,
      _table.endedAt,
      _table.batchSize,
      _table.existing
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 itemId,
    uint64 startedAt,
    uint64 creationTime,
    bool completed,
    uint64 endedAt,
    uint32 batchSize,
    bool existing
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(itemId, startedAt, creationTime, completed, endedAt, batchSize, existing);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 itemId,
    uint64 startedAt,
    uint64 creationTime,
    bool completed,
    uint64 endedAt,
    uint32 batchSize,
    bool existing
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(itemId, startedAt, creationTime, completed, endedAt, batchSize, existing);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(
    uint8 skillProcessIdSkillType,
    uint256 skillProcessIdPlayerId,
    uint8 skillProcessIdSequenceNumber
  ) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(skillProcessIdSkillType));
    _keyTuple[1] = bytes32(uint256(skillProcessIdPlayerId));
    _keyTuple[2] = bytes32(uint256(skillProcessIdSequenceNumber));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
