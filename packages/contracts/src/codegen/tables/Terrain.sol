// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct TerrainData {
  string terrainType;
  uint8[] foo;
  bytes bar;
}

library Terrain {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Terrain", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000005465727261696e000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0000000300000000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint32, uint32)
  Schema constant _keySchema = Schema.wrap(0x0008020003030000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (string, uint8[], bytes)
  Schema constant _valueSchema = Schema.wrap(0x00000003c562c400000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "x";
    keyNames[1] = "y";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "terrainType";
    fieldNames[1] = "foo";
    fieldNames[2] = "bar";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get terrainType.
   */
  function getTerrainType(uint32 x, uint32 y) internal view returns (string memory terrainType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get terrainType.
   */
  function _getTerrainType(uint32 x, uint32 y) internal view returns (string memory terrainType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set terrainType.
   */
  function setTerrainType(uint32 x, uint32 y, string memory terrainType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((terrainType)));
  }

  /**
   * @notice Set terrainType.
   */
  function _setTerrainType(uint32 x, uint32 y, string memory terrainType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((terrainType)));
  }

  /**
   * @notice Get the length of terrainType.
   */
  function lengthTerrainType(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of terrainType.
   */
  function _lengthTerrainType(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of terrainType.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemTerrainType(uint32 x, uint32 y, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of terrainType.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemTerrainType(uint32 x, uint32 y, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to terrainType.
   */
  function pushTerrainType(uint32 x, uint32 y, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to terrainType.
   */
  function _pushTerrainType(uint32 x, uint32 y, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from terrainType.
   */
  function popTerrainType(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from terrainType.
   */
  function _popTerrainType(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of terrainType at `_index`.
   */
  function updateTerrainType(uint32 x, uint32 y, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of terrainType at `_index`.
   */
  function _updateTerrainType(uint32 x, uint32 y, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get foo.
   */
  function getFoo(uint32 x, uint32 y) internal view returns (uint8[] memory foo) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /**
   * @notice Get foo.
   */
  function _getFoo(uint32 x, uint32 y) internal view returns (uint8[] memory foo) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /**
   * @notice Set foo.
   */
  function setFoo(uint32 x, uint32 y, uint8[] memory foo) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((foo)));
  }

  /**
   * @notice Set foo.
   */
  function _setFoo(uint32 x, uint32 y, uint8[] memory foo) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((foo)));
  }

  /**
   * @notice Get the length of foo.
   */
  function lengthFoo(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of foo.
   */
  function _lengthFoo(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of foo.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemFoo(uint32 x, uint32 y, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (uint8(bytes1(_blob)));
    }
  }

  /**
   * @notice Get an item of foo.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemFoo(uint32 x, uint32 y, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (uint8(bytes1(_blob)));
    }
  }

  /**
   * @notice Push an element to foo.
   */
  function pushFoo(uint32 x, uint32 y, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to foo.
   */
  function _pushFoo(uint32 x, uint32 y, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from foo.
   */
  function popFoo(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Pop an element from foo.
   */
  function _popFoo(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Update an element of foo at `_index`.
   */
  function updateFoo(uint32 x, uint32 y, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of foo at `_index`.
   */
  function _updateFoo(uint32 x, uint32 y, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get bar.
   */
  function getBar(uint32 x, uint32 y) internal view returns (bytes memory bar) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 2);
    return (bytes(_blob));
  }

  /**
   * @notice Get bar.
   */
  function _getBar(uint32 x, uint32 y) internal view returns (bytes memory bar) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 2);
    return (bytes(_blob));
  }

  /**
   * @notice Set bar.
   */
  function setBar(uint32 x, uint32 y, bytes memory bar) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 2, bytes((bar)));
  }

  /**
   * @notice Set bar.
   */
  function _setBar(uint32 x, uint32 y, bytes memory bar) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setDynamicField(_tableId, _keyTuple, 2, bytes((bar)));
  }

  /**
   * @notice Get the length of bar.
   */
  function lengthBar(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of bar.
   */
  function _lengthBar(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of bar.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemBar(uint32 x, uint32 y, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * @notice Get an item of bar.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemBar(uint32 x, uint32 y, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * @notice Push a slice to bar.
   */
  function pushBar(uint32 x, uint32 y, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /**
   * @notice Push a slice to bar.
   */
  function _pushBar(uint32 x, uint32 y, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from bar.
   */
  function popBar(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Pop a slice from bar.
   */
  function _popBar(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 2, 1);
  }

  /**
   * @notice Update a slice of bar at `_index`.
   */
  function updateBar(uint32 x, uint32 y, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of bar at `_index`.
   */
  function _updateBar(uint32 x, uint32 y, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint32 x, uint32 y) internal view returns (TerrainData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint32 x, uint32 y) internal view returns (TerrainData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(uint32 x, uint32 y, string memory terrainType, uint8[] memory foo, bytes memory bar) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(terrainType, foo, bar);
    bytes memory _dynamicData = encodeDynamic(terrainType, foo, bar);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(uint32 x, uint32 y, string memory terrainType, uint8[] memory foo, bytes memory bar) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(terrainType, foo, bar);
    bytes memory _dynamicData = encodeDynamic(terrainType, foo, bar);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint32 x, uint32 y, TerrainData memory _table) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(_table.terrainType, _table.foo, _table.bar);
    bytes memory _dynamicData = encodeDynamic(_table.terrainType, _table.foo, _table.bar);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint32 x, uint32 y, TerrainData memory _table) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(_table.terrainType, _table.foo, _table.bar);
    bytes memory _dynamicData = encodeDynamic(_table.terrainType, _table.foo, _table.bar);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory terrainType, uint8[] memory foo, bytes memory bar) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    terrainType = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    foo = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint8());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    bar = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   *
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (TerrainData memory _table) {
    (_table.terrainType, _table.foo, _table.bar) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    string memory terrainType,
    uint8[] memory foo,
    bytes memory bar
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(terrainType).length, foo.length * 1, bytes(bar).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    string memory terrainType,
    uint8[] memory foo,
    bytes memory bar
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((terrainType)), EncodeArray.encode((foo)), bytes((bar)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    string memory terrainType,
    uint8[] memory foo,
    bytes memory bar
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(terrainType, foo, bar);
    bytes memory _dynamicData = encodeDynamic(terrainType, foo, bar);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint32 x, uint32 y) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    return _keyTuple;
  }
}
