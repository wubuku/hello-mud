// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ItemCreationData {
  uint16 requirementsLevel;
  uint32 baseQuantity;
  uint32 baseExperience;
  uint64 baseCreationTime;
  uint64 energyCost;
  uint16 successRate;
  uint32 resourceCost;
}

library ItemCreation {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "ItemCreation", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000004974656d4372656174696f6e00000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0020070002040408080204000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint8, uint32)
  Schema constant _keySchema = Schema.wrap(0x0005020000030000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint16, uint32, uint32, uint64, uint64, uint16, uint32)
  Schema constant _valueSchema = Schema.wrap(0x0020070001030307070103000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "itemCreationIdSkillType";
    keyNames[1] = "itemCreationIdItemId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "requirementsLevel";
    fieldNames[1] = "baseQuantity";
    fieldNames[2] = "baseExperience";
    fieldNames[3] = "baseCreationTime";
    fieldNames[4] = "energyCost";
    fieldNames[5] = "successRate";
    fieldNames[6] = "resourceCost";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get requirementsLevel.
   */
  function getRequirementsLevel(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint16 requirementsLevel) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get requirementsLevel.
   */
  function _getRequirementsLevel(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint16 requirementsLevel) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set requirementsLevel.
   */
  function setRequirementsLevel(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId,
    uint16 requirementsLevel
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requirementsLevel)), _fieldLayout);
  }

  /**
   * @notice Set requirementsLevel.
   */
  function _setRequirementsLevel(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId,
    uint16 requirementsLevel
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requirementsLevel)), _fieldLayout);
  }

  /**
   * @notice Get baseQuantity.
   */
  function getBaseQuantity(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint32 baseQuantity) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get baseQuantity.
   */
  function _getBaseQuantity(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint32 baseQuantity) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set baseQuantity.
   */
  function setBaseQuantity(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId, uint32 baseQuantity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((baseQuantity)), _fieldLayout);
  }

  /**
   * @notice Set baseQuantity.
   */
  function _setBaseQuantity(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId, uint32 baseQuantity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((baseQuantity)), _fieldLayout);
  }

  /**
   * @notice Get baseExperience.
   */
  function getBaseExperience(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint32 baseExperience) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get baseExperience.
   */
  function _getBaseExperience(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint32 baseExperience) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set baseExperience.
   */
  function setBaseExperience(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId,
    uint32 baseExperience
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((baseExperience)), _fieldLayout);
  }

  /**
   * @notice Set baseExperience.
   */
  function _setBaseExperience(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId,
    uint32 baseExperience
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((baseExperience)), _fieldLayout);
  }

  /**
   * @notice Get baseCreationTime.
   */
  function getBaseCreationTime(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint64 baseCreationTime) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get baseCreationTime.
   */
  function _getBaseCreationTime(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint64 baseCreationTime) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set baseCreationTime.
   */
  function setBaseCreationTime(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId,
    uint64 baseCreationTime
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((baseCreationTime)), _fieldLayout);
  }

  /**
   * @notice Set baseCreationTime.
   */
  function _setBaseCreationTime(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId,
    uint64 baseCreationTime
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((baseCreationTime)), _fieldLayout);
  }

  /**
   * @notice Get energyCost.
   */
  function getEnergyCost(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint64 energyCost) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get energyCost.
   */
  function _getEnergyCost(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint64 energyCost) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set energyCost.
   */
  function setEnergyCost(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId, uint64 energyCost) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((energyCost)), _fieldLayout);
  }

  /**
   * @notice Set energyCost.
   */
  function _setEnergyCost(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId, uint64 energyCost) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((energyCost)), _fieldLayout);
  }

  /**
   * @notice Get successRate.
   */
  function getSuccessRate(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint16 successRate) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get successRate.
   */
  function _getSuccessRate(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint16 successRate) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set successRate.
   */
  function setSuccessRate(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId, uint16 successRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((successRate)), _fieldLayout);
  }

  /**
   * @notice Set successRate.
   */
  function _setSuccessRate(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId, uint16 successRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((successRate)), _fieldLayout);
  }

  /**
   * @notice Get resourceCost.
   */
  function getResourceCost(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint32 resourceCost) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get resourceCost.
   */
  function _getResourceCost(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (uint32 resourceCost) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set resourceCost.
   */
  function setResourceCost(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId, uint32 resourceCost) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((resourceCost)), _fieldLayout);
  }

  /**
   * @notice Set resourceCost.
   */
  function _setResourceCost(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId, uint32 resourceCost) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((resourceCost)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (ItemCreationData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal view returns (ItemCreationData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId,
    uint16 requirementsLevel,
    uint32 baseQuantity,
    uint32 baseExperience,
    uint64 baseCreationTime,
    uint64 energyCost,
    uint16 successRate,
    uint32 resourceCost
  ) internal {
    bytes memory _staticData = encodeStatic(
      requirementsLevel,
      baseQuantity,
      baseExperience,
      baseCreationTime,
      energyCost,
      successRate,
      resourceCost
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId,
    uint16 requirementsLevel,
    uint32 baseQuantity,
    uint32 baseExperience,
    uint64 baseCreationTime,
    uint64 energyCost,
    uint16 successRate,
    uint32 resourceCost
  ) internal {
    bytes memory _staticData = encodeStatic(
      requirementsLevel,
      baseQuantity,
      baseExperience,
      baseCreationTime,
      energyCost,
      successRate,
      resourceCost
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId, ItemCreationData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.requirementsLevel,
      _table.baseQuantity,
      _table.baseExperience,
      _table.baseCreationTime,
      _table.energyCost,
      _table.successRate,
      _table.resourceCost
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId, ItemCreationData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.requirementsLevel,
      _table.baseQuantity,
      _table.baseExperience,
      _table.baseCreationTime,
      _table.energyCost,
      _table.successRate,
      _table.resourceCost
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint16 requirementsLevel,
      uint32 baseQuantity,
      uint32 baseExperience,
      uint64 baseCreationTime,
      uint64 energyCost,
      uint16 successRate,
      uint32 resourceCost
    )
  {
    requirementsLevel = (uint16(Bytes.getBytes2(_blob, 0)));

    baseQuantity = (uint32(Bytes.getBytes4(_blob, 2)));

    baseExperience = (uint32(Bytes.getBytes4(_blob, 6)));

    baseCreationTime = (uint64(Bytes.getBytes8(_blob, 10)));

    energyCost = (uint64(Bytes.getBytes8(_blob, 18)));

    successRate = (uint16(Bytes.getBytes2(_blob, 26)));

    resourceCost = (uint32(Bytes.getBytes4(_blob, 28)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ItemCreationData memory _table) {
    (
      _table.requirementsLevel,
      _table.baseQuantity,
      _table.baseExperience,
      _table.baseCreationTime,
      _table.energyCost,
      _table.successRate,
      _table.resourceCost
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint16 requirementsLevel,
    uint32 baseQuantity,
    uint32 baseExperience,
    uint64 baseCreationTime,
    uint64 energyCost,
    uint16 successRate,
    uint32 resourceCost
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        requirementsLevel,
        baseQuantity,
        baseExperience,
        baseCreationTime,
        energyCost,
        successRate,
        resourceCost
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint16 requirementsLevel,
    uint32 baseQuantity,
    uint32 baseExperience,
    uint64 baseCreationTime,
    uint64 energyCost,
    uint16 successRate,
    uint32 resourceCost
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      requirementsLevel,
      baseQuantity,
      baseExperience,
      baseCreationTime,
      energyCost,
      successRate,
      resourceCost
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(
    uint8 itemCreationIdSkillType,
    uint32 itemCreationIdItemId
  ) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(itemCreationIdSkillType));
    _keyTuple[1] = bytes32(uint256(itemCreationIdItemId));

    return _keyTuple;
  }
}
