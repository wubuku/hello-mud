// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ShipItemData {
  uint8 type_;
  uint32 shipHealthPoints;
  uint8 mountingPosition;
  uint8 capacityUsage;
  uint8 attackBoost;
  uint8 protectionBoost;
  uint8 speedBoost;
  uint8 healthBoost;
}

library ShipItem {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "ShipItem", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626170700000000000000000000000536869704974656d0000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x000b080001040101010101010000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint32)
  Schema constant _keySchema = Schema.wrap(0x0004010003000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint32, uint8, uint8, uint8, uint8, uint8, uint8)
  Schema constant _valueSchema = Schema.wrap(0x000b080000030000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "itemId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "type_";
    fieldNames[1] = "shipHealthPoints";
    fieldNames[2] = "mountingPosition";
    fieldNames[3] = "capacityUsage";
    fieldNames[4] = "attackBoost";
    fieldNames[5] = "protectionBoost";
    fieldNames[6] = "speedBoost";
    fieldNames[7] = "healthBoost";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get type_.
   */
  function getType_(uint32 itemId) internal view returns (uint8 type_) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get type_.
   */
  function _getType_(uint32 itemId) internal view returns (uint8 type_) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set type_.
   */
  function setType_(uint32 itemId, uint8 type_) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((type_)), _fieldLayout);
  }

  /**
   * @notice Set type_.
   */
  function _setType_(uint32 itemId, uint8 type_) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((type_)), _fieldLayout);
  }

  /**
   * @notice Get shipHealthPoints.
   */
  function getShipHealthPoints(uint32 itemId) internal view returns (uint32 shipHealthPoints) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get shipHealthPoints.
   */
  function _getShipHealthPoints(uint32 itemId) internal view returns (uint32 shipHealthPoints) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set shipHealthPoints.
   */
  function setShipHealthPoints(uint32 itemId, uint32 shipHealthPoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((shipHealthPoints)), _fieldLayout);
  }

  /**
   * @notice Set shipHealthPoints.
   */
  function _setShipHealthPoints(uint32 itemId, uint32 shipHealthPoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((shipHealthPoints)), _fieldLayout);
  }

  /**
   * @notice Get mountingPosition.
   */
  function getMountingPosition(uint32 itemId) internal view returns (uint8 mountingPosition) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get mountingPosition.
   */
  function _getMountingPosition(uint32 itemId) internal view returns (uint8 mountingPosition) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set mountingPosition.
   */
  function setMountingPosition(uint32 itemId, uint8 mountingPosition) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((mountingPosition)), _fieldLayout);
  }

  /**
   * @notice Set mountingPosition.
   */
  function _setMountingPosition(uint32 itemId, uint8 mountingPosition) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((mountingPosition)), _fieldLayout);
  }

  /**
   * @notice Get capacityUsage.
   */
  function getCapacityUsage(uint32 itemId) internal view returns (uint8 capacityUsage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get capacityUsage.
   */
  function _getCapacityUsage(uint32 itemId) internal view returns (uint8 capacityUsage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set capacityUsage.
   */
  function setCapacityUsage(uint32 itemId, uint8 capacityUsage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((capacityUsage)), _fieldLayout);
  }

  /**
   * @notice Set capacityUsage.
   */
  function _setCapacityUsage(uint32 itemId, uint8 capacityUsage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((capacityUsage)), _fieldLayout);
  }

  /**
   * @notice Get attackBoost.
   */
  function getAttackBoost(uint32 itemId) internal view returns (uint8 attackBoost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get attackBoost.
   */
  function _getAttackBoost(uint32 itemId) internal view returns (uint8 attackBoost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set attackBoost.
   */
  function setAttackBoost(uint32 itemId, uint8 attackBoost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((attackBoost)), _fieldLayout);
  }

  /**
   * @notice Set attackBoost.
   */
  function _setAttackBoost(uint32 itemId, uint8 attackBoost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((attackBoost)), _fieldLayout);
  }

  /**
   * @notice Get protectionBoost.
   */
  function getProtectionBoost(uint32 itemId) internal view returns (uint8 protectionBoost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get protectionBoost.
   */
  function _getProtectionBoost(uint32 itemId) internal view returns (uint8 protectionBoost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set protectionBoost.
   */
  function setProtectionBoost(uint32 itemId, uint8 protectionBoost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((protectionBoost)), _fieldLayout);
  }

  /**
   * @notice Set protectionBoost.
   */
  function _setProtectionBoost(uint32 itemId, uint8 protectionBoost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((protectionBoost)), _fieldLayout);
  }

  /**
   * @notice Get speedBoost.
   */
  function getSpeedBoost(uint32 itemId) internal view returns (uint8 speedBoost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get speedBoost.
   */
  function _getSpeedBoost(uint32 itemId) internal view returns (uint8 speedBoost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set speedBoost.
   */
  function setSpeedBoost(uint32 itemId, uint8 speedBoost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((speedBoost)), _fieldLayout);
  }

  /**
   * @notice Set speedBoost.
   */
  function _setSpeedBoost(uint32 itemId, uint8 speedBoost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((speedBoost)), _fieldLayout);
  }

  /**
   * @notice Get healthBoost.
   */
  function getHealthBoost(uint32 itemId) internal view returns (uint8 healthBoost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get healthBoost.
   */
  function _getHealthBoost(uint32 itemId) internal view returns (uint8 healthBoost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set healthBoost.
   */
  function setHealthBoost(uint32 itemId, uint8 healthBoost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((healthBoost)), _fieldLayout);
  }

  /**
   * @notice Set healthBoost.
   */
  function _setHealthBoost(uint32 itemId, uint8 healthBoost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((healthBoost)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint32 itemId) internal view returns (ShipItemData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint32 itemId) internal view returns (ShipItemData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint32 itemId,
    uint8 type_,
    uint32 shipHealthPoints,
    uint8 mountingPosition,
    uint8 capacityUsage,
    uint8 attackBoost,
    uint8 protectionBoost,
    uint8 speedBoost,
    uint8 healthBoost
  ) internal {
    bytes memory _staticData = encodeStatic(
      type_,
      shipHealthPoints,
      mountingPosition,
      capacityUsage,
      attackBoost,
      protectionBoost,
      speedBoost,
      healthBoost
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint32 itemId,
    uint8 type_,
    uint32 shipHealthPoints,
    uint8 mountingPosition,
    uint8 capacityUsage,
    uint8 attackBoost,
    uint8 protectionBoost,
    uint8 speedBoost,
    uint8 healthBoost
  ) internal {
    bytes memory _staticData = encodeStatic(
      type_,
      shipHealthPoints,
      mountingPosition,
      capacityUsage,
      attackBoost,
      protectionBoost,
      speedBoost,
      healthBoost
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint32 itemId, ShipItemData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.type_,
      _table.shipHealthPoints,
      _table.mountingPosition,
      _table.capacityUsage,
      _table.attackBoost,
      _table.protectionBoost,
      _table.speedBoost,
      _table.healthBoost
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint32 itemId, ShipItemData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.type_,
      _table.shipHealthPoints,
      _table.mountingPosition,
      _table.capacityUsage,
      _table.attackBoost,
      _table.protectionBoost,
      _table.speedBoost,
      _table.healthBoost
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint8 type_,
      uint32 shipHealthPoints,
      uint8 mountingPosition,
      uint8 capacityUsage,
      uint8 attackBoost,
      uint8 protectionBoost,
      uint8 speedBoost,
      uint8 healthBoost
    )
  {
    type_ = (uint8(Bytes.getBytes1(_blob, 0)));

    shipHealthPoints = (uint32(Bytes.getBytes4(_blob, 1)));

    mountingPosition = (uint8(Bytes.getBytes1(_blob, 5)));

    capacityUsage = (uint8(Bytes.getBytes1(_blob, 6)));

    attackBoost = (uint8(Bytes.getBytes1(_blob, 7)));

    protectionBoost = (uint8(Bytes.getBytes1(_blob, 8)));

    speedBoost = (uint8(Bytes.getBytes1(_blob, 9)));

    healthBoost = (uint8(Bytes.getBytes1(_blob, 10)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ShipItemData memory _table) {
    (
      _table.type_,
      _table.shipHealthPoints,
      _table.mountingPosition,
      _table.capacityUsage,
      _table.attackBoost,
      _table.protectionBoost,
      _table.speedBoost,
      _table.healthBoost
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint32 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint32 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint8 type_,
    uint32 shipHealthPoints,
    uint8 mountingPosition,
    uint8 capacityUsage,
    uint8 attackBoost,
    uint8 protectionBoost,
    uint8 speedBoost,
    uint8 healthBoost
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        type_,
        shipHealthPoints,
        mountingPosition,
        capacityUsage,
        attackBoost,
        protectionBoost,
        speedBoost,
        healthBoost
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 type_,
    uint32 shipHealthPoints,
    uint8 mountingPosition,
    uint8 capacityUsage,
    uint8 attackBoost,
    uint8 protectionBoost,
    uint8 speedBoost,
    uint8 healthBoost
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      type_,
      shipHealthPoints,
      mountingPosition,
      capacityUsage,
      attackBoost,
      protectionBoost,
      speedBoost,
      healthBoost
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint32 itemId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    return _keyTuple;
  }
}
