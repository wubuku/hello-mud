// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ShipData {
  uint256 playerId;
  uint32 rosterSequenceNumber;
  uint32 healthPoints;
  uint32 attack;
  uint32 protection;
  uint32 speed;
  uint32[] buildingExpensesItemIds;
  uint32[] buildingExpensesQuantities;
}

library Ship {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Ship", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462617070000000000000000000000053686970000000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0034060220040404040400000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint32, uint32, uint32, uint32, uint32, uint32[], uint32[])
  Schema constant _valueSchema = Schema.wrap(0x003406021f030303030365650000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "playerId";
    fieldNames[1] = "rosterSequenceNumber";
    fieldNames[2] = "healthPoints";
    fieldNames[3] = "attack";
    fieldNames[4] = "protection";
    fieldNames[5] = "speed";
    fieldNames[6] = "buildingExpensesItemIds";
    fieldNames[7] = "buildingExpensesQuantities";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get playerId.
   */
  function getPlayerId(uint256 id) internal view returns (uint256 playerId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get playerId.
   */
  function _getPlayerId(uint256 id) internal view returns (uint256 playerId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set playerId.
   */
  function setPlayerId(uint256 id, uint256 playerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((playerId)), _fieldLayout);
  }

  /**
   * @notice Set playerId.
   */
  function _setPlayerId(uint256 id, uint256 playerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((playerId)), _fieldLayout);
  }

  /**
   * @notice Get rosterSequenceNumber.
   */
  function getRosterSequenceNumber(uint256 id) internal view returns (uint32 rosterSequenceNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get rosterSequenceNumber.
   */
  function _getRosterSequenceNumber(uint256 id) internal view returns (uint32 rosterSequenceNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set rosterSequenceNumber.
   */
  function setRosterSequenceNumber(uint256 id, uint32 rosterSequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((rosterSequenceNumber)), _fieldLayout);
  }

  /**
   * @notice Set rosterSequenceNumber.
   */
  function _setRosterSequenceNumber(uint256 id, uint32 rosterSequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((rosterSequenceNumber)), _fieldLayout);
  }

  /**
   * @notice Get healthPoints.
   */
  function getHealthPoints(uint256 id) internal view returns (uint32 healthPoints) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get healthPoints.
   */
  function _getHealthPoints(uint256 id) internal view returns (uint32 healthPoints) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set healthPoints.
   */
  function setHealthPoints(uint256 id, uint32 healthPoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((healthPoints)), _fieldLayout);
  }

  /**
   * @notice Set healthPoints.
   */
  function _setHealthPoints(uint256 id, uint32 healthPoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((healthPoints)), _fieldLayout);
  }

  /**
   * @notice Get attack.
   */
  function getAttack(uint256 id) internal view returns (uint32 attack) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get attack.
   */
  function _getAttack(uint256 id) internal view returns (uint32 attack) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set attack.
   */
  function setAttack(uint256 id, uint32 attack) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((attack)), _fieldLayout);
  }

  /**
   * @notice Set attack.
   */
  function _setAttack(uint256 id, uint32 attack) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((attack)), _fieldLayout);
  }

  /**
   * @notice Get protection.
   */
  function getProtection(uint256 id) internal view returns (uint32 protection) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get protection.
   */
  function _getProtection(uint256 id) internal view returns (uint32 protection) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set protection.
   */
  function setProtection(uint256 id, uint32 protection) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((protection)), _fieldLayout);
  }

  /**
   * @notice Set protection.
   */
  function _setProtection(uint256 id, uint32 protection) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((protection)), _fieldLayout);
  }

  /**
   * @notice Get speed.
   */
  function getSpeed(uint256 id) internal view returns (uint32 speed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get speed.
   */
  function _getSpeed(uint256 id) internal view returns (uint32 speed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set speed.
   */
  function setSpeed(uint256 id, uint32 speed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((speed)), _fieldLayout);
  }

  /**
   * @notice Set speed.
   */
  function _setSpeed(uint256 id, uint32 speed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((speed)), _fieldLayout);
  }

  /**
   * @notice Get buildingExpensesItemIds.
   */
  function getBuildingExpensesItemIds(uint256 id) internal view returns (uint32[] memory buildingExpensesItemIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get buildingExpensesItemIds.
   */
  function _getBuildingExpensesItemIds(uint256 id) internal view returns (uint32[] memory buildingExpensesItemIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Set buildingExpensesItemIds.
   */
  function setBuildingExpensesItemIds(uint256 id, uint32[] memory buildingExpensesItemIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((buildingExpensesItemIds)));
  }

  /**
   * @notice Set buildingExpensesItemIds.
   */
  function _setBuildingExpensesItemIds(uint256 id, uint32[] memory buildingExpensesItemIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((buildingExpensesItemIds)));
  }

  /**
   * @notice Get the length of buildingExpensesItemIds.
   */
  function lengthBuildingExpensesItemIds(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of buildingExpensesItemIds.
   */
  function _lengthBuildingExpensesItemIds(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get an item of buildingExpensesItemIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemBuildingExpensesItemIds(uint256 id, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of buildingExpensesItemIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemBuildingExpensesItemIds(uint256 id, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Push an element to buildingExpensesItemIds.
   */
  function pushBuildingExpensesItemIds(uint256 id, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to buildingExpensesItemIds.
   */
  function _pushBuildingExpensesItemIds(uint256 id, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from buildingExpensesItemIds.
   */
  function popBuildingExpensesItemIds(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Pop an element from buildingExpensesItemIds.
   */
  function _popBuildingExpensesItemIds(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Update an element of buildingExpensesItemIds at `_index`.
   */
  function updateBuildingExpensesItemIds(uint256 id, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of buildingExpensesItemIds at `_index`.
   */
  function _updateBuildingExpensesItemIds(uint256 id, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get buildingExpensesQuantities.
   */
  function getBuildingExpensesQuantities(
    uint256 id
  ) internal view returns (uint32[] memory buildingExpensesQuantities) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get buildingExpensesQuantities.
   */
  function _getBuildingExpensesQuantities(
    uint256 id
  ) internal view returns (uint32[] memory buildingExpensesQuantities) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Set buildingExpensesQuantities.
   */
  function setBuildingExpensesQuantities(uint256 id, uint32[] memory buildingExpensesQuantities) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((buildingExpensesQuantities)));
  }

  /**
   * @notice Set buildingExpensesQuantities.
   */
  function _setBuildingExpensesQuantities(uint256 id, uint32[] memory buildingExpensesQuantities) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((buildingExpensesQuantities)));
  }

  /**
   * @notice Get the length of buildingExpensesQuantities.
   */
  function lengthBuildingExpensesQuantities(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of buildingExpensesQuantities.
   */
  function _lengthBuildingExpensesQuantities(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get an item of buildingExpensesQuantities.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemBuildingExpensesQuantities(uint256 id, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of buildingExpensesQuantities.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemBuildingExpensesQuantities(uint256 id, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Push an element to buildingExpensesQuantities.
   */
  function pushBuildingExpensesQuantities(uint256 id, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to buildingExpensesQuantities.
   */
  function _pushBuildingExpensesQuantities(uint256 id, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from buildingExpensesQuantities.
   */
  function popBuildingExpensesQuantities(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 4);
  }

  /**
   * @notice Pop an element from buildingExpensesQuantities.
   */
  function _popBuildingExpensesQuantities(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 4);
  }

  /**
   * @notice Update an element of buildingExpensesQuantities at `_index`.
   */
  function updateBuildingExpensesQuantities(uint256 id, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of buildingExpensesQuantities at `_index`.
   */
  function _updateBuildingExpensesQuantities(uint256 id, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 id) internal view returns (ShipData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 id) internal view returns (ShipData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 id,
    uint256 playerId,
    uint32 rosterSequenceNumber,
    uint32 healthPoints,
    uint32 attack,
    uint32 protection,
    uint32 speed,
    uint32[] memory buildingExpensesItemIds,
    uint32[] memory buildingExpensesQuantities
  ) internal {
    bytes memory _staticData = encodeStatic(playerId, rosterSequenceNumber, healthPoints, attack, protection, speed);

    EncodedLengths _encodedLengths = encodeLengths(buildingExpensesItemIds, buildingExpensesQuantities);
    bytes memory _dynamicData = encodeDynamic(buildingExpensesItemIds, buildingExpensesQuantities);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 id,
    uint256 playerId,
    uint32 rosterSequenceNumber,
    uint32 healthPoints,
    uint32 attack,
    uint32 protection,
    uint32 speed,
    uint32[] memory buildingExpensesItemIds,
    uint32[] memory buildingExpensesQuantities
  ) internal {
    bytes memory _staticData = encodeStatic(playerId, rosterSequenceNumber, healthPoints, attack, protection, speed);

    EncodedLengths _encodedLengths = encodeLengths(buildingExpensesItemIds, buildingExpensesQuantities);
    bytes memory _dynamicData = encodeDynamic(buildingExpensesItemIds, buildingExpensesQuantities);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 id, ShipData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.playerId,
      _table.rosterSequenceNumber,
      _table.healthPoints,
      _table.attack,
      _table.protection,
      _table.speed
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.buildingExpensesItemIds, _table.buildingExpensesQuantities);
    bytes memory _dynamicData = encodeDynamic(_table.buildingExpensesItemIds, _table.buildingExpensesQuantities);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 id, ShipData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.playerId,
      _table.rosterSequenceNumber,
      _table.healthPoints,
      _table.attack,
      _table.protection,
      _table.speed
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.buildingExpensesItemIds, _table.buildingExpensesQuantities);
    bytes memory _dynamicData = encodeDynamic(_table.buildingExpensesItemIds, _table.buildingExpensesQuantities);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 playerId,
      uint32 rosterSequenceNumber,
      uint32 healthPoints,
      uint32 attack,
      uint32 protection,
      uint32 speed
    )
  {
    playerId = (uint256(Bytes.getBytes32(_blob, 0)));

    rosterSequenceNumber = (uint32(Bytes.getBytes4(_blob, 32)));

    healthPoints = (uint32(Bytes.getBytes4(_blob, 36)));

    attack = (uint32(Bytes.getBytes4(_blob, 40)));

    protection = (uint32(Bytes.getBytes4(_blob, 44)));

    speed = (uint32(Bytes.getBytes4(_blob, 48)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint32[] memory buildingExpensesItemIds, uint32[] memory buildingExpensesQuantities) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    buildingExpensesItemIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    buildingExpensesQuantities = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (ShipData memory _table) {
    (
      _table.playerId,
      _table.rosterSequenceNumber,
      _table.healthPoints,
      _table.attack,
      _table.protection,
      _table.speed
    ) = decodeStatic(_staticData);

    (_table.buildingExpensesItemIds, _table.buildingExpensesQuantities) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 playerId,
    uint32 rosterSequenceNumber,
    uint32 healthPoints,
    uint32 attack,
    uint32 protection,
    uint32 speed
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(playerId, rosterSequenceNumber, healthPoints, attack, protection, speed);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint32[] memory buildingExpensesItemIds,
    uint32[] memory buildingExpensesQuantities
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(
        buildingExpensesItemIds.length * 4,
        buildingExpensesQuantities.length * 4
      );
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    uint32[] memory buildingExpensesItemIds,
    uint32[] memory buildingExpensesQuantities
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(EncodeArray.encode((buildingExpensesItemIds)), EncodeArray.encode((buildingExpensesQuantities)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 playerId,
    uint32 rosterSequenceNumber,
    uint32 healthPoints,
    uint32 attack,
    uint32 protection,
    uint32 speed,
    uint32[] memory buildingExpensesItemIds,
    uint32[] memory buildingExpensesQuantities
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(playerId, rosterSequenceNumber, healthPoints, attack, protection, speed);

    EncodedLengths _encodedLengths = encodeLengths(buildingExpensesItemIds, buildingExpensesQuantities);
    bytes memory _dynamicData = encodeDynamic(buildingExpensesItemIds, buildingExpensesQuantities);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    return _keyTuple;
  }
}
