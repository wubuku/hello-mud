// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct RosterData {
  uint8 status;
  uint32 speed;
  uint64 coordinatesUpdatedAt;
  uint64 sailDuration;
  uint64 setSailAt;
  uint256 shipBattleId;
  bool environmentOwned;
  uint32 baseExperience;
  uint256[] shipIds;
}

library Roster {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Roster", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626170700000000000000000000000526f7374657200000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0042080101040808082001040000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256, uint32)
  Schema constant _keySchema = Schema.wrap(0x002402001f030000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint32, uint64, uint64, uint64, uint256, bool, uint32, uint256[])
  Schema constant _valueSchema = Schema.wrap(0x0042080100030707071f60038100000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "playerId";
    keyNames[1] = "sequenceNumber";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](9);
    fieldNames[0] = "status";
    fieldNames[1] = "speed";
    fieldNames[2] = "coordinatesUpdatedAt";
    fieldNames[3] = "sailDuration";
    fieldNames[4] = "setSailAt";
    fieldNames[5] = "shipBattleId";
    fieldNames[6] = "environmentOwned";
    fieldNames[7] = "baseExperience";
    fieldNames[8] = "shipIds";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get status.
   */
  function getStatus(uint256 playerId, uint32 sequenceNumber) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get status.
   */
  function _getStatus(uint256 playerId, uint32 sequenceNumber) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set status.
   */
  function setStatus(uint256 playerId, uint32 sequenceNumber, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((status)), _fieldLayout);
  }

  /**
   * @notice Set status.
   */
  function _setStatus(uint256 playerId, uint32 sequenceNumber, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((status)), _fieldLayout);
  }

  /**
   * @notice Get speed.
   */
  function getSpeed(uint256 playerId, uint32 sequenceNumber) internal view returns (uint32 speed) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get speed.
   */
  function _getSpeed(uint256 playerId, uint32 sequenceNumber) internal view returns (uint32 speed) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set speed.
   */
  function setSpeed(uint256 playerId, uint32 sequenceNumber, uint32 speed) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((speed)), _fieldLayout);
  }

  /**
   * @notice Set speed.
   */
  function _setSpeed(uint256 playerId, uint32 sequenceNumber, uint32 speed) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((speed)), _fieldLayout);
  }

  /**
   * @notice Get coordinatesUpdatedAt.
   */
  function getCoordinatesUpdatedAt(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint64 coordinatesUpdatedAt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get coordinatesUpdatedAt.
   */
  function _getCoordinatesUpdatedAt(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint64 coordinatesUpdatedAt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set coordinatesUpdatedAt.
   */
  function setCoordinatesUpdatedAt(uint256 playerId, uint32 sequenceNumber, uint64 coordinatesUpdatedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((coordinatesUpdatedAt)), _fieldLayout);
  }

  /**
   * @notice Set coordinatesUpdatedAt.
   */
  function _setCoordinatesUpdatedAt(uint256 playerId, uint32 sequenceNumber, uint64 coordinatesUpdatedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((coordinatesUpdatedAt)), _fieldLayout);
  }

  /**
   * @notice Get sailDuration.
   */
  function getSailDuration(uint256 playerId, uint32 sequenceNumber) internal view returns (uint64 sailDuration) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get sailDuration.
   */
  function _getSailDuration(uint256 playerId, uint32 sequenceNumber) internal view returns (uint64 sailDuration) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set sailDuration.
   */
  function setSailDuration(uint256 playerId, uint32 sequenceNumber, uint64 sailDuration) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((sailDuration)), _fieldLayout);
  }

  /**
   * @notice Set sailDuration.
   */
  function _setSailDuration(uint256 playerId, uint32 sequenceNumber, uint64 sailDuration) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((sailDuration)), _fieldLayout);
  }

  /**
   * @notice Get setSailAt.
   */
  function getSetSailAt(uint256 playerId, uint32 sequenceNumber) internal view returns (uint64 setSailAt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get setSailAt.
   */
  function _getSetSailAt(uint256 playerId, uint32 sequenceNumber) internal view returns (uint64 setSailAt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set setSailAt.
   */
  function setSetSailAt(uint256 playerId, uint32 sequenceNumber, uint64 setSailAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((setSailAt)), _fieldLayout);
  }

  /**
   * @notice Set setSailAt.
   */
  function _setSetSailAt(uint256 playerId, uint32 sequenceNumber, uint64 setSailAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((setSailAt)), _fieldLayout);
  }

  /**
   * @notice Get shipBattleId.
   */
  function getShipBattleId(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256 shipBattleId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get shipBattleId.
   */
  function _getShipBattleId(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256 shipBattleId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set shipBattleId.
   */
  function setShipBattleId(uint256 playerId, uint32 sequenceNumber, uint256 shipBattleId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((shipBattleId)), _fieldLayout);
  }

  /**
   * @notice Set shipBattleId.
   */
  function _setShipBattleId(uint256 playerId, uint32 sequenceNumber, uint256 shipBattleId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((shipBattleId)), _fieldLayout);
  }

  /**
   * @notice Get environmentOwned.
   */
  function getEnvironmentOwned(uint256 playerId, uint32 sequenceNumber) internal view returns (bool environmentOwned) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get environmentOwned.
   */
  function _getEnvironmentOwned(uint256 playerId, uint32 sequenceNumber) internal view returns (bool environmentOwned) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set environmentOwned.
   */
  function setEnvironmentOwned(uint256 playerId, uint32 sequenceNumber, bool environmentOwned) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((environmentOwned)), _fieldLayout);
  }

  /**
   * @notice Set environmentOwned.
   */
  function _setEnvironmentOwned(uint256 playerId, uint32 sequenceNumber, bool environmentOwned) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((environmentOwned)), _fieldLayout);
  }

  /**
   * @notice Get baseExperience.
   */
  function getBaseExperience(uint256 playerId, uint32 sequenceNumber) internal view returns (uint32 baseExperience) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get baseExperience.
   */
  function _getBaseExperience(uint256 playerId, uint32 sequenceNumber) internal view returns (uint32 baseExperience) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set baseExperience.
   */
  function setBaseExperience(uint256 playerId, uint32 sequenceNumber, uint32 baseExperience) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((baseExperience)), _fieldLayout);
  }

  /**
   * @notice Set baseExperience.
   */
  function _setBaseExperience(uint256 playerId, uint32 sequenceNumber, uint32 baseExperience) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((baseExperience)), _fieldLayout);
  }

  /**
   * @notice Get shipIds.
   */
  function getShipIds(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256[] memory shipIds) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get shipIds.
   */
  function _getShipIds(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256[] memory shipIds) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set shipIds.
   */
  function setShipIds(uint256 playerId, uint32 sequenceNumber, uint256[] memory shipIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((shipIds)));
  }

  /**
   * @notice Set shipIds.
   */
  function _setShipIds(uint256 playerId, uint32 sequenceNumber, uint256[] memory shipIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((shipIds)));
  }

  /**
   * @notice Get the length of shipIds.
   */
  function lengthShipIds(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of shipIds.
   */
  function _lengthShipIds(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of shipIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of shipIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to shipIds.
   */
  function pushShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to shipIds.
   */
  function _pushShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from shipIds.
   */
  function popShipIds(uint256 playerId, uint32 sequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Pop an element from shipIds.
   */
  function _popShipIds(uint256 playerId, uint32 sequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Update an element of shipIds at `_index`.
   */
  function updateShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of shipIds at `_index`.
   */
  function _updateShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 playerId, uint32 sequenceNumber) internal view returns (RosterData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 playerId, uint32 sequenceNumber) internal view returns (RosterData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 playerId,
    uint32 sequenceNumber,
    uint8 status,
    uint32 speed,
    uint64 coordinatesUpdatedAt,
    uint64 sailDuration,
    uint64 setSailAt,
    uint256 shipBattleId,
    bool environmentOwned,
    uint32 baseExperience,
    uint256[] memory shipIds
  ) internal {
    bytes memory _staticData = encodeStatic(
      status,
      speed,
      coordinatesUpdatedAt,
      sailDuration,
      setSailAt,
      shipBattleId,
      environmentOwned,
      baseExperience
    );

    EncodedLengths _encodedLengths = encodeLengths(shipIds);
    bytes memory _dynamicData = encodeDynamic(shipIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 playerId,
    uint32 sequenceNumber,
    uint8 status,
    uint32 speed,
    uint64 coordinatesUpdatedAt,
    uint64 sailDuration,
    uint64 setSailAt,
    uint256 shipBattleId,
    bool environmentOwned,
    uint32 baseExperience,
    uint256[] memory shipIds
  ) internal {
    bytes memory _staticData = encodeStatic(
      status,
      speed,
      coordinatesUpdatedAt,
      sailDuration,
      setSailAt,
      shipBattleId,
      environmentOwned,
      baseExperience
    );

    EncodedLengths _encodedLengths = encodeLengths(shipIds);
    bytes memory _dynamicData = encodeDynamic(shipIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 playerId, uint32 sequenceNumber, RosterData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.status,
      _table.speed,
      _table.coordinatesUpdatedAt,
      _table.sailDuration,
      _table.setSailAt,
      _table.shipBattleId,
      _table.environmentOwned,
      _table.baseExperience
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.shipIds);
    bytes memory _dynamicData = encodeDynamic(_table.shipIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 playerId, uint32 sequenceNumber, RosterData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.status,
      _table.speed,
      _table.coordinatesUpdatedAt,
      _table.sailDuration,
      _table.setSailAt,
      _table.shipBattleId,
      _table.environmentOwned,
      _table.baseExperience
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.shipIds);
    bytes memory _dynamicData = encodeDynamic(_table.shipIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint8 status,
      uint32 speed,
      uint64 coordinatesUpdatedAt,
      uint64 sailDuration,
      uint64 setSailAt,
      uint256 shipBattleId,
      bool environmentOwned,
      uint32 baseExperience
    )
  {
    status = (uint8(Bytes.getBytes1(_blob, 0)));

    speed = (uint32(Bytes.getBytes4(_blob, 1)));

    coordinatesUpdatedAt = (uint64(Bytes.getBytes8(_blob, 5)));

    sailDuration = (uint64(Bytes.getBytes8(_blob, 13)));

    setSailAt = (uint64(Bytes.getBytes8(_blob, 21)));

    shipBattleId = (uint256(Bytes.getBytes32(_blob, 29)));

    environmentOwned = (_toBool(uint8(Bytes.getBytes1(_blob, 61))));

    baseExperience = (uint32(Bytes.getBytes4(_blob, 62)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint256[] memory shipIds) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    shipIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (RosterData memory _table) {
    (
      _table.status,
      _table.speed,
      _table.coordinatesUpdatedAt,
      _table.sailDuration,
      _table.setSailAt,
      _table.shipBattleId,
      _table.environmentOwned,
      _table.baseExperience
    ) = decodeStatic(_staticData);

    (_table.shipIds) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 playerId, uint32 sequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 playerId, uint32 sequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint8 status,
    uint32 speed,
    uint64 coordinatesUpdatedAt,
    uint64 sailDuration,
    uint64 setSailAt,
    uint256 shipBattleId,
    bool environmentOwned,
    uint32 baseExperience
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        status,
        speed,
        coordinatesUpdatedAt,
        sailDuration,
        setSailAt,
        shipBattleId,
        environmentOwned,
        baseExperience
      );
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(uint256[] memory shipIds) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(shipIds.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint256[] memory shipIds) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((shipIds)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 status,
    uint32 speed,
    uint64 coordinatesUpdatedAt,
    uint64 sailDuration,
    uint64 setSailAt,
    uint256 shipBattleId,
    bool environmentOwned,
    uint32 baseExperience,
    uint256[] memory shipIds
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      status,
      speed,
      coordinatesUpdatedAt,
      sailDuration,
      setSailAt,
      shipBattleId,
      environmentOwned,
      baseExperience
    );

    EncodedLengths _encodedLengths = encodeLengths(shipIds);
    bytes memory _dynamicData = encodeDynamic(shipIds);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 playerId, uint32 sequenceNumber) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
