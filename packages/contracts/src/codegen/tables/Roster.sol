// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct RosterData {
  uint8 status;
  uint32 speed;
  uint32 baseExperience;
  bool environmentOwned;
  uint32 updatedCoordinatesX;
  uint32 updatedCoordinatesY;
  uint64 coordinatesUpdatedAt;
  uint32 targetCoordinatesX;
  uint32 targetCoordinatesY;
  uint32 originCoordinatesX;
  uint32 originCoordinatesY;
  uint64 sailDuration;
  uint64 setSailAt;
  uint256 shipBattleId;
  uint256[] shipIds;
}

library Roster {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Roster", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626170700000000000000000000000526f7374657200000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x005a0e0101040401040408040404040808200000000000000000000000000000);

  // Hex-encoded key schema of (uint256, uint32)
  Schema constant _keySchema = Schema.wrap(0x002402001f030000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint32, uint32, bool, uint32, uint32, uint64, uint32, uint32, uint32, uint32, uint64, uint64, uint256, uint256[])
  Schema constant _valueSchema = Schema.wrap(0x005a0e01000303600303070303030307071f8100000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "playerId";
    keyNames[1] = "sequenceNumber";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](15);
    fieldNames[0] = "status";
    fieldNames[1] = "speed";
    fieldNames[2] = "baseExperience";
    fieldNames[3] = "environmentOwned";
    fieldNames[4] = "updatedCoordinatesX";
    fieldNames[5] = "updatedCoordinatesY";
    fieldNames[6] = "coordinatesUpdatedAt";
    fieldNames[7] = "targetCoordinatesX";
    fieldNames[8] = "targetCoordinatesY";
    fieldNames[9] = "originCoordinatesX";
    fieldNames[10] = "originCoordinatesY";
    fieldNames[11] = "sailDuration";
    fieldNames[12] = "setSailAt";
    fieldNames[13] = "shipBattleId";
    fieldNames[14] = "shipIds";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get status.
   */
  function getStatus(uint256 playerId, uint32 sequenceNumber) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get status.
   */
  function _getStatus(uint256 playerId, uint32 sequenceNumber) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set status.
   */
  function setStatus(uint256 playerId, uint32 sequenceNumber, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((status)), _fieldLayout);
  }

  /**
   * @notice Set status.
   */
  function _setStatus(uint256 playerId, uint32 sequenceNumber, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((status)), _fieldLayout);
  }

  /**
   * @notice Get speed.
   */
  function getSpeed(uint256 playerId, uint32 sequenceNumber) internal view returns (uint32 speed) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get speed.
   */
  function _getSpeed(uint256 playerId, uint32 sequenceNumber) internal view returns (uint32 speed) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set speed.
   */
  function setSpeed(uint256 playerId, uint32 sequenceNumber, uint32 speed) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((speed)), _fieldLayout);
  }

  /**
   * @notice Set speed.
   */
  function _setSpeed(uint256 playerId, uint32 sequenceNumber, uint32 speed) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((speed)), _fieldLayout);
  }

  /**
   * @notice Get baseExperience.
   */
  function getBaseExperience(uint256 playerId, uint32 sequenceNumber) internal view returns (uint32 baseExperience) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get baseExperience.
   */
  function _getBaseExperience(uint256 playerId, uint32 sequenceNumber) internal view returns (uint32 baseExperience) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set baseExperience.
   */
  function setBaseExperience(uint256 playerId, uint32 sequenceNumber, uint32 baseExperience) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((baseExperience)), _fieldLayout);
  }

  /**
   * @notice Set baseExperience.
   */
  function _setBaseExperience(uint256 playerId, uint32 sequenceNumber, uint32 baseExperience) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((baseExperience)), _fieldLayout);
  }

  /**
   * @notice Get environmentOwned.
   */
  function getEnvironmentOwned(uint256 playerId, uint32 sequenceNumber) internal view returns (bool environmentOwned) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get environmentOwned.
   */
  function _getEnvironmentOwned(uint256 playerId, uint32 sequenceNumber) internal view returns (bool environmentOwned) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set environmentOwned.
   */
  function setEnvironmentOwned(uint256 playerId, uint32 sequenceNumber, bool environmentOwned) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((environmentOwned)), _fieldLayout);
  }

  /**
   * @notice Set environmentOwned.
   */
  function _setEnvironmentOwned(uint256 playerId, uint32 sequenceNumber, bool environmentOwned) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((environmentOwned)), _fieldLayout);
  }

  /**
   * @notice Get updatedCoordinatesX.
   */
  function getUpdatedCoordinatesX(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 updatedCoordinatesX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get updatedCoordinatesX.
   */
  function _getUpdatedCoordinatesX(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 updatedCoordinatesX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set updatedCoordinatesX.
   */
  function setUpdatedCoordinatesX(uint256 playerId, uint32 sequenceNumber, uint32 updatedCoordinatesX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((updatedCoordinatesX)), _fieldLayout);
  }

  /**
   * @notice Set updatedCoordinatesX.
   */
  function _setUpdatedCoordinatesX(uint256 playerId, uint32 sequenceNumber, uint32 updatedCoordinatesX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((updatedCoordinatesX)), _fieldLayout);
  }

  /**
   * @notice Get updatedCoordinatesY.
   */
  function getUpdatedCoordinatesY(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 updatedCoordinatesY) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get updatedCoordinatesY.
   */
  function _getUpdatedCoordinatesY(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 updatedCoordinatesY) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set updatedCoordinatesY.
   */
  function setUpdatedCoordinatesY(uint256 playerId, uint32 sequenceNumber, uint32 updatedCoordinatesY) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((updatedCoordinatesY)), _fieldLayout);
  }

  /**
   * @notice Set updatedCoordinatesY.
   */
  function _setUpdatedCoordinatesY(uint256 playerId, uint32 sequenceNumber, uint32 updatedCoordinatesY) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((updatedCoordinatesY)), _fieldLayout);
  }

  /**
   * @notice Get coordinatesUpdatedAt.
   */
  function getCoordinatesUpdatedAt(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint64 coordinatesUpdatedAt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get coordinatesUpdatedAt.
   */
  function _getCoordinatesUpdatedAt(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint64 coordinatesUpdatedAt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set coordinatesUpdatedAt.
   */
  function setCoordinatesUpdatedAt(uint256 playerId, uint32 sequenceNumber, uint64 coordinatesUpdatedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((coordinatesUpdatedAt)), _fieldLayout);
  }

  /**
   * @notice Set coordinatesUpdatedAt.
   */
  function _setCoordinatesUpdatedAt(uint256 playerId, uint32 sequenceNumber, uint64 coordinatesUpdatedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((coordinatesUpdatedAt)), _fieldLayout);
  }

  /**
   * @notice Get targetCoordinatesX.
   */
  function getTargetCoordinatesX(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 targetCoordinatesX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get targetCoordinatesX.
   */
  function _getTargetCoordinatesX(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 targetCoordinatesX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set targetCoordinatesX.
   */
  function setTargetCoordinatesX(uint256 playerId, uint32 sequenceNumber, uint32 targetCoordinatesX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((targetCoordinatesX)), _fieldLayout);
  }

  /**
   * @notice Set targetCoordinatesX.
   */
  function _setTargetCoordinatesX(uint256 playerId, uint32 sequenceNumber, uint32 targetCoordinatesX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((targetCoordinatesX)), _fieldLayout);
  }

  /**
   * @notice Get targetCoordinatesY.
   */
  function getTargetCoordinatesY(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 targetCoordinatesY) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get targetCoordinatesY.
   */
  function _getTargetCoordinatesY(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 targetCoordinatesY) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set targetCoordinatesY.
   */
  function setTargetCoordinatesY(uint256 playerId, uint32 sequenceNumber, uint32 targetCoordinatesY) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((targetCoordinatesY)), _fieldLayout);
  }

  /**
   * @notice Set targetCoordinatesY.
   */
  function _setTargetCoordinatesY(uint256 playerId, uint32 sequenceNumber, uint32 targetCoordinatesY) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((targetCoordinatesY)), _fieldLayout);
  }

  /**
   * @notice Get originCoordinatesX.
   */
  function getOriginCoordinatesX(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 originCoordinatesX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get originCoordinatesX.
   */
  function _getOriginCoordinatesX(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 originCoordinatesX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set originCoordinatesX.
   */
  function setOriginCoordinatesX(uint256 playerId, uint32 sequenceNumber, uint32 originCoordinatesX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((originCoordinatesX)), _fieldLayout);
  }

  /**
   * @notice Set originCoordinatesX.
   */
  function _setOriginCoordinatesX(uint256 playerId, uint32 sequenceNumber, uint32 originCoordinatesX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((originCoordinatesX)), _fieldLayout);
  }

  /**
   * @notice Get originCoordinatesY.
   */
  function getOriginCoordinatesY(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 originCoordinatesY) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get originCoordinatesY.
   */
  function _getOriginCoordinatesY(
    uint256 playerId,
    uint32 sequenceNumber
  ) internal view returns (uint32 originCoordinatesY) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set originCoordinatesY.
   */
  function setOriginCoordinatesY(uint256 playerId, uint32 sequenceNumber, uint32 originCoordinatesY) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((originCoordinatesY)), _fieldLayout);
  }

  /**
   * @notice Set originCoordinatesY.
   */
  function _setOriginCoordinatesY(uint256 playerId, uint32 sequenceNumber, uint32 originCoordinatesY) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((originCoordinatesY)), _fieldLayout);
  }

  /**
   * @notice Get sailDuration.
   */
  function getSailDuration(uint256 playerId, uint32 sequenceNumber) internal view returns (uint64 sailDuration) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 11, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get sailDuration.
   */
  function _getSailDuration(uint256 playerId, uint32 sequenceNumber) internal view returns (uint64 sailDuration) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 11, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set sailDuration.
   */
  function setSailDuration(uint256 playerId, uint32 sequenceNumber, uint64 sailDuration) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 11, abi.encodePacked((sailDuration)), _fieldLayout);
  }

  /**
   * @notice Set sailDuration.
   */
  function _setSailDuration(uint256 playerId, uint32 sequenceNumber, uint64 sailDuration) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 11, abi.encodePacked((sailDuration)), _fieldLayout);
  }

  /**
   * @notice Get setSailAt.
   */
  function getSetSailAt(uint256 playerId, uint32 sequenceNumber) internal view returns (uint64 setSailAt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 12, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get setSailAt.
   */
  function _getSetSailAt(uint256 playerId, uint32 sequenceNumber) internal view returns (uint64 setSailAt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 12, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set setSailAt.
   */
  function setSetSailAt(uint256 playerId, uint32 sequenceNumber, uint64 setSailAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 12, abi.encodePacked((setSailAt)), _fieldLayout);
  }

  /**
   * @notice Set setSailAt.
   */
  function _setSetSailAt(uint256 playerId, uint32 sequenceNumber, uint64 setSailAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 12, abi.encodePacked((setSailAt)), _fieldLayout);
  }

  /**
   * @notice Get shipBattleId.
   */
  function getShipBattleId(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256 shipBattleId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 13, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get shipBattleId.
   */
  function _getShipBattleId(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256 shipBattleId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 13, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set shipBattleId.
   */
  function setShipBattleId(uint256 playerId, uint32 sequenceNumber, uint256 shipBattleId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 13, abi.encodePacked((shipBattleId)), _fieldLayout);
  }

  /**
   * @notice Set shipBattleId.
   */
  function _setShipBattleId(uint256 playerId, uint32 sequenceNumber, uint256 shipBattleId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setStaticField(_tableId, _keyTuple, 13, abi.encodePacked((shipBattleId)), _fieldLayout);
  }

  /**
   * @notice Get shipIds.
   */
  function getShipIds(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256[] memory shipIds) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get shipIds.
   */
  function _getShipIds(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256[] memory shipIds) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set shipIds.
   */
  function setShipIds(uint256 playerId, uint32 sequenceNumber, uint256[] memory shipIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((shipIds)));
  }

  /**
   * @notice Set shipIds.
   */
  function _setShipIds(uint256 playerId, uint32 sequenceNumber, uint256[] memory shipIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((shipIds)));
  }

  /**
   * @notice Get the length of shipIds.
   */
  function lengthShipIds(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of shipIds.
   */
  function _lengthShipIds(uint256 playerId, uint32 sequenceNumber) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of shipIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of shipIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to shipIds.
   */
  function pushShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to shipIds.
   */
  function _pushShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from shipIds.
   */
  function popShipIds(uint256 playerId, uint32 sequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Pop an element from shipIds.
   */
  function _popShipIds(uint256 playerId, uint32 sequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 32);
  }

  /**
   * @notice Update an element of shipIds at `_index`.
   */
  function updateShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of shipIds at `_index`.
   */
  function _updateShipIds(uint256 playerId, uint32 sequenceNumber, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 playerId, uint32 sequenceNumber) internal view returns (RosterData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 playerId, uint32 sequenceNumber) internal view returns (RosterData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 playerId,
    uint32 sequenceNumber,
    uint8 status,
    uint32 speed,
    uint32 baseExperience,
    bool environmentOwned,
    uint32 updatedCoordinatesX,
    uint32 updatedCoordinatesY,
    uint64 coordinatesUpdatedAt,
    uint32 targetCoordinatesX,
    uint32 targetCoordinatesY,
    uint32 originCoordinatesX,
    uint32 originCoordinatesY,
    uint64 sailDuration,
    uint64 setSailAt,
    uint256 shipBattleId,
    uint256[] memory shipIds
  ) internal {
    bytes memory _staticData = encodeStatic(
      status,
      speed,
      baseExperience,
      environmentOwned,
      updatedCoordinatesX,
      updatedCoordinatesY,
      coordinatesUpdatedAt,
      targetCoordinatesX,
      targetCoordinatesY,
      originCoordinatesX,
      originCoordinatesY,
      sailDuration,
      setSailAt,
      shipBattleId
    );

    EncodedLengths _encodedLengths = encodeLengths(shipIds);
    bytes memory _dynamicData = encodeDynamic(shipIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 playerId,
    uint32 sequenceNumber,
    uint8 status,
    uint32 speed,
    uint32 baseExperience,
    bool environmentOwned,
    uint32 updatedCoordinatesX,
    uint32 updatedCoordinatesY,
    uint64 coordinatesUpdatedAt,
    uint32 targetCoordinatesX,
    uint32 targetCoordinatesY,
    uint32 originCoordinatesX,
    uint32 originCoordinatesY,
    uint64 sailDuration,
    uint64 setSailAt,
    uint256 shipBattleId,
    uint256[] memory shipIds
  ) internal {
    bytes memory _staticData = encodeStatic(
      status,
      speed,
      baseExperience,
      environmentOwned,
      updatedCoordinatesX,
      updatedCoordinatesY,
      coordinatesUpdatedAt,
      targetCoordinatesX,
      targetCoordinatesY,
      originCoordinatesX,
      originCoordinatesY,
      sailDuration,
      setSailAt,
      shipBattleId
    );

    EncodedLengths _encodedLengths = encodeLengths(shipIds);
    bytes memory _dynamicData = encodeDynamic(shipIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 playerId, uint32 sequenceNumber, RosterData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.status,
      _table.speed,
      _table.baseExperience,
      _table.environmentOwned,
      _table.updatedCoordinatesX,
      _table.updatedCoordinatesY,
      _table.coordinatesUpdatedAt,
      _table.targetCoordinatesX,
      _table.targetCoordinatesY,
      _table.originCoordinatesX,
      _table.originCoordinatesY,
      _table.sailDuration,
      _table.setSailAt,
      _table.shipBattleId
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.shipIds);
    bytes memory _dynamicData = encodeDynamic(_table.shipIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 playerId, uint32 sequenceNumber, RosterData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.status,
      _table.speed,
      _table.baseExperience,
      _table.environmentOwned,
      _table.updatedCoordinatesX,
      _table.updatedCoordinatesY,
      _table.coordinatesUpdatedAt,
      _table.targetCoordinatesX,
      _table.targetCoordinatesY,
      _table.originCoordinatesX,
      _table.originCoordinatesY,
      _table.sailDuration,
      _table.setSailAt,
      _table.shipBattleId
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.shipIds);
    bytes memory _dynamicData = encodeDynamic(_table.shipIds);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint8 status,
      uint32 speed,
      uint32 baseExperience,
      bool environmentOwned,
      uint32 updatedCoordinatesX,
      uint32 updatedCoordinatesY,
      uint64 coordinatesUpdatedAt,
      uint32 targetCoordinatesX,
      uint32 targetCoordinatesY,
      uint32 originCoordinatesX,
      uint32 originCoordinatesY,
      uint64 sailDuration,
      uint64 setSailAt,
      uint256 shipBattleId
    )
  {
    status = (uint8(Bytes.getBytes1(_blob, 0)));

    speed = (uint32(Bytes.getBytes4(_blob, 1)));

    baseExperience = (uint32(Bytes.getBytes4(_blob, 5)));

    environmentOwned = (_toBool(uint8(Bytes.getBytes1(_blob, 9))));

    updatedCoordinatesX = (uint32(Bytes.getBytes4(_blob, 10)));

    updatedCoordinatesY = (uint32(Bytes.getBytes4(_blob, 14)));

    coordinatesUpdatedAt = (uint64(Bytes.getBytes8(_blob, 18)));

    targetCoordinatesX = (uint32(Bytes.getBytes4(_blob, 26)));

    targetCoordinatesY = (uint32(Bytes.getBytes4(_blob, 30)));

    originCoordinatesX = (uint32(Bytes.getBytes4(_blob, 34)));

    originCoordinatesY = (uint32(Bytes.getBytes4(_blob, 38)));

    sailDuration = (uint64(Bytes.getBytes8(_blob, 42)));

    setSailAt = (uint64(Bytes.getBytes8(_blob, 50)));

    shipBattleId = (uint256(Bytes.getBytes32(_blob, 58)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint256[] memory shipIds) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    shipIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (RosterData memory _table) {
    (
      _table.status,
      _table.speed,
      _table.baseExperience,
      _table.environmentOwned,
      _table.updatedCoordinatesX,
      _table.updatedCoordinatesY,
      _table.coordinatesUpdatedAt,
      _table.targetCoordinatesX,
      _table.targetCoordinatesY,
      _table.originCoordinatesX,
      _table.originCoordinatesY,
      _table.sailDuration,
      _table.setSailAt,
      _table.shipBattleId
    ) = decodeStatic(_staticData);

    (_table.shipIds) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 playerId, uint32 sequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 playerId, uint32 sequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint8 status,
    uint32 speed,
    uint32 baseExperience,
    bool environmentOwned,
    uint32 updatedCoordinatesX,
    uint32 updatedCoordinatesY,
    uint64 coordinatesUpdatedAt,
    uint32 targetCoordinatesX,
    uint32 targetCoordinatesY,
    uint32 originCoordinatesX,
    uint32 originCoordinatesY,
    uint64 sailDuration,
    uint64 setSailAt,
    uint256 shipBattleId
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        status,
        speed,
        baseExperience,
        environmentOwned,
        updatedCoordinatesX,
        updatedCoordinatesY,
        coordinatesUpdatedAt,
        targetCoordinatesX,
        targetCoordinatesY,
        originCoordinatesX,
        originCoordinatesY,
        sailDuration,
        setSailAt,
        shipBattleId
      );
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(uint256[] memory shipIds) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(shipIds.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint256[] memory shipIds) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((shipIds)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 status,
    uint32 speed,
    uint32 baseExperience,
    bool environmentOwned,
    uint32 updatedCoordinatesX,
    uint32 updatedCoordinatesY,
    uint64 coordinatesUpdatedAt,
    uint32 targetCoordinatesX,
    uint32 targetCoordinatesY,
    uint32 originCoordinatesX,
    uint32 originCoordinatesY,
    uint64 sailDuration,
    uint64 setSailAt,
    uint256 shipBattleId,
    uint256[] memory shipIds
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      status,
      speed,
      baseExperience,
      environmentOwned,
      updatedCoordinatesX,
      updatedCoordinatesY,
      coordinatesUpdatedAt,
      targetCoordinatesX,
      targetCoordinatesY,
      originCoordinatesX,
      originCoordinatesY,
      sailDuration,
      setSailAt,
      shipBattleId
    );

    EncodedLengths _encodedLengths = encodeLengths(shipIds);
    bytes memory _dynamicData = encodeDynamic(shipIds);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 playerId, uint32 sequenceNumber) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
