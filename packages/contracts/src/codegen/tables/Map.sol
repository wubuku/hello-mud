// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct MapData {
  bool existing;
  bool islandClaimWhitelistEnabled;
  uint32 islandResourceRenewalQuantity;
  uint64 islandResourceRenewalTime;
  uint32[] islandRenewableItemIds;
}

library Map {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Map", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000004d617000000000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x000e040101010408000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool, bool, uint32, uint64, uint32[])
  Schema constant _valueSchema = Schema.wrap(0x000e040160600307650000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "existing";
    fieldNames[1] = "islandClaimWhitelistEnabled";
    fieldNames[2] = "islandResourceRenewalQuantity";
    fieldNames[3] = "islandResourceRenewalTime";
    fieldNames[4] = "islandRenewableItemIds";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get existing.
   */
  function getExisting() internal view returns (bool existing) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get existing.
   */
  function _getExisting() internal view returns (bool existing) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set existing.
   */
  function setExisting(bool existing) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((existing)), _fieldLayout);
  }

  /**
   * @notice Set existing.
   */
  function _setExisting(bool existing) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((existing)), _fieldLayout);
  }

  /**
   * @notice Get islandClaimWhitelistEnabled.
   */
  function getIslandClaimWhitelistEnabled() internal view returns (bool islandClaimWhitelistEnabled) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get islandClaimWhitelistEnabled.
   */
  function _getIslandClaimWhitelistEnabled() internal view returns (bool islandClaimWhitelistEnabled) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set islandClaimWhitelistEnabled.
   */
  function setIslandClaimWhitelistEnabled(bool islandClaimWhitelistEnabled) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((islandClaimWhitelistEnabled)), _fieldLayout);
  }

  /**
   * @notice Set islandClaimWhitelistEnabled.
   */
  function _setIslandClaimWhitelistEnabled(bool islandClaimWhitelistEnabled) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((islandClaimWhitelistEnabled)), _fieldLayout);
  }

  /**
   * @notice Get islandResourceRenewalQuantity.
   */
  function getIslandResourceRenewalQuantity() internal view returns (uint32 islandResourceRenewalQuantity) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get islandResourceRenewalQuantity.
   */
  function _getIslandResourceRenewalQuantity() internal view returns (uint32 islandResourceRenewalQuantity) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set islandResourceRenewalQuantity.
   */
  function setIslandResourceRenewalQuantity(uint32 islandResourceRenewalQuantity) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((islandResourceRenewalQuantity)), _fieldLayout);
  }

  /**
   * @notice Set islandResourceRenewalQuantity.
   */
  function _setIslandResourceRenewalQuantity(uint32 islandResourceRenewalQuantity) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((islandResourceRenewalQuantity)), _fieldLayout);
  }

  /**
   * @notice Get islandResourceRenewalTime.
   */
  function getIslandResourceRenewalTime() internal view returns (uint64 islandResourceRenewalTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get islandResourceRenewalTime.
   */
  function _getIslandResourceRenewalTime() internal view returns (uint64 islandResourceRenewalTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set islandResourceRenewalTime.
   */
  function setIslandResourceRenewalTime(uint64 islandResourceRenewalTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((islandResourceRenewalTime)), _fieldLayout);
  }

  /**
   * @notice Set islandResourceRenewalTime.
   */
  function _setIslandResourceRenewalTime(uint64 islandResourceRenewalTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((islandResourceRenewalTime)), _fieldLayout);
  }

  /**
   * @notice Get islandRenewableItemIds.
   */
  function getIslandRenewableItemIds() internal view returns (uint32[] memory islandRenewableItemIds) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get islandRenewableItemIds.
   */
  function _getIslandRenewableItemIds() internal view returns (uint32[] memory islandRenewableItemIds) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Set islandRenewableItemIds.
   */
  function setIslandRenewableItemIds(uint32[] memory islandRenewableItemIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((islandRenewableItemIds)));
  }

  /**
   * @notice Set islandRenewableItemIds.
   */
  function _setIslandRenewableItemIds(uint32[] memory islandRenewableItemIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((islandRenewableItemIds)));
  }

  /**
   * @notice Get the length of islandRenewableItemIds.
   */
  function lengthIslandRenewableItemIds() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of islandRenewableItemIds.
   */
  function _lengthIslandRenewableItemIds() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get an item of islandRenewableItemIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemIslandRenewableItemIds(uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of islandRenewableItemIds.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemIslandRenewableItemIds(uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Push an element to islandRenewableItemIds.
   */
  function pushIslandRenewableItemIds(uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to islandRenewableItemIds.
   */
  function _pushIslandRenewableItemIds(uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from islandRenewableItemIds.
   */
  function popIslandRenewableItemIds() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Pop an element from islandRenewableItemIds.
   */
  function _popIslandRenewableItemIds() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Update an element of islandRenewableItemIds at `_index`.
   */
  function updateIslandRenewableItemIds(uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of islandRenewableItemIds at `_index`.
   */
  function _updateIslandRenewableItemIds(uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (MapData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (MapData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bool existing,
    bool islandClaimWhitelistEnabled,
    uint32 islandResourceRenewalQuantity,
    uint64 islandResourceRenewalTime,
    uint32[] memory islandRenewableItemIds
  ) internal {
    bytes memory _staticData = encodeStatic(
      existing,
      islandClaimWhitelistEnabled,
      islandResourceRenewalQuantity,
      islandResourceRenewalTime
    );

    EncodedLengths _encodedLengths = encodeLengths(islandRenewableItemIds);
    bytes memory _dynamicData = encodeDynamic(islandRenewableItemIds);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bool existing,
    bool islandClaimWhitelistEnabled,
    uint32 islandResourceRenewalQuantity,
    uint64 islandResourceRenewalTime,
    uint32[] memory islandRenewableItemIds
  ) internal {
    bytes memory _staticData = encodeStatic(
      existing,
      islandClaimWhitelistEnabled,
      islandResourceRenewalQuantity,
      islandResourceRenewalTime
    );

    EncodedLengths _encodedLengths = encodeLengths(islandRenewableItemIds);
    bytes memory _dynamicData = encodeDynamic(islandRenewableItemIds);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(MapData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.existing,
      _table.islandClaimWhitelistEnabled,
      _table.islandResourceRenewalQuantity,
      _table.islandResourceRenewalTime
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.islandRenewableItemIds);
    bytes memory _dynamicData = encodeDynamic(_table.islandRenewableItemIds);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(MapData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.existing,
      _table.islandClaimWhitelistEnabled,
      _table.islandResourceRenewalQuantity,
      _table.islandResourceRenewalTime
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.islandRenewableItemIds);
    bytes memory _dynamicData = encodeDynamic(_table.islandRenewableItemIds);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      bool existing,
      bool islandClaimWhitelistEnabled,
      uint32 islandResourceRenewalQuantity,
      uint64 islandResourceRenewalTime
    )
  {
    existing = (_toBool(uint8(Bytes.getBytes1(_blob, 0))));

    islandClaimWhitelistEnabled = (_toBool(uint8(Bytes.getBytes1(_blob, 1))));

    islandResourceRenewalQuantity = (uint32(Bytes.getBytes4(_blob, 2)));

    islandResourceRenewalTime = (uint64(Bytes.getBytes8(_blob, 6)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint32[] memory islandRenewableItemIds) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    islandRenewableItemIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (MapData memory _table) {
    (
      _table.existing,
      _table.islandClaimWhitelistEnabled,
      _table.islandResourceRenewalQuantity,
      _table.islandResourceRenewalTime
    ) = decodeStatic(_staticData);

    (_table.islandRenewableItemIds) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool existing,
    bool islandClaimWhitelistEnabled,
    uint32 islandResourceRenewalQuantity,
    uint64 islandResourceRenewalTime
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(existing, islandClaimWhitelistEnabled, islandResourceRenewalQuantity, islandResourceRenewalTime);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint32[] memory islandRenewableItemIds
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(islandRenewableItemIds.length * 4);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint32[] memory islandRenewableItemIds) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((islandRenewableItemIds)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool existing,
    bool islandClaimWhitelistEnabled,
    uint32 islandResourceRenewalQuantity,
    uint64 islandResourceRenewalTime,
    uint32[] memory islandRenewableItemIds
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      existing,
      islandClaimWhitelistEnabled,
      islandResourceRenewalQuantity,
      islandResourceRenewalTime
    );

    EncodedLengths _encodedLengths = encodeLengths(islandRenewableItemIds);
    bytes memory _dynamicData = encodeDynamic(islandRenewableItemIds);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
