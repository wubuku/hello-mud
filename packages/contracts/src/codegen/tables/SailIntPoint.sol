// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct SailIntPointData {
  uint32 coordinatesX;
  uint32 coordinatesY;
  uint64 segmentShouldStartAt;
}

library SailIntPoint {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "SailIntPoint", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000005361696c496e74506f696e7400000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0010030004040800000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256, uint32, uint64)
  Schema constant _keySchema = Schema.wrap(0x002c03001f030700000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint32, uint32, uint64)
  Schema constant _valueSchema = Schema.wrap(0x0010030003030700000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "playerId";
    keyNames[1] = "sequenceNumber";
    keyNames[2] = "index";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "coordinatesX";
    fieldNames[1] = "coordinatesY";
    fieldNames[2] = "segmentShouldStartAt";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get coordinatesX.
   */
  function getCoordinatesX(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index
  ) internal view returns (uint32 coordinatesX) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get coordinatesX.
   */
  function _getCoordinatesX(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index
  ) internal view returns (uint32 coordinatesX) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set coordinatesX.
   */
  function setCoordinatesX(uint256 playerId, uint32 sequenceNumber, uint64 index, uint32 coordinatesX) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((coordinatesX)), _fieldLayout);
  }

  /**
   * @notice Set coordinatesX.
   */
  function _setCoordinatesX(uint256 playerId, uint32 sequenceNumber, uint64 index, uint32 coordinatesX) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((coordinatesX)), _fieldLayout);
  }

  /**
   * @notice Get coordinatesY.
   */
  function getCoordinatesY(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index
  ) internal view returns (uint32 coordinatesY) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get coordinatesY.
   */
  function _getCoordinatesY(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index
  ) internal view returns (uint32 coordinatesY) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set coordinatesY.
   */
  function setCoordinatesY(uint256 playerId, uint32 sequenceNumber, uint64 index, uint32 coordinatesY) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((coordinatesY)), _fieldLayout);
  }

  /**
   * @notice Set coordinatesY.
   */
  function _setCoordinatesY(uint256 playerId, uint32 sequenceNumber, uint64 index, uint32 coordinatesY) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((coordinatesY)), _fieldLayout);
  }

  /**
   * @notice Get segmentShouldStartAt.
   */
  function getSegmentShouldStartAt(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index
  ) internal view returns (uint64 segmentShouldStartAt) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get segmentShouldStartAt.
   */
  function _getSegmentShouldStartAt(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index
  ) internal view returns (uint64 segmentShouldStartAt) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set segmentShouldStartAt.
   */
  function setSegmentShouldStartAt(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index,
    uint64 segmentShouldStartAt
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((segmentShouldStartAt)), _fieldLayout);
  }

  /**
   * @notice Set segmentShouldStartAt.
   */
  function _setSegmentShouldStartAt(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index,
    uint64 segmentShouldStartAt
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((segmentShouldStartAt)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index
  ) internal view returns (SailIntPointData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index
  ) internal view returns (SailIntPointData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index,
    uint32 coordinatesX,
    uint32 coordinatesY,
    uint64 segmentShouldStartAt
  ) internal {
    bytes memory _staticData = encodeStatic(coordinatesX, coordinatesY, segmentShouldStartAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index,
    uint32 coordinatesX,
    uint32 coordinatesY,
    uint64 segmentShouldStartAt
  ) internal {
    bytes memory _staticData = encodeStatic(coordinatesX, coordinatesY, segmentShouldStartAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 playerId, uint32 sequenceNumber, uint64 index, SailIntPointData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.coordinatesX, _table.coordinatesY, _table.segmentShouldStartAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 playerId, uint32 sequenceNumber, uint64 index, SailIntPointData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.coordinatesX, _table.coordinatesY, _table.segmentShouldStartAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint32 coordinatesX, uint32 coordinatesY, uint64 segmentShouldStartAt) {
    coordinatesX = (uint32(Bytes.getBytes4(_blob, 0)));

    coordinatesY = (uint32(Bytes.getBytes4(_blob, 4)));

    segmentShouldStartAt = (uint64(Bytes.getBytes8(_blob, 8)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (SailIntPointData memory _table) {
    (_table.coordinatesX, _table.coordinatesY, _table.segmentShouldStartAt) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 playerId, uint32 sequenceNumber, uint64 index) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 playerId, uint32 sequenceNumber, uint64 index) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 coordinatesX,
    uint32 coordinatesY,
    uint64 segmentShouldStartAt
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(coordinatesX, coordinatesY, segmentShouldStartAt);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 coordinatesX,
    uint32 coordinatesY,
    uint64 segmentShouldStartAt
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(coordinatesX, coordinatesY, segmentShouldStartAt);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(
    uint256 playerId,
    uint32 sequenceNumber,
    uint64 index
  ) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(playerId));
    _keyTuple[1] = bytes32(uint256(sequenceNumber));
    _keyTuple[2] = bytes32(uint256(index));

    return _keyTuple;
  }
}
