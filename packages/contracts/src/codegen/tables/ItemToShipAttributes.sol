// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ItemToShipAttributesData {
  uint32 denominator;
  uint32 attackNumerator;
  uint32 protectionNumerator;
  uint32 speedNumerator;
  uint32 healthNumerator;
}

library ItemToShipAttributes {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "ItemToShipAttrib", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000004974656d546f53686970417474726962);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0014050004040404040000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint32)
  Schema constant _keySchema = Schema.wrap(0x0004010003000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint32, uint32, uint32, uint32, uint32)
  Schema constant _valueSchema = Schema.wrap(0x0014050003030303030000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "itemId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "denominator";
    fieldNames[1] = "attackNumerator";
    fieldNames[2] = "protectionNumerator";
    fieldNames[3] = "speedNumerator";
    fieldNames[4] = "healthNumerator";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get denominator.
   */
  function getDenominator(uint32 itemId) internal view returns (uint32 denominator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get denominator.
   */
  function _getDenominator(uint32 itemId) internal view returns (uint32 denominator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set denominator.
   */
  function setDenominator(uint32 itemId, uint32 denominator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((denominator)), _fieldLayout);
  }

  /**
   * @notice Set denominator.
   */
  function _setDenominator(uint32 itemId, uint32 denominator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((denominator)), _fieldLayout);
  }

  /**
   * @notice Get attackNumerator.
   */
  function getAttackNumerator(uint32 itemId) internal view returns (uint32 attackNumerator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get attackNumerator.
   */
  function _getAttackNumerator(uint32 itemId) internal view returns (uint32 attackNumerator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set attackNumerator.
   */
  function setAttackNumerator(uint32 itemId, uint32 attackNumerator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((attackNumerator)), _fieldLayout);
  }

  /**
   * @notice Set attackNumerator.
   */
  function _setAttackNumerator(uint32 itemId, uint32 attackNumerator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((attackNumerator)), _fieldLayout);
  }

  /**
   * @notice Get protectionNumerator.
   */
  function getProtectionNumerator(uint32 itemId) internal view returns (uint32 protectionNumerator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get protectionNumerator.
   */
  function _getProtectionNumerator(uint32 itemId) internal view returns (uint32 protectionNumerator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set protectionNumerator.
   */
  function setProtectionNumerator(uint32 itemId, uint32 protectionNumerator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((protectionNumerator)), _fieldLayout);
  }

  /**
   * @notice Set protectionNumerator.
   */
  function _setProtectionNumerator(uint32 itemId, uint32 protectionNumerator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((protectionNumerator)), _fieldLayout);
  }

  /**
   * @notice Get speedNumerator.
   */
  function getSpeedNumerator(uint32 itemId) internal view returns (uint32 speedNumerator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get speedNumerator.
   */
  function _getSpeedNumerator(uint32 itemId) internal view returns (uint32 speedNumerator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set speedNumerator.
   */
  function setSpeedNumerator(uint32 itemId, uint32 speedNumerator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((speedNumerator)), _fieldLayout);
  }

  /**
   * @notice Set speedNumerator.
   */
  function _setSpeedNumerator(uint32 itemId, uint32 speedNumerator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((speedNumerator)), _fieldLayout);
  }

  /**
   * @notice Get healthNumerator.
   */
  function getHealthNumerator(uint32 itemId) internal view returns (uint32 healthNumerator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get healthNumerator.
   */
  function _getHealthNumerator(uint32 itemId) internal view returns (uint32 healthNumerator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set healthNumerator.
   */
  function setHealthNumerator(uint32 itemId, uint32 healthNumerator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((healthNumerator)), _fieldLayout);
  }

  /**
   * @notice Set healthNumerator.
   */
  function _setHealthNumerator(uint32 itemId, uint32 healthNumerator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((healthNumerator)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint32 itemId) internal view returns (ItemToShipAttributesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint32 itemId) internal view returns (ItemToShipAttributesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint32 itemId,
    uint32 denominator,
    uint32 attackNumerator,
    uint32 protectionNumerator,
    uint32 speedNumerator,
    uint32 healthNumerator
  ) internal {
    bytes memory _staticData = encodeStatic(
      denominator,
      attackNumerator,
      protectionNumerator,
      speedNumerator,
      healthNumerator
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint32 itemId,
    uint32 denominator,
    uint32 attackNumerator,
    uint32 protectionNumerator,
    uint32 speedNumerator,
    uint32 healthNumerator
  ) internal {
    bytes memory _staticData = encodeStatic(
      denominator,
      attackNumerator,
      protectionNumerator,
      speedNumerator,
      healthNumerator
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint32 itemId, ItemToShipAttributesData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.denominator,
      _table.attackNumerator,
      _table.protectionNumerator,
      _table.speedNumerator,
      _table.healthNumerator
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint32 itemId, ItemToShipAttributesData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.denominator,
      _table.attackNumerator,
      _table.protectionNumerator,
      _table.speedNumerator,
      _table.healthNumerator
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint32 denominator,
      uint32 attackNumerator,
      uint32 protectionNumerator,
      uint32 speedNumerator,
      uint32 healthNumerator
    )
  {
    denominator = (uint32(Bytes.getBytes4(_blob, 0)));

    attackNumerator = (uint32(Bytes.getBytes4(_blob, 4)));

    protectionNumerator = (uint32(Bytes.getBytes4(_blob, 8)));

    speedNumerator = (uint32(Bytes.getBytes4(_blob, 12)));

    healthNumerator = (uint32(Bytes.getBytes4(_blob, 16)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ItemToShipAttributesData memory _table) {
    (
      _table.denominator,
      _table.attackNumerator,
      _table.protectionNumerator,
      _table.speedNumerator,
      _table.healthNumerator
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint32 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint32 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 denominator,
    uint32 attackNumerator,
    uint32 protectionNumerator,
    uint32 speedNumerator,
    uint32 healthNumerator
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(denominator, attackNumerator, protectionNumerator, speedNumerator, healthNumerator);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 denominator,
    uint32 attackNumerator,
    uint32 protectionNumerator,
    uint32 speedNumerator,
    uint32 healthNumerator
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      denominator,
      attackNumerator,
      protectionNumerator,
      speedNumerator,
      healthNumerator
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint32 itemId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    return _keyTuple;
  }
}
