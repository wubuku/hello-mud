// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ShipBattleData {
  uint256 initiatorRosterPlayerId;
  uint32 initiatorRosterSequenceNumber;
  uint256 responderRosterPlayerId;
  uint32 responderRosterSequenceNumber;
  uint8 status;
  uint64 endedAt;
  uint8 winner;
  uint32 roundNumber;
  uint64 roundStartedAt;
  uint8 roundMover;
  uint256 roundAttackerShip;
  uint256 roundDefenderShip;
  uint32[] initiatorExperiences;
  uint32[] responderExperiences;
}

library ShipBattle {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "ShipBattle", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462617070000000000000000000000053686970426174746c65000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x009f0c0220042004010801040801202000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint32, uint256, uint32, uint8, uint64, uint8, uint32, uint64, uint8, uint256, uint256, uint32[], uint32[])
  Schema constant _valueSchema = Schema.wrap(0x009f0c021f031f030007000307001f1f65650000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](14);
    fieldNames[0] = "initiatorRosterPlayerId";
    fieldNames[1] = "initiatorRosterSequenceNumber";
    fieldNames[2] = "responderRosterPlayerId";
    fieldNames[3] = "responderRosterSequenceNumber";
    fieldNames[4] = "status";
    fieldNames[5] = "endedAt";
    fieldNames[6] = "winner";
    fieldNames[7] = "roundNumber";
    fieldNames[8] = "roundStartedAt";
    fieldNames[9] = "roundMover";
    fieldNames[10] = "roundAttackerShip";
    fieldNames[11] = "roundDefenderShip";
    fieldNames[12] = "initiatorExperiences";
    fieldNames[13] = "responderExperiences";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get initiatorRosterPlayerId.
   */
  function getInitiatorRosterPlayerId(uint256 id) internal view returns (uint256 initiatorRosterPlayerId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get initiatorRosterPlayerId.
   */
  function _getInitiatorRosterPlayerId(uint256 id) internal view returns (uint256 initiatorRosterPlayerId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set initiatorRosterPlayerId.
   */
  function setInitiatorRosterPlayerId(uint256 id, uint256 initiatorRosterPlayerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((initiatorRosterPlayerId)), _fieldLayout);
  }

  /**
   * @notice Set initiatorRosterPlayerId.
   */
  function _setInitiatorRosterPlayerId(uint256 id, uint256 initiatorRosterPlayerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((initiatorRosterPlayerId)), _fieldLayout);
  }

  /**
   * @notice Get initiatorRosterSequenceNumber.
   */
  function getInitiatorRosterSequenceNumber(uint256 id) internal view returns (uint32 initiatorRosterSequenceNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get initiatorRosterSequenceNumber.
   */
  function _getInitiatorRosterSequenceNumber(uint256 id) internal view returns (uint32 initiatorRosterSequenceNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set initiatorRosterSequenceNumber.
   */
  function setInitiatorRosterSequenceNumber(uint256 id, uint32 initiatorRosterSequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((initiatorRosterSequenceNumber)), _fieldLayout);
  }

  /**
   * @notice Set initiatorRosterSequenceNumber.
   */
  function _setInitiatorRosterSequenceNumber(uint256 id, uint32 initiatorRosterSequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((initiatorRosterSequenceNumber)), _fieldLayout);
  }

  /**
   * @notice Get responderRosterPlayerId.
   */
  function getResponderRosterPlayerId(uint256 id) internal view returns (uint256 responderRosterPlayerId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get responderRosterPlayerId.
   */
  function _getResponderRosterPlayerId(uint256 id) internal view returns (uint256 responderRosterPlayerId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set responderRosterPlayerId.
   */
  function setResponderRosterPlayerId(uint256 id, uint256 responderRosterPlayerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((responderRosterPlayerId)), _fieldLayout);
  }

  /**
   * @notice Set responderRosterPlayerId.
   */
  function _setResponderRosterPlayerId(uint256 id, uint256 responderRosterPlayerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((responderRosterPlayerId)), _fieldLayout);
  }

  /**
   * @notice Get responderRosterSequenceNumber.
   */
  function getResponderRosterSequenceNumber(uint256 id) internal view returns (uint32 responderRosterSequenceNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get responderRosterSequenceNumber.
   */
  function _getResponderRosterSequenceNumber(uint256 id) internal view returns (uint32 responderRosterSequenceNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set responderRosterSequenceNumber.
   */
  function setResponderRosterSequenceNumber(uint256 id, uint32 responderRosterSequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((responderRosterSequenceNumber)), _fieldLayout);
  }

  /**
   * @notice Set responderRosterSequenceNumber.
   */
  function _setResponderRosterSequenceNumber(uint256 id, uint32 responderRosterSequenceNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((responderRosterSequenceNumber)), _fieldLayout);
  }

  /**
   * @notice Get status.
   */
  function getStatus(uint256 id) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get status.
   */
  function _getStatus(uint256 id) internal view returns (uint8 status) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set status.
   */
  function setStatus(uint256 id, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((status)), _fieldLayout);
  }

  /**
   * @notice Set status.
   */
  function _setStatus(uint256 id, uint8 status) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((status)), _fieldLayout);
  }

  /**
   * @notice Get endedAt.
   */
  function getEndedAt(uint256 id) internal view returns (uint64 endedAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get endedAt.
   */
  function _getEndedAt(uint256 id) internal view returns (uint64 endedAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set endedAt.
   */
  function setEndedAt(uint256 id, uint64 endedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((endedAt)), _fieldLayout);
  }

  /**
   * @notice Set endedAt.
   */
  function _setEndedAt(uint256 id, uint64 endedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((endedAt)), _fieldLayout);
  }

  /**
   * @notice Get winner.
   */
  function getWinner(uint256 id) internal view returns (uint8 winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get winner.
   */
  function _getWinner(uint256 id) internal view returns (uint8 winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set winner.
   */
  function setWinner(uint256 id, uint8 winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Set winner.
   */
  function _setWinner(uint256 id, uint8 winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Get roundNumber.
   */
  function getRoundNumber(uint256 id) internal view returns (uint32 roundNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get roundNumber.
   */
  function _getRoundNumber(uint256 id) internal view returns (uint32 roundNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set roundNumber.
   */
  function setRoundNumber(uint256 id, uint32 roundNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((roundNumber)), _fieldLayout);
  }

  /**
   * @notice Set roundNumber.
   */
  function _setRoundNumber(uint256 id, uint32 roundNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((roundNumber)), _fieldLayout);
  }

  /**
   * @notice Get roundStartedAt.
   */
  function getRoundStartedAt(uint256 id) internal view returns (uint64 roundStartedAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get roundStartedAt.
   */
  function _getRoundStartedAt(uint256 id) internal view returns (uint64 roundStartedAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set roundStartedAt.
   */
  function setRoundStartedAt(uint256 id, uint64 roundStartedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((roundStartedAt)), _fieldLayout);
  }

  /**
   * @notice Set roundStartedAt.
   */
  function _setRoundStartedAt(uint256 id, uint64 roundStartedAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((roundStartedAt)), _fieldLayout);
  }

  /**
   * @notice Get roundMover.
   */
  function getRoundMover(uint256 id) internal view returns (uint8 roundMover) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get roundMover.
   */
  function _getRoundMover(uint256 id) internal view returns (uint8 roundMover) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set roundMover.
   */
  function setRoundMover(uint256 id, uint8 roundMover) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((roundMover)), _fieldLayout);
  }

  /**
   * @notice Set roundMover.
   */
  function _setRoundMover(uint256 id, uint8 roundMover) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((roundMover)), _fieldLayout);
  }

  /**
   * @notice Get roundAttackerShip.
   */
  function getRoundAttackerShip(uint256 id) internal view returns (uint256 roundAttackerShip) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get roundAttackerShip.
   */
  function _getRoundAttackerShip(uint256 id) internal view returns (uint256 roundAttackerShip) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set roundAttackerShip.
   */
  function setRoundAttackerShip(uint256 id, uint256 roundAttackerShip) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((roundAttackerShip)), _fieldLayout);
  }

  /**
   * @notice Set roundAttackerShip.
   */
  function _setRoundAttackerShip(uint256 id, uint256 roundAttackerShip) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((roundAttackerShip)), _fieldLayout);
  }

  /**
   * @notice Get roundDefenderShip.
   */
  function getRoundDefenderShip(uint256 id) internal view returns (uint256 roundDefenderShip) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 11, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get roundDefenderShip.
   */
  function _getRoundDefenderShip(uint256 id) internal view returns (uint256 roundDefenderShip) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 11, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set roundDefenderShip.
   */
  function setRoundDefenderShip(uint256 id, uint256 roundDefenderShip) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 11, abi.encodePacked((roundDefenderShip)), _fieldLayout);
  }

  /**
   * @notice Set roundDefenderShip.
   */
  function _setRoundDefenderShip(uint256 id, uint256 roundDefenderShip) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 11, abi.encodePacked((roundDefenderShip)), _fieldLayout);
  }

  /**
   * @notice Get initiatorExperiences.
   */
  function getInitiatorExperiences(uint256 id) internal view returns (uint32[] memory initiatorExperiences) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get initiatorExperiences.
   */
  function _getInitiatorExperiences(uint256 id) internal view returns (uint32[] memory initiatorExperiences) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Set initiatorExperiences.
   */
  function setInitiatorExperiences(uint256 id, uint32[] memory initiatorExperiences) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((initiatorExperiences)));
  }

  /**
   * @notice Set initiatorExperiences.
   */
  function _setInitiatorExperiences(uint256 id, uint32[] memory initiatorExperiences) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((initiatorExperiences)));
  }

  /**
   * @notice Get the length of initiatorExperiences.
   */
  function lengthInitiatorExperiences(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of initiatorExperiences.
   */
  function _lengthInitiatorExperiences(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get an item of initiatorExperiences.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemInitiatorExperiences(uint256 id, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of initiatorExperiences.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemInitiatorExperiences(uint256 id, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Push an element to initiatorExperiences.
   */
  function pushInitiatorExperiences(uint256 id, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to initiatorExperiences.
   */
  function _pushInitiatorExperiences(uint256 id, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from initiatorExperiences.
   */
  function popInitiatorExperiences(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Pop an element from initiatorExperiences.
   */
  function _popInitiatorExperiences(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 4);
  }

  /**
   * @notice Update an element of initiatorExperiences at `_index`.
   */
  function updateInitiatorExperiences(uint256 id, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of initiatorExperiences at `_index`.
   */
  function _updateInitiatorExperiences(uint256 id, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get responderExperiences.
   */
  function getResponderExperiences(uint256 id) internal view returns (uint32[] memory responderExperiences) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Get responderExperiences.
   */
  function _getResponderExperiences(uint256 id) internal view returns (uint32[] memory responderExperiences) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /**
   * @notice Set responderExperiences.
   */
  function setResponderExperiences(uint256 id, uint32[] memory responderExperiences) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((responderExperiences)));
  }

  /**
   * @notice Set responderExperiences.
   */
  function _setResponderExperiences(uint256 id, uint32[] memory responderExperiences) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((responderExperiences)));
  }

  /**
   * @notice Get the length of responderExperiences.
   */
  function lengthResponderExperiences(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get the length of responderExperiences.
   */
  function _lengthResponderExperiences(uint256 id) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 4;
    }
  }

  /**
   * @notice Get an item of responderExperiences.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemResponderExperiences(uint256 id, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Get an item of responderExperiences.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemResponderExperiences(uint256 id, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 4, (_index + 1) * 4);
      return (uint32(bytes4(_blob)));
    }
  }

  /**
   * @notice Push an element to responderExperiences.
   */
  function pushResponderExperiences(uint256 id, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to responderExperiences.
   */
  function _pushResponderExperiences(uint256 id, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from responderExperiences.
   */
  function popResponderExperiences(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 4);
  }

  /**
   * @notice Pop an element from responderExperiences.
   */
  function _popResponderExperiences(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 4);
  }

  /**
   * @notice Update an element of responderExperiences at `_index`.
   */
  function updateResponderExperiences(uint256 id, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of responderExperiences at `_index`.
   */
  function _updateResponderExperiences(uint256 id, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 4), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 id) internal view returns (ShipBattleData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 id) internal view returns (ShipBattleData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 id,
    uint256 initiatorRosterPlayerId,
    uint32 initiatorRosterSequenceNumber,
    uint256 responderRosterPlayerId,
    uint32 responderRosterSequenceNumber,
    uint8 status,
    uint64 endedAt,
    uint8 winner,
    uint32 roundNumber,
    uint64 roundStartedAt,
    uint8 roundMover,
    uint256 roundAttackerShip,
    uint256 roundDefenderShip,
    uint32[] memory initiatorExperiences,
    uint32[] memory responderExperiences
  ) internal {
    bytes memory _staticData = encodeStatic(
      initiatorRosterPlayerId,
      initiatorRosterSequenceNumber,
      responderRosterPlayerId,
      responderRosterSequenceNumber,
      status,
      endedAt,
      winner,
      roundNumber,
      roundStartedAt,
      roundMover,
      roundAttackerShip,
      roundDefenderShip
    );

    EncodedLengths _encodedLengths = encodeLengths(initiatorExperiences, responderExperiences);
    bytes memory _dynamicData = encodeDynamic(initiatorExperiences, responderExperiences);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 id,
    uint256 initiatorRosterPlayerId,
    uint32 initiatorRosterSequenceNumber,
    uint256 responderRosterPlayerId,
    uint32 responderRosterSequenceNumber,
    uint8 status,
    uint64 endedAt,
    uint8 winner,
    uint32 roundNumber,
    uint64 roundStartedAt,
    uint8 roundMover,
    uint256 roundAttackerShip,
    uint256 roundDefenderShip,
    uint32[] memory initiatorExperiences,
    uint32[] memory responderExperiences
  ) internal {
    bytes memory _staticData = encodeStatic(
      initiatorRosterPlayerId,
      initiatorRosterSequenceNumber,
      responderRosterPlayerId,
      responderRosterSequenceNumber,
      status,
      endedAt,
      winner,
      roundNumber,
      roundStartedAt,
      roundMover,
      roundAttackerShip,
      roundDefenderShip
    );

    EncodedLengths _encodedLengths = encodeLengths(initiatorExperiences, responderExperiences);
    bytes memory _dynamicData = encodeDynamic(initiatorExperiences, responderExperiences);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 id, ShipBattleData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.initiatorRosterPlayerId,
      _table.initiatorRosterSequenceNumber,
      _table.responderRosterPlayerId,
      _table.responderRosterSequenceNumber,
      _table.status,
      _table.endedAt,
      _table.winner,
      _table.roundNumber,
      _table.roundStartedAt,
      _table.roundMover,
      _table.roundAttackerShip,
      _table.roundDefenderShip
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.initiatorExperiences, _table.responderExperiences);
    bytes memory _dynamicData = encodeDynamic(_table.initiatorExperiences, _table.responderExperiences);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 id, ShipBattleData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.initiatorRosterPlayerId,
      _table.initiatorRosterSequenceNumber,
      _table.responderRosterPlayerId,
      _table.responderRosterSequenceNumber,
      _table.status,
      _table.endedAt,
      _table.winner,
      _table.roundNumber,
      _table.roundStartedAt,
      _table.roundMover,
      _table.roundAttackerShip,
      _table.roundDefenderShip
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.initiatorExperiences, _table.responderExperiences);
    bytes memory _dynamicData = encodeDynamic(_table.initiatorExperiences, _table.responderExperiences);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 initiatorRosterPlayerId,
      uint32 initiatorRosterSequenceNumber,
      uint256 responderRosterPlayerId,
      uint32 responderRosterSequenceNumber,
      uint8 status,
      uint64 endedAt,
      uint8 winner,
      uint32 roundNumber,
      uint64 roundStartedAt,
      uint8 roundMover,
      uint256 roundAttackerShip,
      uint256 roundDefenderShip
    )
  {
    initiatorRosterPlayerId = (uint256(Bytes.getBytes32(_blob, 0)));

    initiatorRosterSequenceNumber = (uint32(Bytes.getBytes4(_blob, 32)));

    responderRosterPlayerId = (uint256(Bytes.getBytes32(_blob, 36)));

    responderRosterSequenceNumber = (uint32(Bytes.getBytes4(_blob, 68)));

    status = (uint8(Bytes.getBytes1(_blob, 72)));

    endedAt = (uint64(Bytes.getBytes8(_blob, 73)));

    winner = (uint8(Bytes.getBytes1(_blob, 81)));

    roundNumber = (uint32(Bytes.getBytes4(_blob, 82)));

    roundStartedAt = (uint64(Bytes.getBytes8(_blob, 86)));

    roundMover = (uint8(Bytes.getBytes1(_blob, 94)));

    roundAttackerShip = (uint256(Bytes.getBytes32(_blob, 95)));

    roundDefenderShip = (uint256(Bytes.getBytes32(_blob, 127)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint32[] memory initiatorExperiences, uint32[] memory responderExperiences) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    initiatorExperiences = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    responderExperiences = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (ShipBattleData memory _table) {
    (
      _table.initiatorRosterPlayerId,
      _table.initiatorRosterSequenceNumber,
      _table.responderRosterPlayerId,
      _table.responderRosterSequenceNumber,
      _table.status,
      _table.endedAt,
      _table.winner,
      _table.roundNumber,
      _table.roundStartedAt,
      _table.roundMover,
      _table.roundAttackerShip,
      _table.roundDefenderShip
    ) = decodeStatic(_staticData);

    (_table.initiatorExperiences, _table.responderExperiences) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 initiatorRosterPlayerId,
    uint32 initiatorRosterSequenceNumber,
    uint256 responderRosterPlayerId,
    uint32 responderRosterSequenceNumber,
    uint8 status,
    uint64 endedAt,
    uint8 winner,
    uint32 roundNumber,
    uint64 roundStartedAt,
    uint8 roundMover,
    uint256 roundAttackerShip,
    uint256 roundDefenderShip
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        initiatorRosterPlayerId,
        initiatorRosterSequenceNumber,
        responderRosterPlayerId,
        responderRosterSequenceNumber,
        status,
        endedAt,
        winner,
        roundNumber,
        roundStartedAt,
        roundMover,
        roundAttackerShip,
        roundDefenderShip
      );
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint32[] memory initiatorExperiences,
    uint32[] memory responderExperiences
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(initiatorExperiences.length * 4, responderExperiences.length * 4);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    uint32[] memory initiatorExperiences,
    uint32[] memory responderExperiences
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((initiatorExperiences)), EncodeArray.encode((responderExperiences)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 initiatorRosterPlayerId,
    uint32 initiatorRosterSequenceNumber,
    uint256 responderRosterPlayerId,
    uint32 responderRosterSequenceNumber,
    uint8 status,
    uint64 endedAt,
    uint8 winner,
    uint32 roundNumber,
    uint64 roundStartedAt,
    uint8 roundMover,
    uint256 roundAttackerShip,
    uint256 roundDefenderShip,
    uint32[] memory initiatorExperiences,
    uint32[] memory responderExperiences
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      initiatorRosterPlayerId,
      initiatorRosterSequenceNumber,
      responderRosterPlayerId,
      responderRosterSequenceNumber,
      status,
      endedAt,
      winner,
      roundNumber,
      roundStartedAt,
      roundMover,
      roundAttackerShip,
      roundDefenderShip
    );

    EncodedLengths _encodedLengths = encodeLengths(initiatorExperiences, responderExperiences);
    bytes memory _dynamicData = encodeDynamic(initiatorExperiences, responderExperiences);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    return _keyTuple;
  }
}
