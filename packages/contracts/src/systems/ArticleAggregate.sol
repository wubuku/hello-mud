// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { Article, ArticleData, ArticleIdGenerator, CommentSeqIdGenerator } from "../codegen/index.sol";
import { TagAdded, ArticleCreated, ArticleUpdated, ArticleDeleted, CommentAdded } from "./ArticleEvents.sol";
import { ArticleAddTagLogic } from "./ArticleAddTagLogic.sol";
import { ArticleCreateLogic } from "./ArticleCreateLogic.sol";
import { ArticleUpdateLogic } from "./ArticleUpdateLogic.sol";
import { ArticleDeleteLogic } from "./ArticleDeleteLogic.sol";
import { ArticleAddCommentLogic } from "./ArticleAddCommentLogic.sol";

abstract contract ArticleAggregate is System {
  event TagAddedEvent(uint64 indexed id, string tag);

  event ArticleCreatedEvent(uint64 indexed id, address author, string title, string body);

  event ArticleUpdatedEvent(uint64 indexed id, address author, string title, string body);

  event ArticleDeletedEvent(uint64 indexed id);

  event CommentAddedEvent(uint64 indexed id, uint64 commentSeqId, string commenter, string body);

  function articleAddTag(uint64 id, string memory tag) public virtual {
    ArticleData memory articleData = Article.get(id);
    require(
      !(articleData.author == address(0) && bytes(articleData.title).length == 0 && bytes(articleData.body).length == 0),
      "Article does not exist"
    );
    TagAdded memory tagAdded = ArticleAddTagLogic.verify(id, tag, articleData);
    tagAdded.id = id;
    emit TagAddedEvent(tagAdded.id, tagAdded.tag);
    ArticleData memory updatedArticleData = ArticleAddTagLogic.mutate(tagAdded, articleData);
    Article.set(id, updatedArticleData);
  }

  function articleCreate(address author, string memory title, string memory body) public virtual {
    uint64 id = ArticleIdGenerator.get() + 1;
    ArticleIdGenerator.set(id);
    ArticleData memory articleData = Article.get(id);
    require(
      articleData.author == address(0) && bytes(articleData.title).length == 0 && bytes(articleData.body).length == 0,
      "Article already exists"
    );
    ArticleCreated memory articleCreated = ArticleCreateLogic.verify(id, author, title, body);
    articleCreated.id = id;
    emit ArticleCreatedEvent(articleCreated.id, articleCreated.author, articleCreated.title, articleCreated.body);
    ArticleData memory newArticleData = ArticleCreateLogic.mutate(articleCreated);
    Article.set(id, newArticleData);
  }

  function articleUpdate(uint64 id, address author, string memory title, string memory body) public virtual {
    ArticleData memory articleData = Article.get(id);
    require(
      !(articleData.author == address(0) && bytes(articleData.title).length == 0 && bytes(articleData.body).length == 0),
      "Article does not exist"
    );
    ArticleUpdated memory articleUpdated = ArticleUpdateLogic.verify(id, author, title, body, articleData);
    articleUpdated.id = id;
    emit ArticleUpdatedEvent(articleUpdated.id, articleUpdated.author, articleUpdated.title, articleUpdated.body);
    ArticleData memory updatedArticleData = ArticleUpdateLogic.mutate(articleUpdated, articleData);
    Article.set(id, updatedArticleData);
  }

  function articleDelete(uint64 id) public virtual {
    ArticleData memory articleData = Article.get(id);
    require(
      !(articleData.author == address(0) && bytes(articleData.title).length == 0 && bytes(articleData.body).length == 0),
      "Article does not exist"
    );
    ArticleDeleted memory articleDeleted = ArticleDeleteLogic.verify(id, articleData);
    articleDeleted.id = id;
    emit ArticleDeletedEvent(articleDeleted.id);
    ArticleData memory updatedArticleData = ArticleDeleteLogic.mutate(articleDeleted, articleData);
    Article.set(id, updatedArticleData);
  }

  function articleAddComment(uint64 id, string memory commenter, string memory body) public virtual {
    ArticleData memory articleData = Article.get(id);
    require(
      !(articleData.author == address(0) && bytes(articleData.title).length == 0 && bytes(articleData.body).length == 0),
      "Article does not exist"
    );
    uint64 commentSeqId = CommentSeqIdGenerator.get(id) + 1;
    CommentSeqIdGenerator.set(id, commentSeqId);
    CommentAdded memory commentAdded = ArticleAddCommentLogic.verify(id, commentSeqId, commenter, body, articleData);
    commentAdded.id = id;
    emit CommentAddedEvent(commentAdded.id, commentAdded.commentSeqId, commentAdded.commenter, commentAdded.body);
    ArticleData memory updatedArticleData = ArticleAddCommentLogic.mutate(commentAdded, articleData);
    Article.set(id, updatedArticleData);
  }

}
