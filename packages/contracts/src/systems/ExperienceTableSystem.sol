// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { ExperienceTable } from "../codegen/index.sol";
import { ExperienceLevelAdded, ExperienceLevelUpdated, ExperienceTableCreated, ExperienceTableUpdated } from "./ExperienceTableEvents.sol";
import { ExperienceTableAddLevelLogic } from "./ExperienceTableAddLevelLogic.sol";
import { ExperienceTableUpdateLevelLogic } from "./ExperienceTableUpdateLevelLogic.sol";
import { ExperienceTableCreateLogic } from "./ExperienceTableCreateLogic.sol";
import { ExperienceTableUpdateLogic } from "./ExperienceTableUpdateLogic.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";

contract ExperienceTableSystem is System {
  using WorldResourceIdInstance for ResourceId;

  event ExperienceLevelAddedEvent(uint16 level, uint32 experience, uint32 difference);

  event ExperienceLevelUpdatedEvent(uint16 level, uint32 experience, uint32 difference);

  event ExperienceTableCreatedEvent(bool reservedBool1);

  event ExperienceTableUpdatedEvent(bool reservedBool1);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    require(_thisNamespaceOwner == _msgSender(), "Require namespace owner");
  }

  function experienceTableAddLevel(uint16 level, uint32 experience, uint32 difference) public {
    _requireNamespaceOwner();
    bool reservedBool1 = ExperienceTable.get();
    require(
      !(reservedBool1 == false),
      "ExperienceTable does not exist"
    );
    ExperienceLevelAdded memory experienceLevelAdded = ExperienceTableAddLevelLogic.verify(level, experience, difference, reservedBool1);
    emit ExperienceLevelAddedEvent(experienceLevelAdded.level, experienceLevelAdded.experience, experienceLevelAdded.difference);
    bool updatedReservedBool1 = ExperienceTableAddLevelLogic.mutate(experienceLevelAdded, reservedBool1);
    ExperienceTable.set(updatedReservedBool1);
  }

  function experienceTableUpdateLevel(uint16 level, uint32 experience, uint32 difference) public {
    _requireNamespaceOwner();
    bool reservedBool1 = ExperienceTable.get();
    require(
      !(reservedBool1 == false),
      "ExperienceTable does not exist"
    );
    ExperienceLevelUpdated memory experienceLevelUpdated = ExperienceTableUpdateLevelLogic.verify(level, experience, difference, reservedBool1);
    emit ExperienceLevelUpdatedEvent(experienceLevelUpdated.level, experienceLevelUpdated.experience, experienceLevelUpdated.difference);
    bool updatedReservedBool1 = ExperienceTableUpdateLevelLogic.mutate(experienceLevelUpdated, reservedBool1);
    ExperienceTable.set(updatedReservedBool1);
  }

  function experienceTableCreate(bool reservedBool1) public {
    bool __reservedBool1 = ExperienceTable.get();
    require(
      __reservedBool1 == false,
      "ExperienceTable already exists"
    );
    ExperienceTableCreated memory experienceTableCreated = ExperienceTableCreateLogic.verify(reservedBool1);
    emit ExperienceTableCreatedEvent(experienceTableCreated.reservedBool1);
    bool new__ReservedBool1 = ExperienceTableCreateLogic.mutate(experienceTableCreated);
    ExperienceTable.set(new__ReservedBool1);
  }

  function experienceTableUpdate(bool reservedBool1) public {
    bool __reservedBool1 = ExperienceTable.get();
    require(
      !(__reservedBool1 == false),
      "ExperienceTable does not exist"
    );
    ExperienceTableUpdated memory experienceTableUpdated = ExperienceTableUpdateLogic.verify(reservedBool1, __reservedBool1);
    emit ExperienceTableUpdatedEvent(experienceTableUpdated.reservedBool1);
    bool updated__ReservedBool1 = ExperienceTableUpdateLogic.mutate(experienceTableUpdated, __reservedBool1);
    ExperienceTable.set(updated__ReservedBool1);
  }

}
