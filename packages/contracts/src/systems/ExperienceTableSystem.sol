// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { ExperienceTable } from "../codegen/index.sol";
import { ExperienceLevelAdded, ExperienceLevelUpdated, ExperienceTableCreated, ExperienceTableUpdated } from "./ExperienceTableEvents.sol";
import { ExperienceTableAddLevelLogic } from "./ExperienceTableAddLevelLogic.sol";
import { ExperienceTableUpdateLevelLogic } from "./ExperienceTableUpdateLevelLogic.sol";
import { ExperienceTableCreateLogic } from "./ExperienceTableCreateLogic.sol";
import { ExperienceTableUpdateLogic } from "./ExperienceTableUpdateLogic.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";
import { IAppSystemErrors } from "./IAppSystemErrors.sol";

contract ExperienceTableSystem is System, IAppSystemErrors {
  using WorldResourceIdInstance for ResourceId;

  event ExperienceLevelAddedEvent(uint16 level, uint32 experience, uint32 difference);

  event ExperienceLevelUpdatedEvent(uint16 level, uint32 experience, uint32 difference);

  event ExperienceTableCreatedEvent(bool existing);

  event ExperienceTableUpdatedEvent(bool existing);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function experienceTableAddLevel(uint16 level, uint32 experience, uint32 difference) public {
    _requireNamespaceOwner();
    bool existing = ExperienceTable.get();
    if (existing == false) {
      revert ExperienceTableDoesNotExist();
    }
    ExperienceLevelAdded memory experienceLevelAdded = ExperienceTableAddLevelLogic.verify(level, experience, difference, existing);
    emit ExperienceLevelAddedEvent(experienceLevelAdded.level, experienceLevelAdded.experience, experienceLevelAdded.difference);
    bool updatedExisting = ExperienceTableAddLevelLogic.mutate(experienceLevelAdded, existing);
    ExperienceTable.set(updatedExisting);
  }

  function experienceTableUpdateLevel(uint16 level, uint32 experience, uint32 difference) public {
    _requireNamespaceOwner();
    bool existing = ExperienceTable.get();
    if (existing == false) {
      revert ExperienceTableDoesNotExist();
    }
    ExperienceLevelUpdated memory experienceLevelUpdated = ExperienceTableUpdateLevelLogic.verify(level, experience, difference, existing);
    emit ExperienceLevelUpdatedEvent(experienceLevelUpdated.level, experienceLevelUpdated.experience, experienceLevelUpdated.difference);
    bool updatedExisting = ExperienceTableUpdateLevelLogic.mutate(experienceLevelUpdated, existing);
    ExperienceTable.set(updatedExisting);
  }

  function experienceTableCreate(bool existing) public {
    bool __existing = ExperienceTable.get();
    if (!(__existing == false)) {
      revert ExperienceTableAlreadyExists();
    }
    ExperienceTableCreated memory experienceTableCreated = ExperienceTableCreateLogic.verify(existing);
    emit ExperienceTableCreatedEvent(experienceTableCreated.existing);
    bool new__Existing = ExperienceTableCreateLogic.mutate(experienceTableCreated);
    ExperienceTable.set(new__Existing);
  }

  function experienceTableUpdate(bool existing) public {
    bool __existing = ExperienceTable.get();
    if (__existing == false) {
      revert ExperienceTableDoesNotExist();
    }
    ExperienceTableUpdated memory experienceTableUpdated = ExperienceTableUpdateLogic.verify(existing, __existing);
    emit ExperienceTableUpdatedEvent(experienceTableUpdated.existing);
    bool updated__Existing = ExperienceTableUpdateLogic.mutate(experienceTableUpdated, __existing);
    ExperienceTable.set(updated__Existing);
  }

}
