// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { ExperienceTable } from "../codegen/index.sol";
import { ExperienceTableCreated, ExperienceTableUpdated } from "./ExperienceTableEvents.sol";
import { ExperienceTableCreateLogic } from "./ExperienceTableCreateLogic.sol";
import { ExperienceTableUpdateLogic } from "./ExperienceTableUpdateLogic.sol";

contract ExperienceTableSystem is System {
  event ExperienceTableCreatedEvent(bool reservedBool1);

  event ExperienceTableUpdatedEvent(bool reservedBool1);

  function experienceTableCreate(bool reservedBool1) public {
    bool reservedBool1 = ExperienceTable.get();
    require(
      reservedBool1 == false,
      "ExperienceTable already exists"
    );
    ExperienceTableCreated memory experienceTableCreated = ExperienceTableCreateLogic.verify(reservedBool1);
    emit ExperienceTableCreatedEvent(experienceTableCreated.reservedBool1);
    bool newReservedBool1 = ExperienceTableCreateLogic.mutate(experienceTableCreated);
    ExperienceTable.set(newReservedBool1);
  }

  function experienceTableUpdate(bool reservedBool1) public {
    bool reservedBool1 = ExperienceTable.get();
    require(
      !(reservedBool1 == false),
      "ExperienceTable does not exist"
    );
    ExperienceTableUpdated memory experienceTableUpdated = ExperienceTableUpdateLogic.verify(reservedBool1, reservedBool1);
    emit ExperienceTableUpdatedEvent(experienceTableUpdated.reservedBool1);
    bool updatedReservedBool1 = ExperienceTableUpdateLogic.mutate(experienceTableUpdated, reservedBool1);
    ExperienceTable.set(updatedReservedBool1);
  }

}
