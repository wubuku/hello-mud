// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { Roster, RosterData } from "../codegen/index.sol";
import { RosterBattleDestroyedShipsCleanedUp } from "./RosterEvents.sol";
import { RosterCleanUpBattleDestroyedShipsLogic } from "./RosterCleanUpBattleDestroyedShipsLogic.sol";
import { RosterCleanUpBattleResult } from "./RosterCleanUpBattleResult.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";

contract RosterCleaningSystem is System {
  using WorldResourceIdInstance for ResourceId;

  error RequireNamespaceOwner(address caller, address requiredOwner);
  error RosterAlreadyExists(uint256 playerId, uint32 sequenceNumber);
  error RosterDoesNotExist(uint256 playerId, uint32 sequenceNumber);

  event RosterBattleDestroyedShipsCleanedUpEvent(uint256 indexed playerId, uint32 indexed sequenceNumber, uint256 loserRosterIdPlayerId, uint32 loserRosterIdSequenceNumber, uint8 choice);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function rosterCleanUpBattleDestroyedShips(uint256 playerId, uint32 sequenceNumber, uint256 loserRosterIdPlayerId, uint32 loserRosterIdSequenceNumber, uint8 choice) public returns (RosterCleanUpBattleResult memory) {
    RosterData memory rosterData = Roster.get(playerId, sequenceNumber);
    if (rosterData.status == uint8(0) && rosterData.speed == uint32(0) && rosterData.baseExperience == uint32(0) && rosterData.environmentOwned == false && rosterData.updatedCoordinatesX == uint32(0) && rosterData.updatedCoordinatesY == uint32(0) && rosterData.coordinatesUpdatedAt == uint64(0) && rosterData.targetCoordinatesX == uint32(0) && rosterData.targetCoordinatesY == uint32(0) && rosterData.originCoordinatesX == uint32(0) && rosterData.originCoordinatesY == uint32(0) && rosterData.sailDuration == uint64(0) && rosterData.setSailAt == uint64(0) && rosterData.currentSailSegment == uint16(0) && rosterData.shipBattleId == uint256(0) && rosterData.shipIds.length == 0) {
      revert RosterDoesNotExist(playerId, sequenceNumber);
    }
    RosterBattleDestroyedShipsCleanedUp memory rosterBattleDestroyedShipsCleanedUp = RosterCleanUpBattleDestroyedShipsLogic.verify(playerId, sequenceNumber, loserRosterIdPlayerId, loserRosterIdSequenceNumber, choice, rosterData);
    rosterBattleDestroyedShipsCleanedUp.playerId = playerId;
    rosterBattleDestroyedShipsCleanedUp.sequenceNumber = sequenceNumber;
    emit RosterBattleDestroyedShipsCleanedUpEvent(rosterBattleDestroyedShipsCleanedUp.playerId, rosterBattleDestroyedShipsCleanedUp.sequenceNumber, rosterBattleDestroyedShipsCleanedUp.loserRosterIdPlayerId, rosterBattleDestroyedShipsCleanedUp.loserRosterIdSequenceNumber, rosterBattleDestroyedShipsCleanedUp.choice);
    (RosterCleanUpBattleResult memory result, RosterData memory updatedRosterData) = RosterCleanUpBattleDestroyedShipsLogic.mutate(rosterBattleDestroyedShipsCleanedUp, rosterData);
    Roster.set(playerId, sequenceNumber, updatedRosterData);
    return result;
  }

}
