// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ResourceId, WorldResourceIdLib } from "@latticexyz/world/src/WorldResourceId.sol";
import { RESOURCE_SYSTEM } from "@latticexyz/world/src/worldResourceTypes.sol";
import { IBaseWorld } from "@latticexyz/world/src/codegen/interfaces/IBaseWorld.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { ItemIdQuantityPair } from "./ItemIdQuantityPair.sol";

library RosterDelegationLib {

  function create(uint256 playerId, uint32 sequenceNumber, uint32 coordinatesX, uint32 coordinatesY) internal returns (uint256, uint32) {
    ResourceId rosterFriendSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterFriendSyst" // NOTE: Only the first 16 characters are used. Original: "RosterFriendSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    bytes memory returnData = world.callFrom(
      WorldContextConsumerLib._msgSender(),
      rosterFriendSystemId,
      abi.encodeWithSignature(
        "rosterCreate(uint256,uint32,uint32,uint32)",
        playerId, sequenceNumber, coordinatesX, coordinatesY
      )
    );

    return abi.decode(returnData, (uint256, uint32));
  }

  function createEnvironmentRoster(uint256 playerId, uint32 sequenceNumber, uint32 coordinatesX, uint32 coordinatesY, uint32 shipResourceQuantity, uint32 shipBaseResourceQuantity, uint32 baseExperience) internal {
    ResourceId rosterSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      rosterSystemId,
      abi.encodeWithSignature(
        "rosterCreateEnvironmentRoster(uint256,uint32,uint32,uint32,uint32,uint32,uint32)",
        playerId, sequenceNumber, coordinatesX, coordinatesY, shipResourceQuantity, shipBaseResourceQuantity, baseExperience
      )
    );

  }

  function addShip(uint256 playerId, uint32 sequenceNumber, uint256 shipId, uint64 position) internal {
    ResourceId rosterFriendSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterFriendSyst" // NOTE: Only the first 16 characters are used. Original: "RosterFriendSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      rosterFriendSystemId,
      abi.encodeWithSignature(
        "rosterAddShip(uint256,uint32,uint256,uint64)",
        playerId, sequenceNumber, shipId, position
      )
    );

  }

  function adjustShipsPosition(uint256 playerId, uint32 sequenceNumber, uint64[] memory positions, uint256[] memory shipIds) internal {
    ResourceId rosterSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      rosterSystemId,
      abi.encodeWithSignature(
        "rosterAdjustShipsPosition(uint256,uint32,uint64[],uint256[])",
        playerId, sequenceNumber, positions, shipIds
      )
    );

  }

  function transferShip(uint256 playerId, uint32 sequenceNumber, uint256 shipId, uint256 toRosterPlayerId, uint32 toRosterSequenceNumber, uint64 toPosition) internal {
    ResourceId rosterSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      rosterSystemId,
      abi.encodeWithSignature(
        "rosterTransferShip(uint256,uint32,uint256,uint256,uint32,uint64)",
        playerId, sequenceNumber, shipId, toRosterPlayerId, toRosterSequenceNumber, toPosition
      )
    );

  }

  function transferShipInventory(uint256 playerId, uint32 sequenceNumber, uint256 fromShipId, uint256 toShipId, ItemIdQuantityPair[] memory itemIdQuantityPairs) internal {
    ResourceId rosterSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      rosterSystemId,
      abi.encodeWithSignature(
        "rosterTransferShipInventory(uint256,uint32,uint256,uint256,(uint32,uint32)[])",
        playerId, sequenceNumber, fromShipId, toShipId, itemIdQuantityPairs
      )
    );

  }

  function takeOutShipInventory(uint256 playerId, uint32 sequenceNumber, uint256 shipId, ItemIdQuantityPair[] memory itemIdQuantityPairs, uint32 updatedCoordinatesX, uint32 updatedCoordinatesY) internal {
    ResourceId rosterSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      rosterSystemId,
      abi.encodeWithSignature(
        "rosterTakeOutShipInventory(uint256,uint32,uint256,(uint32,uint32)[],uint32,uint32)",
        playerId, sequenceNumber, shipId, itemIdQuantityPairs, updatedCoordinatesX, updatedCoordinatesY
      )
    );

  }

  function putInShipInventory(uint256 playerId, uint32 sequenceNumber, uint256 shipId, ItemIdQuantityPair[] memory itemIdQuantityPairs, uint32 updatedCoordinatesX, uint32 updatedCoordinatesY) internal {
    ResourceId rosterSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      rosterSystemId,
      abi.encodeWithSignature(
        "rosterPutInShipInventory(uint256,uint32,uint256,(uint32,uint32)[],uint32,uint32)",
        playerId, sequenceNumber, shipId, itemIdQuantityPairs, updatedCoordinatesX, updatedCoordinatesY
      )
    );

  }

}
