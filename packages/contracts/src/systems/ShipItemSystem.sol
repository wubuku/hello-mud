// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { ShipItem, ShipItemData } from "../codegen/index.sol";
import { ShipItemCreated, ShipItemUpdated } from "./ShipItemEvents.sol";
import { ShipItemCreateLogic } from "./ShipItemCreateLogic.sol";
import { ShipItemUpdateLogic } from "./ShipItemUpdateLogic.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";
import { IAppSystemErrors } from "./IAppSystemErrors.sol";

contract ShipItemSystem is System, IAppSystemErrors {
  using WorldResourceIdInstance for ResourceId;

  event ShipItemCreatedEvent(uint32 indexed itemId, uint8 type_, uint32 shipHealthPoints, uint8 mountingPosition, uint8 capacityUsage, uint8 attackBoost, uint8 protectionBoost, uint8 speedBoost, uint8 healthBoost);

  event ShipItemUpdatedEvent(uint32 indexed itemId, uint8 type_, uint32 shipHealthPoints, uint8 mountingPosition, uint8 capacityUsage, uint8 attackBoost, uint8 protectionBoost, uint8 speedBoost, uint8 healthBoost);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function shipItemCreate(uint32 itemId, uint8 type_, uint32 shipHealthPoints, uint8 mountingPosition, uint8 capacityUsage, uint8 attackBoost, uint8 protectionBoost, uint8 speedBoost, uint8 healthBoost) public {
    _requireNamespaceOwner();
    ShipItemData memory shipItemData = ShipItem.get(itemId);
    if (!(shipItemData.type_ == uint8(0) && shipItemData.shipHealthPoints == uint32(0) && shipItemData.mountingPosition == uint8(0) && shipItemData.capacityUsage == uint8(0) && shipItemData.attackBoost == uint8(0) && shipItemData.protectionBoost == uint8(0) && shipItemData.speedBoost == uint8(0) && shipItemData.healthBoost == uint8(0))) {
      revert ShipItemAlreadyExists(itemId);
    }
    ShipItemCreated memory shipItemCreated = ShipItemCreateLogic.verify(itemId, type_, shipHealthPoints, mountingPosition, capacityUsage, attackBoost, protectionBoost, speedBoost, healthBoost);
    shipItemCreated.itemId = itemId;
    emit ShipItemCreatedEvent(shipItemCreated.itemId, shipItemCreated.type_, shipItemCreated.shipHealthPoints, shipItemCreated.mountingPosition, shipItemCreated.capacityUsage, shipItemCreated.attackBoost, shipItemCreated.protectionBoost, shipItemCreated.speedBoost, shipItemCreated.healthBoost);
    ShipItemData memory newShipItemData = ShipItemCreateLogic.mutate(shipItemCreated);
    ShipItem.set(itemId, newShipItemData);
  }

  function shipItemUpdate(uint32 itemId, uint8 type_, uint32 shipHealthPoints, uint8 mountingPosition, uint8 capacityUsage, uint8 attackBoost, uint8 protectionBoost, uint8 speedBoost, uint8 healthBoost) public {
    _requireNamespaceOwner();
    ShipItemData memory shipItemData = ShipItem.get(itemId);
    if (shipItemData.type_ == uint8(0) && shipItemData.shipHealthPoints == uint32(0) && shipItemData.mountingPosition == uint8(0) && shipItemData.capacityUsage == uint8(0) && shipItemData.attackBoost == uint8(0) && shipItemData.protectionBoost == uint8(0) && shipItemData.speedBoost == uint8(0) && shipItemData.healthBoost == uint8(0)) {
      revert ShipItemDoesNotExist(itemId);
    }
    ShipItemUpdated memory shipItemUpdated = ShipItemUpdateLogic.verify(itemId, type_, shipHealthPoints, mountingPosition, capacityUsage, attackBoost, protectionBoost, speedBoost, healthBoost, shipItemData);
    shipItemUpdated.itemId = itemId;
    emit ShipItemUpdatedEvent(shipItemUpdated.itemId, shipItemUpdated.type_, shipItemUpdated.shipHealthPoints, shipItemUpdated.mountingPosition, shipItemUpdated.capacityUsage, shipItemUpdated.attackBoost, shipItemUpdated.protectionBoost, shipItemUpdated.speedBoost, shipItemUpdated.healthBoost);
    ShipItemData memory updatedShipItemData = ShipItemUpdateLogic.mutate(shipItemUpdated, shipItemData);
    ShipItem.set(itemId, updatedShipItemData);
  }

}
