// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { ItemProduction, ItemProductionData } from "../codegen/index.sol";
import { ItemProductionCreated, ItemProductionUpdated } from "./ItemProductionEvents.sol";
import { ItemProductionCreateLogic } from "./ItemProductionCreateLogic.sol";
import { ItemProductionUpdateLogic } from "./ItemProductionUpdateLogic.sol";

contract ItemProductionSystem is System {
  event ItemProductionCreatedEvent(uint8 indexed ItemProductionIdSkillType, uint32 indexed ItemProductionIdItemId, uint16 requirementsLevel, uint32 baseQuantity, uint32 baseExperience, uint64 baseCreationTime, uint64 energyCost, uint16 successRate, uint32[] materialItemIds, uint32[] materialItemQuantities);

  event ItemProductionUpdatedEvent(uint8 indexed ItemProductionIdSkillType, uint32 indexed ItemProductionIdItemId, uint16 requirementsLevel, uint32 baseQuantity, uint32 baseExperience, uint64 baseCreationTime, uint64 energyCost, uint16 successRate, uint32[] materialItemIds, uint32[] materialItemQuantities);

  function itemProductionCreate(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId, uint16 requirementsLevel, uint32 baseQuantity, uint32 baseExperience, uint64 baseCreationTime, uint64 energyCost, uint16 successRate, uint32[] memory materialItemIds, uint32[] memory materialItemQuantities) public {
    ItemProductionData memory itemProductionData = ItemProduction.get(itemProductionIdSkillType, itemProductionIdItemId);
    require(
      itemProductionData.requirementsLevel == 0 && itemProductionData.baseQuantity == 0 && itemProductionData.baseExperience == 0 && itemProductionData.baseCreationTime == 0 && itemProductionData.energyCost == 0 && itemProductionData.successRate == 0 && itemProductionData.materialItemIds.length == 0 && itemProductionData.materialItemQuantities.length == 0,
      "ItemProduction already exists"
    );
    ItemProductionCreated memory itemProductionCreated = ItemProductionCreateLogic.verify(itemProductionIdSkillType, itemProductionIdItemId, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, materialItemIds, materialItemQuantities);
    itemProductionCreated.ItemProductionIdSkillType = itemProductionIdSkillType;
    itemProductionCreated.ItemProductionIdItemId = itemProductionIdItemId;
    emit ItemProductionCreatedEvent(itemProductionCreated.ItemProductionIdSkillType, itemProductionCreated.ItemProductionIdItemId, itemProductionCreated.requirementsLevel, itemProductionCreated.baseQuantity, itemProductionCreated.baseExperience, itemProductionCreated.baseCreationTime, itemProductionCreated.energyCost, itemProductionCreated.successRate, itemProductionCreated.materialItemIds, itemProductionCreated.materialItemQuantities);
    ItemProductionData memory newItemProductionData = ItemProductionCreateLogic.mutate(itemProductionCreated);
    ItemProduction.set(itemProductionIdSkillType, itemProductionIdItemId, newItemProductionData);
  }

  function itemProductionUpdate(uint8 itemProductionIdSkillType, uint32 itemProductionIdItemId, uint16 requirementsLevel, uint32 baseQuantity, uint32 baseExperience, uint64 baseCreationTime, uint64 energyCost, uint16 successRate, uint32[] memory materialItemIds, uint32[] memory materialItemQuantities) public {
    ItemProductionData memory itemProductionData = ItemProduction.get(itemProductionIdSkillType, itemProductionIdItemId);
    require(
      !(itemProductionData.requirementsLevel == 0 && itemProductionData.baseQuantity == 0 && itemProductionData.baseExperience == 0 && itemProductionData.baseCreationTime == 0 && itemProductionData.energyCost == 0 && itemProductionData.successRate == 0 && itemProductionData.materialItemIds.length == 0 && itemProductionData.materialItemQuantities.length == 0),
      "ItemProduction does not exist"
    );
    ItemProductionUpdated memory itemProductionUpdated = ItemProductionUpdateLogic.verify(itemProductionIdSkillType, itemProductionIdItemId, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, materialItemIds, materialItemQuantities, itemProductionData);
    itemProductionUpdated.ItemProductionIdSkillType = itemProductionIdSkillType;
    itemProductionUpdated.ItemProductionIdItemId = itemProductionIdItemId;
    emit ItemProductionUpdatedEvent(itemProductionUpdated.ItemProductionIdSkillType, itemProductionUpdated.ItemProductionIdItemId, itemProductionUpdated.requirementsLevel, itemProductionUpdated.baseQuantity, itemProductionUpdated.baseExperience, itemProductionUpdated.baseCreationTime, itemProductionUpdated.energyCost, itemProductionUpdated.successRate, itemProductionUpdated.materialItemIds, itemProductionUpdated.materialItemQuantities);
    ItemProductionData memory updatedItemProductionData = ItemProductionUpdateLogic.mutate(itemProductionUpdated, itemProductionData);
    ItemProduction.set(itemProductionIdSkillType, itemProductionIdItemId, updatedItemProductionData);
  }

}
