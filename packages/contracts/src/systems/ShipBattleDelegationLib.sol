// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ResourceId, WorldResourceIdLib } from "@latticexyz/world/src/WorldResourceId.sol";
import { RESOURCE_SYSTEM } from "@latticexyz/world/src/worldResourceTypes.sol";
import { IBaseWorld } from "@latticexyz/world/src/codegen/interfaces/IBaseWorld.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";

library ShipBattleDelegationLib {

  function initiateBattle(uint256 playerId, uint256 initiatorRosterPlayerId, uint32 initiatorRosterSequenceNumber, uint256 responderRosterPlayerId, uint32 responderRosterSequenceNumber, uint32 initiatorCoordinatesX, uint32 initiatorCoordinatesY, uint16 updatedInitiatorSailSeg, uint32 responderCoordinatesX, uint32 responderCoordinatesY, uint16 updatedResponderSailSeg) internal returns (uint256) {
    ResourceId shipBattleInitiateSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipBattleInitia" // NOTE: Only the first 16 characters are used. Original: "ShipBattleInitiateSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    bytes memory returnData = world.callFrom(
      WorldContextConsumerLib._msgSender(),
      shipBattleInitiateSystemId,
      abi.encodeWithSignature(
        "initiateShipBattle(uint256,uint256,uint32,uint256,uint32,uint32,uint32,uint16,uint32,uint32,uint16)",
        playerId, initiatorRosterPlayerId, initiatorRosterSequenceNumber, responderRosterPlayerId, responderRosterSequenceNumber, initiatorCoordinatesX, initiatorCoordinatesY, updatedInitiatorSailSeg, responderCoordinatesX, responderCoordinatesY, updatedResponderSailSeg
      )
    );

    return abi.decode(returnData, (uint256));
  }

  function makeMove(uint256 id, uint8 attackerCommand) internal {
    ResourceId shipBattleSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipBattleSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      shipBattleSystemId,
      abi.encodeWithSignature(
        "shipBattleMakeMove(uint256,uint8)",
        id, attackerCommand
      )
    );

  }

  function takeLoot(uint256 id, uint8 choice) internal {
    ResourceId shipBattleTakeLootSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipBattleTakeLo" // NOTE: Only the first 16 characters are used. Original: "ShipBattleTakeLootSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      shipBattleTakeLootSystemId,
      abi.encodeWithSignature(
        "shipBattleTakeLoot(uint256,uint8)",
        id, choice
      )
    );

  }

}
