// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { SkillProcess, SkillProcessData } from "../codegen/index.sol";
import { ProductionProcessCompleted, ShipProductionProcessCompleted, CreationProcessCompleted } from "./SkillProcessEvents.sol";
import { SkillProcessCompleteProductionLogic } from "./SkillProcessCompleteProductionLogic.sol";
import { SkillProcessCompleteShipProductionLogic } from "./SkillProcessCompleteShipProductionLogic.sol";
import { SkillProcessCompleteCreationLogic } from "./SkillProcessCompleteCreationLogic.sol";

contract SkillProcessSystem is System {
  event ProductionProcessCompletedEvent(uint8 indexed skillType, uint256 indexed playerId, uint8 indexed sequenceNumber, uint32 itemId, uint64 startedAt, uint64 creationTime, uint64 endedAt, bool successful, uint32 quantity, uint32 experienceGained, uint16 newLevel);

  event ShipProductionProcessCompletedEvent(uint8 indexed skillType, uint256 indexed playerId, uint8 indexed sequenceNumber, uint32 itemId, uint64 startedAt, uint64 creationTime, uint64 endedAt, bool successful, uint32 quantity, uint32 experienceGained, uint16 newLevel);

  event CreationProcessCompletedEvent(uint8 indexed skillType, uint256 indexed playerId, uint8 indexed sequenceNumber, uint32 itemId, uint64 startedAt, uint64 creationTime, uint64 endedAt, bool successful, uint32 quantity, uint32 experienceGained, uint16 newLevel);

  function skillProcessCompleteProduction(uint8 skillType, uint256 playerId, uint8 sequenceNumber) public {
    SkillProcessData memory skillProcessData = SkillProcess.get(skillType, playerId, sequenceNumber);
    require(
      !(skillProcessData.itemId == uint32(0) && skillProcessData.startedAt == uint64(0) && skillProcessData.creationTime == uint64(0) && skillProcessData.completed == false && skillProcessData.endedAt == uint64(0) && skillProcessData.batchSize == uint32(0) && skillProcessData.existing == false),
      "SkillProcess does not exist"
    );
    ProductionProcessCompleted memory productionProcessCompleted = SkillProcessCompleteProductionLogic.verify(skillType, playerId, sequenceNumber, skillProcessData);
    productionProcessCompleted.skillType = skillType;
    productionProcessCompleted.playerId = playerId;
    productionProcessCompleted.sequenceNumber = sequenceNumber;
    emit ProductionProcessCompletedEvent(productionProcessCompleted.skillType, productionProcessCompleted.playerId, productionProcessCompleted.sequenceNumber, productionProcessCompleted.itemId, productionProcessCompleted.startedAt, productionProcessCompleted.creationTime, productionProcessCompleted.endedAt, productionProcessCompleted.successful, productionProcessCompleted.quantity, productionProcessCompleted.experienceGained, productionProcessCompleted.newLevel);
    SkillProcessData memory updatedSkillProcessData = SkillProcessCompleteProductionLogic.mutate(productionProcessCompleted, skillProcessData);
    SkillProcess.set(skillType, playerId, sequenceNumber, updatedSkillProcessData);
  }

  function skillProcessCompleteShipProduction(uint8 skillType, uint256 playerId, uint8 sequenceNumber) public {
    SkillProcessData memory skillProcessData = SkillProcess.get(skillType, playerId, sequenceNumber);
    require(
      !(skillProcessData.itemId == uint32(0) && skillProcessData.startedAt == uint64(0) && skillProcessData.creationTime == uint64(0) && skillProcessData.completed == false && skillProcessData.endedAt == uint64(0) && skillProcessData.batchSize == uint32(0) && skillProcessData.existing == false),
      "SkillProcess does not exist"
    );
    ShipProductionProcessCompleted memory shipProductionProcessCompleted = SkillProcessCompleteShipProductionLogic.verify(skillType, playerId, sequenceNumber, skillProcessData);
    shipProductionProcessCompleted.skillType = skillType;
    shipProductionProcessCompleted.playerId = playerId;
    shipProductionProcessCompleted.sequenceNumber = sequenceNumber;
    emit ShipProductionProcessCompletedEvent(shipProductionProcessCompleted.skillType, shipProductionProcessCompleted.playerId, shipProductionProcessCompleted.sequenceNumber, shipProductionProcessCompleted.itemId, shipProductionProcessCompleted.startedAt, shipProductionProcessCompleted.creationTime, shipProductionProcessCompleted.endedAt, shipProductionProcessCompleted.successful, shipProductionProcessCompleted.quantity, shipProductionProcessCompleted.experienceGained, shipProductionProcessCompleted.newLevel);
    SkillProcessData memory updatedSkillProcessData = SkillProcessCompleteShipProductionLogic.mutate(shipProductionProcessCompleted, skillProcessData);
    SkillProcess.set(skillType, playerId, sequenceNumber, updatedSkillProcessData);
  }

  function skillProcessCompleteCreation(uint8 skillType, uint256 playerId, uint8 sequenceNumber) public {
    SkillProcessData memory skillProcessData = SkillProcess.get(skillType, playerId, sequenceNumber);
    require(
      !(skillProcessData.itemId == uint32(0) && skillProcessData.startedAt == uint64(0) && skillProcessData.creationTime == uint64(0) && skillProcessData.completed == false && skillProcessData.endedAt == uint64(0) && skillProcessData.batchSize == uint32(0) && skillProcessData.existing == false),
      "SkillProcess does not exist"
    );
    CreationProcessCompleted memory creationProcessCompleted = SkillProcessCompleteCreationLogic.verify(skillType, playerId, sequenceNumber, skillProcessData);
    creationProcessCompleted.skillType = skillType;
    creationProcessCompleted.playerId = playerId;
    creationProcessCompleted.sequenceNumber = sequenceNumber;
    emit CreationProcessCompletedEvent(creationProcessCompleted.skillType, creationProcessCompleted.playerId, creationProcessCompleted.sequenceNumber, creationProcessCompleted.itemId, creationProcessCompleted.startedAt, creationProcessCompleted.creationTime, creationProcessCompleted.endedAt, creationProcessCompleted.successful, creationProcessCompleted.quantity, creationProcessCompleted.experienceGained, creationProcessCompleted.newLevel);
    SkillProcessData memory updatedSkillProcessData = SkillProcessCompleteCreationLogic.mutate(creationProcessCompleted, skillProcessData);
    SkillProcess.set(skillType, playerId, sequenceNumber, updatedSkillProcessData);
  }

}
