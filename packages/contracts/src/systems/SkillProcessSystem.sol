// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { SkillProcess, SkillProcessData } from "../codegen/index.sol";
import { SkillProcessCreated } from "./SkillProcessEvents.sol";
import { SkillProcessCreateLogic } from "./SkillProcessCreateLogic.sol";

contract SkillProcessSystem is System {
  event SkillProcessCreatedEvent(uint8 indexed skillProcessIdSkillType, uint256 indexed skillProcessIdPlayerId, uint8 indexed skillProcessIdSequenceNumber, uint32 itemId, uint64 startedAt, uint64 creationTime, bool completed, uint64 endedAt, uint32 batchSize);

  function skillProcessCreate(uint8 skillProcessIdSkillType, uint256 skillProcessIdPlayerId, uint8 skillProcessIdSequenceNumber, uint32 itemId, uint64 startedAt, uint64 creationTime, bool completed, uint64 endedAt, uint32 batchSize) public {
    SkillProcessData memory skillProcessData = SkillProcess.get(skillProcessIdSkillType, skillProcessIdPlayerId, skillProcessIdSequenceNumber);
    require(
      skillProcessData.itemId == 0 && skillProcessData.startedAt == 0 && skillProcessData.creationTime == 0 && skillProcessData.completed == false && skillProcessData.endedAt == 0 && skillProcessData.batchSize == 0,
      "SkillProcess already exists"
    );
    SkillProcessCreated memory skillProcessCreated = SkillProcessCreateLogic.verify(skillProcessIdSkillType, skillProcessIdPlayerId, skillProcessIdSequenceNumber, itemId, startedAt, creationTime, completed, endedAt, batchSize);
    skillProcessCreated.skillProcessIdSkillType = skillProcessIdSkillType;
    skillProcessCreated.skillProcessIdPlayerId = skillProcessIdPlayerId;
    skillProcessCreated.skillProcessIdSequenceNumber = skillProcessIdSequenceNumber;
    emit SkillProcessCreatedEvent(skillProcessCreated.skillProcessIdSkillType, skillProcessCreated.skillProcessIdPlayerId, skillProcessCreated.skillProcessIdSequenceNumber, skillProcessCreated.itemId, skillProcessCreated.startedAt, skillProcessCreated.creationTime, skillProcessCreated.completed, skillProcessCreated.endedAt, skillProcessCreated.batchSize);
    SkillProcessData memory newSkillProcessData = SkillProcessCreateLogic.mutate(skillProcessCreated);
    SkillProcess.set(skillProcessIdSkillType, skillProcessIdPlayerId, skillProcessIdSequenceNumber, newSkillProcessData);
  }

}
