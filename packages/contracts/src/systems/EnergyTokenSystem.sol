// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { EnergyToken, EnergyTokenData } from "../codegen/index.sol";
import { EnergyTokenCreated, EnergyTokenUpdated } from "./EnergyTokenEvents.sol";
import { EnergyTokenCreateLogic } from "./EnergyTokenCreateLogic.sol";
import { EnergyTokenUpdateLogic } from "./EnergyTokenUpdateLogic.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";
import { IAppSystemErrors } from "./IAppSystemErrors.sol";

contract EnergyTokenSystem is System, IAppSystemErrors {
  using WorldResourceIdInstance for ResourceId;

  event EnergyTokenCreatedEvent(address tokenAddress, uint256 faucetDropAmount, uint64 faucetDropInterval);

  event EnergyTokenUpdatedEvent(address tokenAddress, uint256 faucetDropAmount, uint64 faucetDropInterval);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function energyTokenCreate(address tokenAddress, uint256 faucetDropAmount, uint64 faucetDropInterval) public {
    _requireNamespaceOwner();
    EnergyTokenData memory energyTokenData = EnergyToken.get();
    if (!(energyTokenData.tokenAddress == address(0) && energyTokenData.faucetDropAmount == uint256(0) && energyTokenData.faucetDropInterval == uint64(0))) {
      revert EnergyTokenAlreadyExists();
    }
    EnergyTokenCreated memory energyTokenCreated = EnergyTokenCreateLogic.verify(tokenAddress, faucetDropAmount, faucetDropInterval);
    emit EnergyTokenCreatedEvent(energyTokenCreated.tokenAddress, energyTokenCreated.faucetDropAmount, energyTokenCreated.faucetDropInterval);
    EnergyTokenData memory newEnergyTokenData = EnergyTokenCreateLogic.mutate(energyTokenCreated);
    EnergyToken.set(newEnergyTokenData);
  }

  function energyTokenUpdate(address tokenAddress, uint256 faucetDropAmount, uint64 faucetDropInterval) public {
    _requireNamespaceOwner();
    EnergyTokenData memory energyTokenData = EnergyToken.get();
    if (energyTokenData.tokenAddress == address(0) && energyTokenData.faucetDropAmount == uint256(0) && energyTokenData.faucetDropInterval == uint64(0)) {
      revert EnergyTokenDoesNotExist();
    }
    EnergyTokenUpdated memory energyTokenUpdated = EnergyTokenUpdateLogic.verify(tokenAddress, faucetDropAmount, faucetDropInterval, energyTokenData);
    emit EnergyTokenUpdatedEvent(energyTokenUpdated.tokenAddress, energyTokenUpdated.faucetDropAmount, energyTokenUpdated.faucetDropInterval);
    EnergyTokenData memory updatedEnergyTokenData = EnergyTokenUpdateLogic.mutate(energyTokenUpdated, energyTokenData);
    EnergyToken.set(updatedEnergyTokenData);
  }

}
