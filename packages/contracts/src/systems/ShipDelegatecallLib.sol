// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ResourceId, WorldResourceIdLib } from "@latticexyz/world/src/WorldResourceId.sol";
import { RESOURCE_SYSTEM } from "@latticexyz/world/src/worldResourceTypes.sol";
import { IBaseWorld } from "@latticexyz/world/src/codegen/interfaces/IBaseWorld.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { WorldContextProviderLib } from "@latticexyz/world/src/WorldContext.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ItemIdQuantityPair } from "./ItemIdQuantityPair.sol";

library ShipDelegatecallLib {

  function create(uint32 shipItemId, uint256 rosterIdPlayerId, uint32 rosterIdSequenceNumber, uint32 healthPoints, uint32 attack, uint32 protection, uint32 speed, uint32[] memory buildingExpensesItemIds, uint32[] memory buildingExpensesQuantities) internal returns (uint256) {
    ResourceId shipFriendSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipFriendSystem"
    });

    (address shipFriendSystemAddress, ) = Systems.get(shipFriendSystemId);
    (bool success, bytes memory returnData) = WorldContextProviderLib.delegatecallWithContext(
      WorldContextConsumerLib._msgSender(),
      0,
      shipFriendSystemAddress,
      abi.encodeWithSignature(
        "shipCreate(uint32,uint256,uint32,uint32,uint32,uint32,uint32,uint32[],uint32[])",
        shipItemId, rosterIdPlayerId, rosterIdSequenceNumber, healthPoints, attack, protection, speed, buildingExpensesItemIds, buildingExpensesQuantities
      )
    );
    if (!success) revertWithBytes(returnData);

    return abi.decode(returnData, (uint256));
  }

  function increaseShipInventory(uint256 id, ItemIdQuantityPair[] memory items) internal {
    ResourceId shipFriendSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipFriendSystem"
    });

    (address shipFriendSystemAddress, ) = Systems.get(shipFriendSystemId);
    (bool success, bytes memory returnData) = WorldContextProviderLib.delegatecallWithContext(
      WorldContextConsumerLib._msgSender(),
      0,
      shipFriendSystemAddress,
      abi.encodeWithSignature(
        "shipIncreaseShipInventory(uint256,(uint32,uint32)[])",
        id, items
      )
    );
    if (!success) revertWithBytes(returnData);

  }

  function deductShipInventory(uint256 id, ItemIdQuantityPair[] memory items) internal {
    ResourceId shipFriendSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "ShipFriendSystem"
    });

    (address shipFriendSystemAddress, ) = Systems.get(shipFriendSystemId);
    (bool success, bytes memory returnData) = WorldContextProviderLib.delegatecallWithContext(
      WorldContextConsumerLib._msgSender(),
      0,
      shipFriendSystemAddress,
      abi.encodeWithSignature(
        "shipDeductShipInventory(uint256,(uint32,uint32)[])",
        id, items
      )
    );
    if (!success) revertWithBytes(returnData);

  }

}
