// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { SkillProcess, SkillProcessData } from "../codegen/index.sol";
import { ProductionProcessStarted, ShipProductionProcessStarted, CreationProcessStarted } from "./SkillProcessEvents.sol";
import { SkillProcessStartProductionLogic } from "./SkillProcessStartProductionLogic.sol";
import { SkillProcessStartShipProductionLogic } from "./SkillProcessStartShipProductionLogic.sol";
import { SkillProcessStartCreationLogic } from "./SkillProcessStartCreationLogic.sol";
import { ItemIdQuantityPair } from "./ItemIdQuantityPair.sol";

library SkillProcessAggregateLib {
  event ProductionProcessStartedEvent(uint8 indexed skillType, uint256 indexed playerId, uint8 indexed sequenceNumber, uint32 batchSize, uint32 itemId, uint64 energyCost, uint64 startedAt, uint64 creationTime);

  event ShipProductionProcessStartedEvent(uint8 indexed skillType, uint256 indexed playerId, uint8 indexed sequenceNumber, uint32 itemId, uint64 energyCost, uint64 startedAt, uint64 creationTime);

  event CreationProcessStartedEvent(uint8 indexed skillType, uint256 indexed playerId, uint8 indexed sequenceNumber, uint32 batchSize, uint32 itemId, uint64 energyCost, uint32 resourceCost, uint64 startedAt, uint64 creationTime);

  function startProduction(uint8 skillType, uint256 playerId, uint8 sequenceNumber, uint32 batchSize, uint32 itemId) internal {
    SkillProcessData memory skillProcessData = SkillProcess.get(skillType, playerId, sequenceNumber);
    require(
      !(skillProcessData.itemId == uint32(0) && skillProcessData.startedAt == uint64(0) && skillProcessData.creationTime == uint64(0) && skillProcessData.completed == false && skillProcessData.endedAt == uint64(0) && skillProcessData.batchSize == uint32(0)),
      "SkillProcess does not exist"
    );
    ProductionProcessStarted memory productionProcessStarted = SkillProcessStartProductionLogic.verify(skillType, playerId, sequenceNumber, batchSize, itemId, skillProcessData);
    productionProcessStarted.skillType = skillType;
    productionProcessStarted.playerId = playerId;
    productionProcessStarted.sequenceNumber = sequenceNumber;
    emit ProductionProcessStartedEvent(productionProcessStarted.skillType, productionProcessStarted.playerId, productionProcessStarted.sequenceNumber, productionProcessStarted.batchSize, productionProcessStarted.itemId, productionProcessStarted.energyCost, productionProcessStarted.startedAt, productionProcessStarted.creationTime);
    SkillProcessData memory updatedSkillProcessData = SkillProcessStartProductionLogic.mutate(productionProcessStarted, skillProcessData);
    SkillProcess.set(skillType, playerId, sequenceNumber, updatedSkillProcessData);
  }

  function startShipProduction(uint8 skillType, uint256 playerId, uint8 sequenceNumber, ItemIdQuantityPair[] memory productionMaterials, uint32 itemId) internal {
    SkillProcessData memory skillProcessData = SkillProcess.get(skillType, playerId, sequenceNumber);
    require(
      !(skillProcessData.itemId == uint32(0) && skillProcessData.startedAt == uint64(0) && skillProcessData.creationTime == uint64(0) && skillProcessData.completed == false && skillProcessData.endedAt == uint64(0) && skillProcessData.batchSize == uint32(0)),
      "SkillProcess does not exist"
    );
    ShipProductionProcessStarted memory shipProductionProcessStarted = SkillProcessStartShipProductionLogic.verify(skillType, playerId, sequenceNumber, productionMaterials, itemId, skillProcessData);
    shipProductionProcessStarted.skillType = skillType;
    shipProductionProcessStarted.playerId = playerId;
    shipProductionProcessStarted.sequenceNumber = sequenceNumber;
    emit ShipProductionProcessStartedEvent(shipProductionProcessStarted.skillType, shipProductionProcessStarted.playerId, shipProductionProcessStarted.sequenceNumber, shipProductionProcessStarted.itemId, shipProductionProcessStarted.energyCost, shipProductionProcessStarted.startedAt, shipProductionProcessStarted.creationTime);
    SkillProcessData memory updatedSkillProcessData = SkillProcessStartShipProductionLogic.mutate(shipProductionProcessStarted, skillProcessData);
    SkillProcess.set(skillType, playerId, sequenceNumber, updatedSkillProcessData);
  }

  function startCreation(uint8 skillType, uint256 playerId, uint8 sequenceNumber, uint32 batchSize, uint32 itemId) internal {
    SkillProcessData memory skillProcessData = SkillProcess.get(skillType, playerId, sequenceNumber);
    require(
      !(skillProcessData.itemId == uint32(0) && skillProcessData.startedAt == uint64(0) && skillProcessData.creationTime == uint64(0) && skillProcessData.completed == false && skillProcessData.endedAt == uint64(0) && skillProcessData.batchSize == uint32(0)),
      "SkillProcess does not exist"
    );
    CreationProcessStarted memory creationProcessStarted = SkillProcessStartCreationLogic.verify(skillType, playerId, sequenceNumber, batchSize, itemId, skillProcessData);
    creationProcessStarted.skillType = skillType;
    creationProcessStarted.playerId = playerId;
    creationProcessStarted.sequenceNumber = sequenceNumber;
    emit CreationProcessStartedEvent(creationProcessStarted.skillType, creationProcessStarted.playerId, creationProcessStarted.sequenceNumber, creationProcessStarted.batchSize, creationProcessStarted.itemId, creationProcessStarted.energyCost, creationProcessStarted.resourceCost, creationProcessStarted.startedAt, creationProcessStarted.creationTime);
    SkillProcessData memory updatedSkillProcessData = SkillProcessStartCreationLogic.mutate(creationProcessStarted, skillProcessData);
    SkillProcess.set(skillType, playerId, sequenceNumber, updatedSkillProcessData);
  }

}
