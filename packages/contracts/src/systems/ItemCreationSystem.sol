// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { ItemCreation, ItemCreationData } from "../codegen/index.sol";
import { ItemCreationCreated, ItemCreationUpdated } from "./ItemCreationEvents.sol";
import { ItemCreationCreateLogic } from "./ItemCreationCreateLogic.sol";
import { ItemCreationUpdateLogic } from "./ItemCreationUpdateLogic.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";

contract ItemCreationSystem is System {
  using WorldResourceIdInstance for ResourceId;

  error RequireNamespaceOwner(address caller, address requiredOwner);
  error ItemCreationAlreadyExists(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId);
  error ItemCreationDoesNotExist(uint8 itemCreationIdSkillType, uint32 itemCreationIdItemId);

  event ItemCreationCreatedEvent(uint8 indexed skillType, uint32 indexed itemId, uint16 requirementsLevel, uint32 baseQuantity, uint32 baseExperience, uint64 baseCreationTime, uint64 energyCost, uint16 successRate, uint32 resourceCost);

  event ItemCreationUpdatedEvent(uint8 indexed skillType, uint32 indexed itemId, uint16 requirementsLevel, uint32 baseQuantity, uint32 baseExperience, uint64 baseCreationTime, uint64 energyCost, uint16 successRate, uint32 resourceCost);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function itemCreationCreate(uint8 skillType, uint32 itemId, uint16 requirementsLevel, uint32 baseQuantity, uint32 baseExperience, uint64 baseCreationTime, uint64 energyCost, uint16 successRate, uint32 resourceCost) public {
    _requireNamespaceOwner();
    ItemCreationData memory itemCreationData = ItemCreation.get(skillType, itemId);
    if (!(itemCreationData.requirementsLevel == uint16(0) && itemCreationData.baseQuantity == uint32(0) && itemCreationData.baseExperience == uint32(0) && itemCreationData.baseCreationTime == uint64(0) && itemCreationData.energyCost == uint64(0) && itemCreationData.successRate == uint16(0) && itemCreationData.resourceCost == uint32(0))) {
      revert ItemCreationAlreadyExists(skillType, itemId);
    }
    ItemCreationCreated memory itemCreationCreated = ItemCreationCreateLogic.verify(skillType, itemId, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, resourceCost);
    itemCreationCreated.skillType = skillType;
    itemCreationCreated.itemId = itemId;
    emit ItemCreationCreatedEvent(itemCreationCreated.skillType, itemCreationCreated.itemId, itemCreationCreated.requirementsLevel, itemCreationCreated.baseQuantity, itemCreationCreated.baseExperience, itemCreationCreated.baseCreationTime, itemCreationCreated.energyCost, itemCreationCreated.successRate, itemCreationCreated.resourceCost);
    ItemCreationData memory newItemCreationData = ItemCreationCreateLogic.mutate(itemCreationCreated);
    ItemCreation.set(skillType, itemId, newItemCreationData);
  }

  function itemCreationUpdate(uint8 skillType, uint32 itemId, uint16 requirementsLevel, uint32 baseQuantity, uint32 baseExperience, uint64 baseCreationTime, uint64 energyCost, uint16 successRate, uint32 resourceCost) public {
    _requireNamespaceOwner();
    ItemCreationData memory itemCreationData = ItemCreation.get(skillType, itemId);
    if (itemCreationData.requirementsLevel == uint16(0) && itemCreationData.baseQuantity == uint32(0) && itemCreationData.baseExperience == uint32(0) && itemCreationData.baseCreationTime == uint64(0) && itemCreationData.energyCost == uint64(0) && itemCreationData.successRate == uint16(0) && itemCreationData.resourceCost == uint32(0)) {
      revert ItemCreationDoesNotExist(skillType, itemId);
    }
    ItemCreationUpdated memory itemCreationUpdated = ItemCreationUpdateLogic.verify(skillType, itemId, requirementsLevel, baseQuantity, baseExperience, baseCreationTime, energyCost, successRate, resourceCost, itemCreationData);
    itemCreationUpdated.skillType = skillType;
    itemCreationUpdated.itemId = itemId;
    emit ItemCreationUpdatedEvent(itemCreationUpdated.skillType, itemCreationUpdated.itemId, itemCreationUpdated.requirementsLevel, itemCreationUpdated.baseQuantity, itemCreationUpdated.baseExperience, itemCreationUpdated.baseCreationTime, itemCreationUpdated.energyCost, itemCreationUpdated.successRate, itemCreationUpdated.resourceCost);
    ItemCreationData memory updatedItemCreationData = ItemCreationUpdateLogic.mutate(itemCreationUpdated, itemCreationData);
    ItemCreation.set(skillType, itemId, updatedItemCreationData);
  }

}
