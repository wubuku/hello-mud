// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { Player, PlayerData, PlayerIdGenerator } from "../codegen/index.sol";
import { PlayerCreated, IslandClaimed, PlayerAirdropped, PlayerIslandResourcesGathered } from "./PlayerEvents.sol";
import { PlayerCreateLogic } from "./PlayerCreateLogic.sol";
import { PlayerClaimIslandLogic } from "./PlayerClaimIslandLogic.sol";
import { PlayerAirdropLogic } from "./PlayerAirdropLogic.sol";
import { PlayerGatherIslandResourcesLogic } from "./PlayerGatherIslandResourcesLogic.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";

contract PlayerSystem is System {
  using WorldResourceIdInstance for ResourceId;

  error RequireNamespaceOwner(address caller, address requiredOwner);
  error PlayerAlreadyExists(uint256 id);
  error PlayerDoesNotExist(uint256 id);

  event PlayerCreatedEvent(uint256 indexed id, string name, address owner);

  event IslandClaimedEvent(uint256 indexed id, uint32 coordinatesX, uint32 coordinatesY, uint64 claimedAt);

  event PlayerAirdroppedEvent(uint256 indexed id, uint32 itemId, uint32 quantity);

  event PlayerIslandResourcesGatheredEvent(uint256 indexed id);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function playerCreate(string memory name) public {
    uint256 id = PlayerIdGenerator.get() + 1;
    PlayerIdGenerator.set(id);
    PlayerData memory playerData = Player.get(id);
    if (!(playerData.owner == address(0) && playerData.level == uint16(0) && playerData.experience == uint32(0) && playerData.claimedIslandX == uint32(0) && playerData.claimedIslandY == uint32(0) && bytes(playerData.name).length == 0)) {
      revert PlayerAlreadyExists(id);
    }
    PlayerCreated memory playerCreated = PlayerCreateLogic.verify(id, name);
    playerCreated.id = id;
    emit PlayerCreatedEvent(playerCreated.id, playerCreated.name, playerCreated.owner);
    PlayerData memory newPlayerData = PlayerCreateLogic.mutate(playerCreated);
    Player.set(id, newPlayerData);
  }

  function playerClaimIsland(uint256 id, uint32 coordinatesX, uint32 coordinatesY) public {
    PlayerData memory playerData = Player.get(id);
    if (playerData.owner == address(0) && playerData.level == uint16(0) && playerData.experience == uint32(0) && playerData.claimedIslandX == uint32(0) && playerData.claimedIslandY == uint32(0) && bytes(playerData.name).length == 0) {
      revert PlayerDoesNotExist(id);
    }
    IslandClaimed memory islandClaimed = PlayerClaimIslandLogic.verify(id, coordinatesX, coordinatesY, playerData);
    islandClaimed.id = id;
    emit IslandClaimedEvent(islandClaimed.id, islandClaimed.coordinatesX, islandClaimed.coordinatesY, islandClaimed.claimedAt);
    PlayerData memory updatedPlayerData = PlayerClaimIslandLogic.mutate(islandClaimed, playerData);
    Player.set(id, updatedPlayerData);
  }

  function playerAirdrop(uint256 id, uint32 itemId, uint32 quantity) public {
    _requireNamespaceOwner();
    PlayerData memory playerData = Player.get(id);
    if (playerData.owner == address(0) && playerData.level == uint16(0) && playerData.experience == uint32(0) && playerData.claimedIslandX == uint32(0) && playerData.claimedIslandY == uint32(0) && bytes(playerData.name).length == 0) {
      revert PlayerDoesNotExist(id);
    }
    PlayerAirdropped memory playerAirdropped = PlayerAirdropLogic.verify(id, itemId, quantity, playerData);
    playerAirdropped.id = id;
    emit PlayerAirdroppedEvent(playerAirdropped.id, playerAirdropped.itemId, playerAirdropped.quantity);
    PlayerData memory updatedPlayerData = PlayerAirdropLogic.mutate(playerAirdropped, playerData);
    Player.set(id, updatedPlayerData);
  }

  function playerGatherIslandResources(uint256 id) public {
    PlayerData memory playerData = Player.get(id);
    if (playerData.owner == address(0) && playerData.level == uint16(0) && playerData.experience == uint32(0) && playerData.claimedIslandX == uint32(0) && playerData.claimedIslandY == uint32(0) && bytes(playerData.name).length == 0) {
      revert PlayerDoesNotExist(id);
    }
    PlayerIslandResourcesGathered memory playerIslandResourcesGathered = PlayerGatherIslandResourcesLogic.verify(id, playerData);
    playerIslandResourcesGathered.id = id;
    emit PlayerIslandResourcesGatheredEvent(playerIslandResourcesGathered.id);
    PlayerData memory updatedPlayerData = PlayerGatherIslandResourcesLogic.mutate(playerIslandResourcesGathered, playerData);
    Player.set(id, updatedPlayerData);
  }

}
