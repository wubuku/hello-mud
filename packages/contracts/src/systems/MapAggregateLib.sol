// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { Map, MapData } from "../codegen/index.sol";
import { MapIslandClaimed, IslandResourcesGathered } from "./MapEvents.sol";
import { MapClaimIslandLogic } from "./MapClaimIslandLogic.sol";
import { MapGatherIslandResourcesLogic } from "./MapGatherIslandResourcesLogic.sol";
import { ItemIdQuantityPair } from "./ItemIdQuantityPair.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";

library MapAggregateLib {
  using WorldResourceIdInstance for ResourceId;

  event MapIslandClaimedEvent(uint32 coordinatesX, uint32 coordinatesY, uint256 claimedBy, uint64 claimedAt);

  event IslandResourcesGatheredEvent(uint256 playerId, uint64 gatheredAt, uint32 coordinatesX, uint32 coordinatesY);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    require(_thisNamespaceOwner == WorldContextConsumerLib._msgSender(), "Require namespace owner");
  }

  function claimIsland(uint32 coordinatesX, uint32 coordinatesY, uint256 claimedBy, uint64 claimedAt) internal {
    MapData memory mapData = Map.get();
    require(
      !(mapData.existing == false && mapData.width == uint32(0) && mapData.height == uint32(0)),
      "Map does not exist"
    );
    MapIslandClaimed memory mapIslandClaimed = MapClaimIslandLogic.verify(coordinatesX, coordinatesY, claimedBy, claimedAt, mapData);
    emit MapIslandClaimedEvent(mapIslandClaimed.coordinatesX, mapIslandClaimed.coordinatesY, mapIslandClaimed.claimedBy, mapIslandClaimed.claimedAt);
    MapData memory updatedMapData = MapClaimIslandLogic.mutate(mapIslandClaimed, mapData);
    Map.set(updatedMapData);
  }

  function gatherIslandResources(uint256 playerId, uint32 coordinatesX, uint32 coordinatesY) internal returns (ItemIdQuantityPair[] memory) {
    MapData memory mapData = Map.get();
    require(
      !(mapData.existing == false && mapData.width == uint32(0) && mapData.height == uint32(0)),
      "Map does not exist"
    );
    IslandResourcesGathered memory islandResourcesGathered = MapGatherIslandResourcesLogic.verify(playerId, coordinatesX, coordinatesY, mapData);
    emit IslandResourcesGatheredEvent(islandResourcesGathered.playerId, islandResourcesGathered.gatheredAt, islandResourcesGathered.coordinatesX, islandResourcesGathered.coordinatesY);
    (ItemIdQuantityPair[] memory result, MapData memory updatedMapData) = MapGatherIslandResourcesLogic.mutate(islandResourcesGathered, mapData);
    Map.set(updatedMapData);
    return result;
  }

}
