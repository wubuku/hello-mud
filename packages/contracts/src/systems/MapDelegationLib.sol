// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ResourceId, WorldResourceIdLib } from "@latticexyz/world/src/WorldResourceId.sol";
import { RESOURCE_SYSTEM } from "@latticexyz/world/src/worldResourceTypes.sol";
import { IBaseWorld } from "@latticexyz/world/src/codegen/interfaces/IBaseWorld.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { ItemIdQuantityPair } from "./ItemIdQuantityPair.sol";

library MapDelegationLib {

  function addIsland(uint32 coordinatesX, uint32 coordinatesY, ItemIdQuantityPair[] memory resources) internal {
    ResourceId mapSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapFriendSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      mapSystemId,
      abi.encodeWithSignature(
        "mapAddIsland(uint32,uint32,(uint32,uint32)[])",
        coordinatesX, coordinatesY, resources
      )
    );

  }

  function claimIsland(uint32 coordinatesX, uint32 coordinatesY, uint256 claimedBy, uint64 claimedAt) internal {
    ResourceId mapSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapFriendSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      mapSystemId,
      abi.encodeWithSignature(
        "mapClaimIsland(uint32,uint32,uint256,uint64)",
        coordinatesX, coordinatesY, claimedBy, claimedAt
      )
    );

  }

  function gatherIslandResources(uint256 playerId, uint32 coordinatesX, uint32 coordinatesY) internal {
    ResourceId mapSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      mapSystemId,
      abi.encodeWithSignature(
        "mapGatherIslandResources(uint256,uint32,uint32)",
        playerId, coordinatesX, coordinatesY
      )
    );

  }

  function create(bool existing, uint32 width, uint32 height) internal {
    ResourceId mapSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      mapSystemId,
      abi.encodeWithSignature(
        "mapCreate(bool,uint32,uint32)",
        existing, width, height
      )
    );

  }

  function update(bool existing, uint32 width, uint32 height) internal {
    ResourceId mapSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      mapSystemId,
      abi.encodeWithSignature(
        "mapUpdate(bool,uint32,uint32)",
        existing, width, height
      )
    );

  }

}
