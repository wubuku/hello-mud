// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ResourceId, WorldResourceIdLib } from "@latticexyz/world/src/WorldResourceId.sol";
import { RESOURCE_SYSTEM } from "@latticexyz/world/src/worldResourceTypes.sol";
import { IBaseWorld } from "@latticexyz/world/src/codegen/interfaces/IBaseWorld.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { WorldContextProviderLib } from "@latticexyz/world/src/WorldContext.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ItemIdQuantityPair } from "./ItemIdQuantityPair.sol";

library MapDelegationLib {
  function addIsland(uint32 coordinatesX, uint32 coordinatesY, ItemIdQuantityPair[] memory resources) internal {
    ResourceId mapSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      mapSystemId,
      abi.encodeWithSignature("mapAddIsland(uint32,uint32,(uint32,uint32)[])", coordinatesX, coordinatesY, resources)
    );
  }

  function claimIsland(uint32 coordinatesX, uint32 coordinatesY, uint256 claimedBy, uint64 claimedAt) internal {
    ResourceId mapFriendSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapFriendSystem"
    });
    (address mapFriendSystemAddress, ) = Systems.get(mapFriendSystemId);
    (bool success, bytes memory returnData) = WorldContextProviderLib.delegatecallWithContext(
      WorldContextConsumerLib._msgSender(),
      0, // msgValue
      mapFriendSystemAddress,
      abi.encodeWithSignature(
        "mapClaimIsland(uint32,uint32,uint256,uint64)",
        coordinatesX,
        coordinatesY,
        claimedBy,
        claimedAt
      )
    );
    if (!success) revertWithBytes(returnData);
  }

  function gatherIslandResources(
    uint256 playerId,
    uint32 coordinatesX,
    uint32 coordinatesY
  ) internal returns (ItemIdQuantityPair[] memory) {
    ResourceId mapFriendSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapFriendSystem"
    });
    (address mapFriendSystemAddress, ) = Systems.get(mapFriendSystemId);
    (bool success, bytes memory returnData) = WorldContextProviderLib.delegatecallWithContext(
      WorldContextConsumerLib._msgSender(),
      0, // msgValue
      mapFriendSystemAddress,
      abi.encodeWithSignature("mapGatherIslandResources(uint256,uint32,uint32)", playerId, coordinatesX, coordinatesY)
    );
    if (!success) revertWithBytes(returnData);
    return abi.decode(returnData, (ItemIdQuantityPair[]));
  }

  function create(bool existing, uint32 width, uint32 height) internal {
    ResourceId mapSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      mapSystemId,
      abi.encodeWithSignature("mapCreate(bool,uint32,uint32)", existing, width, height)
    );
  }

  function update(bool existing, uint32 width, uint32 height) internal {
    ResourceId mapSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "MapSystem"
    });

    IBaseWorld world = IBaseWorld(WorldContextConsumerLib._world());
    world.callFrom(
      WorldContextConsumerLib._msgSender(),
      mapSystemId,
      abi.encodeWithSignature("mapUpdate(bool,uint32,uint32)", existing, width, height)
    );
  }
}
