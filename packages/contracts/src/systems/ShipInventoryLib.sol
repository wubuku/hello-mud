// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ShipInventory, ShipInventoryCount, ShipInventoryData } from "../codegen/index.sol";

library ShipInventoryLib {
  function addInventory(uint256 shipId, ShipInventoryData memory inventory) internal {
    uint64 count = ShipInventoryCount.get(shipId);
    ShipInventory.set(shipId, count, inventory);
    ShipInventoryCount.set(shipId, count + 1);
  }

  function removeLastInventory(uint256 shipId) internal {
    uint64 count = ShipInventoryCount.get(shipId);
    require(count > 0, "No inventory_ to remove");
    ShipInventoryCount.set(shipId, count - 1);
    ShipInventory.deleteRecord(shipId, count - 1);
  }

  function insertInventory(uint256 shipId, uint64 index, ShipInventoryData memory inventory) internal {
    uint64 count = ShipInventoryCount.get(shipId);
    require(index <= count, "Invalid index");

    for (uint64 i = count; i > index; i--) {
      ShipInventory.set(shipId, i, ShipInventory.get(shipId, i - 1));
    }

    ShipInventory.set(shipId, index, inventory);
    ShipInventoryCount.set(shipId, count + 1);
  }

  function removeInventory(uint256 shipId, uint64 index) internal {
    uint64 count = ShipInventoryCount.get(shipId);
    require(index < count, "Invalid index");

    for (uint64 i = index; i < count - 1; i++) {
      ShipInventory.set(shipId, i, ShipInventory.get(shipId, i + 1));
    }

    ShipInventory.deleteRecord(shipId, count - 1);
    ShipInventoryCount.set(shipId, count - 1);
  }

  function updateInventory(uint256 shipId, uint64 index, ShipInventoryData memory inventory) internal {
    uint64 count = ShipInventoryCount.get(shipId);
    require(index < count, "Invalid index");
    ShipInventory.set(shipId, index, inventory);
  }

  function truncateInventory(uint256 shipId, uint64 newCount) internal {
    uint64 currentCount = ShipInventoryCount.get(shipId);
    require(newCount <= currentCount, "New count must be less than or equal to current count");
    for (uint64 i = newCount; i < currentCount; i++) {
      ShipInventory.deleteRecord(shipId, i);
    }
    ShipInventoryCount.set(shipId, newCount);
  }

  function getAllInventory_(uint256 shipId) internal view returns (ShipInventoryData[] memory) {
    uint64 count = ShipInventoryCount.get(shipId);
    ShipInventoryData[] memory inventory_ = new ShipInventoryData[](count);
    for (uint64 i = 0; i < count; i++) {
      inventory_[i] = ShipInventory.get(shipId, i);
    }
    return inventory_;
  }

  function getInventoryCount(uint256 shipId) internal view returns (uint64) {
    return ShipInventoryCount.get(shipId);
  }

  function getInventoryByIndex(uint256 shipId, uint64 index) internal view returns (ShipInventoryData memory) {
    return ShipInventory.get(shipId, index);
  }
}
