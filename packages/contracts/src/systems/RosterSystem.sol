// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { Roster, RosterData } from "../codegen/index.sol";
import { RosterShipsPositionAdjusted } from "./RosterEvents.sol";
import { RosterAdjustShipsPositionLogic } from "./RosterAdjustShipsPositionLogic.sol";

contract RosterSystem is System {
  event RosterShipsPositionAdjustedEvent(uint256 indexed playerId, uint32 indexed sequenceNumber, uint64[] positions, uint256[] shipIds);

  function rosterAdjustShipsPosition(uint256 playerId, uint32 sequenceNumber, uint64[] memory positions, uint256[] memory shipIds) public {
    RosterData memory rosterData = Roster.get(playerId, sequenceNumber);
    require(
      !(rosterData.status == 0 && rosterData.speed == 0 && rosterData.coordinatesUpdatedAt == 0 && rosterData.sailDuration == 0 && rosterData.setSailAt == 0 && rosterData.shipBattleId == 0 && rosterData.environmentOwned == false && rosterData.baseExperience == 0 && rosterData.shipIds.length == 0),
      "Roster does not exist"
    );
    RosterShipsPositionAdjusted memory rosterShipsPositionAdjusted = RosterAdjustShipsPositionLogic.verify(playerId, sequenceNumber, positions, shipIds, rosterData);
    rosterShipsPositionAdjusted.playerId = playerId;
    rosterShipsPositionAdjusted.sequenceNumber = sequenceNumber;
    emit RosterShipsPositionAdjustedEvent(rosterShipsPositionAdjusted.playerId, rosterShipsPositionAdjusted.sequenceNumber, rosterShipsPositionAdjusted.positions, rosterShipsPositionAdjusted.shipIds);
    RosterData memory updatedRosterData = RosterAdjustShipsPositionLogic.mutate(rosterShipsPositionAdjusted, rosterData);
    Roster.set(playerId, sequenceNumber, updatedRosterData);
  }

}
