// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { Roster, RosterData } from "../codegen/index.sol";
import { RosterShipTransferred, RosterMultiShipsTransferred } from "./RosterEvents.sol";
import { RosterTransferShipLogic } from "./RosterTransferShipLogic.sol";
import { RosterTransferMultiShipsLogic } from "./RosterTransferMultiShipsLogic.sol";
import { TwoRostersLocationUpdateParams } from "./TwoRostersLocationUpdateParams.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";
import { IAppSystemErrors } from "./IAppSystemErrors.sol";

contract RosterShipTransferSystem is System, IAppSystemErrors {
  using WorldResourceIdInstance for ResourceId;

  event RosterShipTransferredEvent(uint256 indexed playerId, uint32 indexed sequenceNumber, uint256 shipId, uint256 toRosterPlayerId, uint32 toRosterSequenceNumber, uint64 toPosition, TwoRostersLocationUpdateParams locationUpdateParams, uint64 transferredAt);

  event RosterMultiShipsTransferredEvent(uint256 indexed playerId, uint32 indexed sequenceNumber, uint256[] shipIds, uint256 toRosterPlayerId, uint32 toRosterSequenceNumber, uint64 toPosition, uint64 transferredAt);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function rosterTransferShip(uint256 playerId, uint32 sequenceNumber, uint256 shipId, uint256 toRosterPlayerId, uint32 toRosterSequenceNumber, uint64 toPosition, TwoRostersLocationUpdateParams memory locationUpdateParams) public {
    RosterData memory rosterData = Roster.get(playerId, sequenceNumber);
    if (rosterData.status == uint8(0) && rosterData.speed == uint32(0) && rosterData.baseExperience == uint32(0) && rosterData.environmentOwned == false && rosterData.updatedCoordinatesX == uint32(0) && rosterData.updatedCoordinatesY == uint32(0) && rosterData.coordinatesUpdatedAt == uint64(0) && rosterData.targetCoordinatesX == uint32(0) && rosterData.targetCoordinatesY == uint32(0) && rosterData.originCoordinatesX == uint32(0) && rosterData.originCoordinatesY == uint32(0) && rosterData.sailDuration == uint64(0) && rosterData.setSailAt == uint64(0) && rosterData.currentSailSegment == uint16(0) && rosterData.shipBattleId == uint256(0) && rosterData.shipIds.length == 0) {
      revert RosterDoesNotExist(playerId, sequenceNumber);
    }
    RosterShipTransferred memory rosterShipTransferred = RosterTransferShipLogic.verify(playerId, sequenceNumber, shipId, toRosterPlayerId, toRosterSequenceNumber, toPosition, locationUpdateParams, rosterData);
    rosterShipTransferred.playerId = playerId;
    rosterShipTransferred.sequenceNumber = sequenceNumber;
    emit RosterShipTransferredEvent(rosterShipTransferred.playerId, rosterShipTransferred.sequenceNumber, rosterShipTransferred.shipId, rosterShipTransferred.toRosterPlayerId, rosterShipTransferred.toRosterSequenceNumber, rosterShipTransferred.toPosition, rosterShipTransferred.locationUpdateParams, rosterShipTransferred.transferredAt);
    RosterData memory updatedRosterData = RosterTransferShipLogic.mutate(rosterShipTransferred, rosterData);
    Roster.set(playerId, sequenceNumber, updatedRosterData);
  }

  function rosterTransferMultiShips(uint256 playerId, uint32 sequenceNumber, uint256[] memory shipIds, uint256 toRosterPlayerId, uint32 toRosterSequenceNumber, uint64 toPosition) public {
    RosterData memory rosterData = Roster.get(playerId, sequenceNumber);
    if (rosterData.status == uint8(0) && rosterData.speed == uint32(0) && rosterData.baseExperience == uint32(0) && rosterData.environmentOwned == false && rosterData.updatedCoordinatesX == uint32(0) && rosterData.updatedCoordinatesY == uint32(0) && rosterData.coordinatesUpdatedAt == uint64(0) && rosterData.targetCoordinatesX == uint32(0) && rosterData.targetCoordinatesY == uint32(0) && rosterData.originCoordinatesX == uint32(0) && rosterData.originCoordinatesY == uint32(0) && rosterData.sailDuration == uint64(0) && rosterData.setSailAt == uint64(0) && rosterData.currentSailSegment == uint16(0) && rosterData.shipBattleId == uint256(0) && rosterData.shipIds.length == 0) {
      revert RosterDoesNotExist(playerId, sequenceNumber);
    }
    RosterMultiShipsTransferred memory rosterMultiShipsTransferred = RosterTransferMultiShipsLogic.verify(playerId, sequenceNumber, shipIds, toRosterPlayerId, toRosterSequenceNumber, toPosition, rosterData);
    rosterMultiShipsTransferred.playerId = playerId;
    rosterMultiShipsTransferred.sequenceNumber = sequenceNumber;
    emit RosterMultiShipsTransferredEvent(rosterMultiShipsTransferred.playerId, rosterMultiShipsTransferred.sequenceNumber, rosterMultiShipsTransferred.shipIds, rosterMultiShipsTransferred.toRosterPlayerId, rosterMultiShipsTransferred.toRosterSequenceNumber, rosterMultiShipsTransferred.toPosition, rosterMultiShipsTransferred.transferredAt);
    RosterData memory updatedRosterData = RosterTransferMultiShipsLogic.mutate(rosterMultiShipsTransferred, rosterData);
    Roster.set(playerId, sequenceNumber, updatedRosterData);
  }

}
