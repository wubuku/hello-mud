// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { IslandRenewableItem } from "../codegen/index.sol";
import { IslandRenewableItemCreated, IslandRenewableItemUpdated } from "./IslandRenewableItemEvents.sol";
import { IslandRenewableItemCreateLogic } from "./IslandRenewableItemCreateLogic.sol";
import { IslandRenewableItemUpdateLogic } from "./IslandRenewableItemUpdateLogic.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";
import { IAppSystemErrors } from "./IAppSystemErrors.sol";

contract IslandRenewableItemSystem is System, IAppSystemErrors {
  using WorldResourceIdInstance for ResourceId;

  event IslandRenewableItemCreatedEvent(uint32 indexed itemId, uint32 quantityWeight);

  event IslandRenewableItemUpdatedEvent(uint32 indexed itemId, uint32 quantityWeight);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function islandRenewableItemCreate(uint32 itemId, uint32 quantityWeight) public {
    _requireNamespaceOwner();
    uint32 __quantityWeight = IslandRenewableItem.get(itemId);
    if (!(__quantityWeight == uint32(0))) {
      revert IslandRenewableItemAlreadyExists(itemId);
    }
    IslandRenewableItemCreated memory islandRenewableItemCreated = IslandRenewableItemCreateLogic.verify(itemId, quantityWeight);
    islandRenewableItemCreated.itemId = itemId;
    emit IslandRenewableItemCreatedEvent(islandRenewableItemCreated.itemId, islandRenewableItemCreated.quantityWeight);
    uint32 new__QuantityWeight = IslandRenewableItemCreateLogic.mutate(islandRenewableItemCreated);
    IslandRenewableItem.set(itemId, new__QuantityWeight);
  }

  function islandRenewableItemUpdate(uint32 itemId, uint32 quantityWeight) public {
    _requireNamespaceOwner();
    uint32 __quantityWeight = IslandRenewableItem.get(itemId);
    if (__quantityWeight == uint32(0)) {
      revert IslandRenewableItemDoesNotExist(itemId);
    }
    IslandRenewableItemUpdated memory islandRenewableItemUpdated = IslandRenewableItemUpdateLogic.verify(itemId, quantityWeight, __quantityWeight);
    islandRenewableItemUpdated.itemId = itemId;
    emit IslandRenewableItemUpdatedEvent(islandRenewableItemUpdated.itemId, islandRenewableItemUpdated.quantityWeight);
    uint32 updated__QuantityWeight = IslandRenewableItemUpdateLogic.mutate(islandRenewableItemUpdated, __quantityWeight);
    IslandRenewableItem.set(itemId, updated__QuantityWeight);
  }

}
