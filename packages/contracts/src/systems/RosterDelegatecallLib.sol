// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ResourceId, WorldResourceIdLib } from "@latticexyz/world/src/WorldResourceId.sol";
import { RESOURCE_SYSTEM } from "@latticexyz/world/src/worldResourceTypes.sol";
import { IBaseWorld } from "@latticexyz/world/src/codegen/interfaces/IBaseWorld.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { WorldContextProviderLib } from "@latticexyz/world/src/WorldContext.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { Coordinates } from "./Coordinates.sol";
import { UpdateLocationParams } from "./UpdateLocationParams.sol";
import { RosterCleanUpBattleResult } from "./RosterCleanUpBattleResult.sol";

library RosterDelegatecallLib {
  function create(
    uint256 playerId,
    uint32 sequenceNumber,
    uint32 coordinatesX,
    uint32 coordinatesY
  ) internal returns (uint256, uint32) {
    ResourceId rosterFriendSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterFriendSyst" // NOTE: Only the first 16 characters are used. Original: "RosterFriendSystem"
    });

    (address rosterFriendSystemAddress, ) = Systems.get(rosterFriendSystemId);
    (bool success, bytes memory returnData) = WorldContextProviderLib.delegatecallWithContext(
      WorldContextConsumerLib._msgSender(),
      0,
      rosterFriendSystemAddress,
      abi.encodeWithSignature(
        "rosterCreate(uint256,uint32,uint32,uint32)",
        playerId,
        sequenceNumber,
        coordinatesX,
        coordinatesY
      )
    );
    if (!success) revertWithBytes(returnData);

    return abi.decode(returnData, (uint256, uint32));
  }

  function addShip(uint256 playerId, uint32 sequenceNumber, uint256 shipId, uint64 position) internal {
    ResourceId rosterFriendSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterFriendSyst" // NOTE: Only the first 16 characters are used. Original: "RosterFriendSystem"
    });

    (address rosterFriendSystemAddress, ) = Systems.get(rosterFriendSystemId);
    (bool success, bytes memory returnData) = WorldContextProviderLib.delegatecallWithContext(
      WorldContextConsumerLib._msgSender(),
      0,
      rosterFriendSystemAddress,
      abi.encodeWithSignature(
        "rosterAddShip(uint256,uint32,uint256,uint64)",
        playerId,
        sequenceNumber,
        shipId,
        position
      )
    );
    if (!success) revertWithBytes(returnData);
  }

  function setSail(
    uint256 playerId,
    uint32 sequenceNumber,
    uint32 targetCoordinatesX,
    uint32 targetCoordinatesY,
    uint64 sailDuration,
    UpdateLocationParams memory updateLocationParams,
    Coordinates[] memory intermediatePoints
  ) internal {
    ResourceId rosterSailingSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterSailingSys" // NOTE: Only the first 16 characters are used. Original: "RosterSailingSystem"
    });

    (address rosterSailingSystemAddress, ) = Systems.get(rosterSailingSystemId);
    (bool success, bytes memory returnData) = WorldContextProviderLib.delegatecallWithContext(
      WorldContextConsumerLib._msgSender(),
      0,
      rosterSailingSystemAddress,
      abi.encodeWithSignature(
        "rosterSetSail(uint256,uint32,uint32,uint32,uint64,((uint32,uint32),uint16,uint64),(uint32,uint32)[])",
        playerId,
        sequenceNumber,
        targetCoordinatesX,
        targetCoordinatesY,
        sailDuration,
        updateLocationParams,
        intermediatePoints
      )
    );
    if (!success) revertWithBytes(returnData);
  }

  function updateLocation(
    uint256 playerId,
    uint32 sequenceNumber,
    UpdateLocationParams memory updateLocationParams
  ) internal {
    ResourceId rosterSailingSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterSailingSys" // NOTE: Only the first 16 characters are used. Original: "RosterSailingSystem"
    });

    (address rosterSailingSystemAddress, ) = Systems.get(rosterSailingSystemId);
    (bool success, bytes memory returnData) = WorldContextProviderLib.delegatecallWithContext(
      WorldContextConsumerLib._msgSender(),
      0,
      rosterSailingSystemAddress,
      abi.encodeWithSignature(
        "rosterUpdateLocation(uint256,uint32,((uint32,uint32),uint16,uint64))",
        playerId,
        sequenceNumber,
        updateLocationParams
      )
    );
    if (!success) revertWithBytes(returnData);
  }

  function cleanUpBattleDestroyedShips(
    uint256 playerId,
    uint32 sequenceNumber,
    uint256 loserRosterIdPlayerId,
    uint32 loserRosterIdSequenceNumber,
    uint8 choice
  ) internal returns (RosterCleanUpBattleResult memory) {
    ResourceId rosterCleaningSystemId = WorldResourceIdLib.encode({
      typeId: RESOURCE_SYSTEM,
      namespace: "app",
      name: "RosterCleaningSy" // NOTE: Only the first 16 characters are used. Original: "RosterCleaningSystem"
    });

    (address rosterCleaningSystemAddress, ) = Systems.get(rosterCleaningSystemId);
    (bool success, bytes memory returnData) = WorldContextProviderLib.delegatecallWithContext(
      WorldContextConsumerLib._msgSender(),
      0,
      rosterCleaningSystemAddress,
      abi.encodeWithSignature(
        "rosterCleanUpBattleDestroyedShips(uint256,uint32,uint256,uint32,uint8)",
        playerId,
        sequenceNumber,
        loserRosterIdPlayerId,
        loserRosterIdSequenceNumber,
        choice
      )
    );
    if (!success) revertWithBytes(returnData);

    return abi.decode(returnData, (RosterCleanUpBattleResult));
  }
}
