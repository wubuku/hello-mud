// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { Player, PlayerData, PlayerIdGenerator } from "../codegen/index.sol";
import { PlayerItemsDeducted, PlayerXpAndItemsIncreased } from "./PlayerEvents.sol";
import { PlayerDeductItemsLogic } from "./PlayerDeductItemsLogic.sol";
import { PlayerIncreaseExperienceAndItemsLogic } from "./PlayerIncreaseExperienceAndItemsLogic.sol";
import { ItemIdQuantityPair } from "./ItemIdQuantityPair.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";

contract PlayerFriendSystem is System {
  using WorldResourceIdInstance for ResourceId;

  event PlayerItemsDeductedEvent(uint256 indexed id);

  event PlayerXpAndItemsIncreasedEvent(uint256 indexed id, uint32 experienceGained, uint16 newLevel);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    require(_thisNamespaceOwner == _msgSender(), "Require namespace owner");
  }

  function playerDeductItems(uint256 id, ItemIdQuantityPair[] memory items) public {
    PlayerData memory playerData = Player.get(id);
    require(
      !(playerData.owner == address(0) && playerData.level == uint16(0) && playerData.experience == uint32(0) && playerData.claimedIslandX == uint32(0) && playerData.claimedIslandY == uint32(0) && bytes(playerData.name).length == 0),
      "Player does not exist"
    );
    PlayerItemsDeducted memory playerItemsDeducted = PlayerDeductItemsLogic.verify(id, items, playerData);
    playerItemsDeducted.id = id;
    emit PlayerItemsDeductedEvent(playerItemsDeducted.id);
    PlayerData memory updatedPlayerData = PlayerDeductItemsLogic.mutate(playerItemsDeducted, playerData);
    Player.set(id, updatedPlayerData);
  }

  function playerIncreaseExperienceAndItems(uint256 id, uint32 experienceGained, ItemIdQuantityPair[] memory items, uint16 newLevel) public {
    PlayerData memory playerData = Player.get(id);
    require(
      !(playerData.owner == address(0) && playerData.level == uint16(0) && playerData.experience == uint32(0) && playerData.claimedIslandX == uint32(0) && playerData.claimedIslandY == uint32(0) && bytes(playerData.name).length == 0),
      "Player does not exist"
    );
    PlayerXpAndItemsIncreased memory playerXpAndItemsIncreased = PlayerIncreaseExperienceAndItemsLogic.verify(id, experienceGained, items, newLevel, playerData);
    playerXpAndItemsIncreased.id = id;
    emit PlayerXpAndItemsIncreasedEvent(playerXpAndItemsIncreased.id, playerXpAndItemsIncreased.experienceGained, playerXpAndItemsIncreased.newLevel);
    PlayerData memory updatedPlayerData = PlayerIncreaseExperienceAndItemsLogic.mutate(playerXpAndItemsIncreased, playerData);
    Player.set(id, updatedPlayerData);
  }

}
