// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { Map, MapData } from "../codegen/index.sol";
import { MapCreated, MapUpdated, IslandAdded, MultiIslandsAdded } from "./MapEvents.sol";
import { MapCreateLogic } from "./MapCreateLogic.sol";
import { MapUpdateLogic } from "./MapUpdateLogic.sol";
import { MapAddIslandLogic } from "./MapAddIslandLogic.sol";
import { MapAddMultiIslandsLogic } from "./MapAddMultiIslandsLogic.sol";
import { ItemIdQuantityPair } from "./ItemIdQuantityPair.sol";
import { Coordinates } from "./Coordinates.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";
import { IAppSystemErrors } from "./IAppSystemErrors.sol";

contract MapSystem is System, IAppSystemErrors {
  using WorldResourceIdInstance for ResourceId;

  event MapCreatedEvent(bool existing, bool islandClaimWhitelistEnabled, uint32 islandResourceRenewalQuantity, uint64 islandResourceRenewalTime, uint32[] islandRenewableItemIds);

  event MapUpdatedEvent(bool existing, bool islandClaimWhitelistEnabled, uint32 islandResourceRenewalQuantity, uint64 islandResourceRenewalTime, uint32[] islandRenewableItemIds);

  event IslandAddedEvent(uint32 coordinatesX, uint32 coordinatesY);

  event MultiIslandsAddedEvent(uint32[] resourceItemIds, uint32 resourceSubtotal);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function mapCreate(bool existing, bool islandClaimWhitelistEnabled, uint32 islandResourceRenewalQuantity, uint64 islandResourceRenewalTime, uint32[] memory islandRenewableItemIds) public {
    _requireNamespaceOwner();
    MapData memory mapData = Map.get();
    if (!(mapData.existing == false && mapData.islandClaimWhitelistEnabled == false && mapData.islandResourceRenewalQuantity == uint32(0) && mapData.islandResourceRenewalTime == uint64(0) && mapData.islandRenewableItemIds.length == 0)) {
      revert MapAlreadyExists();
    }
    MapCreated memory mapCreated = MapCreateLogic.verify(existing, islandClaimWhitelistEnabled, islandResourceRenewalQuantity, islandResourceRenewalTime, islandRenewableItemIds);
    emit MapCreatedEvent(mapCreated.existing, mapCreated.islandClaimWhitelistEnabled, mapCreated.islandResourceRenewalQuantity, mapCreated.islandResourceRenewalTime, mapCreated.islandRenewableItemIds);
    MapData memory newMapData = MapCreateLogic.mutate(mapCreated);
    Map.set(newMapData);
  }

  function mapUpdate(bool existing, bool islandClaimWhitelistEnabled, uint32 islandResourceRenewalQuantity, uint64 islandResourceRenewalTime, uint32[] memory islandRenewableItemIds) public {
    _requireNamespaceOwner();
    MapData memory mapData = Map.get();
    if (mapData.existing == false && mapData.islandClaimWhitelistEnabled == false && mapData.islandResourceRenewalQuantity == uint32(0) && mapData.islandResourceRenewalTime == uint64(0) && mapData.islandRenewableItemIds.length == 0) {
      revert MapDoesNotExist();
    }
    MapUpdated memory mapUpdated = MapUpdateLogic.verify(existing, islandClaimWhitelistEnabled, islandResourceRenewalQuantity, islandResourceRenewalTime, islandRenewableItemIds, mapData);
    emit MapUpdatedEvent(mapUpdated.existing, mapUpdated.islandClaimWhitelistEnabled, mapUpdated.islandResourceRenewalQuantity, mapUpdated.islandResourceRenewalTime, mapUpdated.islandRenewableItemIds);
    MapData memory updatedMapData = MapUpdateLogic.mutate(mapUpdated, mapData);
    Map.set(updatedMapData);
  }

  function mapAddIsland(uint32 coordinatesX, uint32 coordinatesY, ItemIdQuantityPair[] memory resources) public {
    _requireNamespaceOwner();
    MapData memory mapData = Map.get();
    if (mapData.existing == false && mapData.islandClaimWhitelistEnabled == false && mapData.islandResourceRenewalQuantity == uint32(0) && mapData.islandResourceRenewalTime == uint64(0) && mapData.islandRenewableItemIds.length == 0) {
      revert MapDoesNotExist();
    }
    IslandAdded memory islandAdded = MapAddIslandLogic.verify(coordinatesX, coordinatesY, resources, mapData);
    emit IslandAddedEvent(islandAdded.coordinatesX, islandAdded.coordinatesY);
    MapData memory updatedMapData = MapAddIslandLogic.mutate(islandAdded, mapData);
    Map.set(updatedMapData);
  }

  function mapAddMultiIslands(Coordinates[] memory coordinates, uint32[] memory resourceItemIds, uint32 resourceSubtotal) public {
    _requireNamespaceOwner();
    MapData memory mapData = Map.get();
    if (mapData.existing == false && mapData.islandClaimWhitelistEnabled == false && mapData.islandResourceRenewalQuantity == uint32(0) && mapData.islandResourceRenewalTime == uint64(0) && mapData.islandRenewableItemIds.length == 0) {
      revert MapDoesNotExist();
    }
    MultiIslandsAdded memory multiIslandsAdded = MapAddMultiIslandsLogic.verify(coordinates, resourceItemIds, resourceSubtotal, mapData);
    emit MultiIslandsAddedEvent(multiIslandsAdded.resourceItemIds, multiIslandsAdded.resourceSubtotal);
    MapData memory updatedMapData = MapAddMultiIslandsLogic.mutate(multiIslandsAdded, mapData);
    Map.set(updatedMapData);
  }

}
