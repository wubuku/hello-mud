// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { IslandClaimWhitelist, IslandClaimWhitelistData } from "../codegen/index.sol";
import { IslandClaimWhitelistAdded, IslandClaimWhitelistUpdated, IslandClaimWhitelistRemoved } from "./IslandClaimWhitelistEvents.sol";
import { IslandClaimWhitelistAddLogic } from "./IslandClaimWhitelistAddLogic.sol";
import { IslandClaimWhitelistUpdateLogic } from "./IslandClaimWhitelistUpdateLogic.sol";
import { IslandClaimWhitelistRemoveLogic } from "./IslandClaimWhitelistRemoveLogic.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";
import { IAppSystemErrors } from "./IAppSystemErrors.sol";

contract IslandClaimWhitelistSystem is System, IAppSystemErrors {
  using WorldResourceIdInstance for ResourceId;

  event IslandClaimWhitelistAddedEvent(address indexed accountAddress);

  event IslandClaimWhitelistUpdatedEvent(address indexed accountAddress, bool allowed);

  event IslandClaimWhitelistRemovedEvent(address indexed accountAddress);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function islandClaimWhitelistAdd(address accountAddress) public {
    _requireNamespaceOwner();
    IslandClaimWhitelistData memory islandClaimWhitelistData = IslandClaimWhitelist.get(accountAddress);
    IslandClaimWhitelistAdded memory islandClaimWhitelistAdded = IslandClaimWhitelistAddLogic.verify(accountAddress, islandClaimWhitelistData);
    islandClaimWhitelistAdded.accountAddress = accountAddress;
    emit IslandClaimWhitelistAddedEvent(islandClaimWhitelistAdded.accountAddress);
    IslandClaimWhitelistData memory updatedIslandClaimWhitelistData = IslandClaimWhitelistAddLogic.mutate(islandClaimWhitelistAdded, islandClaimWhitelistData);
    IslandClaimWhitelist.set(accountAddress, updatedIslandClaimWhitelistData);
  }

  function islandClaimWhitelistUpdate(address accountAddress, bool allowed) public {
    _requireNamespaceOwner();
    IslandClaimWhitelistData memory islandClaimWhitelistData = IslandClaimWhitelist.get(accountAddress);
    if (islandClaimWhitelistData.existing == false && islandClaimWhitelistData.allowed == false) {
      revert IslandClaimWhitelistDoesNotExist(accountAddress);
    }
    IslandClaimWhitelistUpdated memory islandClaimWhitelistUpdated = IslandClaimWhitelistUpdateLogic.verify(accountAddress, allowed, islandClaimWhitelistData);
    islandClaimWhitelistUpdated.accountAddress = accountAddress;
    emit IslandClaimWhitelistUpdatedEvent(islandClaimWhitelistUpdated.accountAddress, islandClaimWhitelistUpdated.allowed);
    IslandClaimWhitelistData memory updatedIslandClaimWhitelistData = IslandClaimWhitelistUpdateLogic.mutate(islandClaimWhitelistUpdated, islandClaimWhitelistData);
    IslandClaimWhitelist.set(accountAddress, updatedIslandClaimWhitelistData);
  }

  function islandClaimWhitelistRemove(address accountAddress) public {
    _requireNamespaceOwner();
    IslandClaimWhitelistData memory islandClaimWhitelistData = IslandClaimWhitelist.get(accountAddress);
    if (islandClaimWhitelistData.existing == false && islandClaimWhitelistData.allowed == false) {
      revert IslandClaimWhitelistDoesNotExist(accountAddress);
    }
    IslandClaimWhitelistRemoved memory islandClaimWhitelistRemoved = IslandClaimWhitelistRemoveLogic.verify(accountAddress, islandClaimWhitelistData);
    islandClaimWhitelistRemoved.accountAddress = accountAddress;
    emit IslandClaimWhitelistRemovedEvent(islandClaimWhitelistRemoved.accountAddress);
    IslandClaimWhitelistData memory updatedIslandClaimWhitelistData = IslandClaimWhitelistRemoveLogic.mutate(islandClaimWhitelistRemoved, islandClaimWhitelistData);
    IslandClaimWhitelist.set(accountAddress, updatedIslandClaimWhitelistData);
  }

}
