// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { Roster, RosterData } from "../codegen/index.sol";
import { RosterShipEquipmentsMounted, RosterShipEquipmentsUnmounted } from "./RosterEvents.sol";
import { RosterMountShipEquipmentsLogic } from "./RosterMountShipEquipmentsLogic.sol";
import { RosterUnmountShipEquipmentsLogic } from "./RosterUnmountShipEquipmentsLogic.sol";
import { ItemIdQuantityPair } from "./ItemIdQuantityPair.sol";
import { SystemRegistry } from "@latticexyz/world/src/codegen/tables/SystemRegistry.sol";
import { NamespaceOwner } from "@latticexyz/world/src/codegen/tables/NamespaceOwner.sol";
import { ResourceId, WorldResourceIdInstance } from "@latticexyz/world/src/WorldResourceId.sol";
import { IAppSystemErrors } from "./IAppSystemErrors.sol";

contract RosterShipEquipmentSystem is System, IAppSystemErrors {
  using WorldResourceIdInstance for ResourceId;

  event RosterShipEquipmentsMountedEvent(uint256 indexed playerId, uint32 indexed sequenceNumber, uint256 shipId, uint8 mountingPosition);

  event RosterShipEquipmentsUnmountedEvent(uint256 indexed playerId, uint32 indexed sequenceNumber, uint256 shipId, uint8 mountingPosition);

  function _requireNamespaceOwner() internal view {
    ResourceId _thisSystemId = SystemRegistry.get(address(this));
    address _thisNamespaceOwner = NamespaceOwner.get(_thisSystemId.getNamespaceId());
    if (_thisNamespaceOwner != _msgSender()) {
      revert RequireNamespaceOwner(_msgSender(), _thisNamespaceOwner);
    }
  }

  function rosterMountShipEquipments(uint256 playerId, uint32 sequenceNumber, uint256 shipId, uint8 mountingPosition, ItemIdQuantityPair[] memory equipments) public {
    RosterData memory rosterData = Roster.get(playerId, sequenceNumber);
    if (rosterData.status == uint8(0) && rosterData.speed == uint32(0) && rosterData.baseExperience == uint32(0) && rosterData.environmentOwned == false && rosterData.updatedCoordinatesX == uint32(0) && rosterData.updatedCoordinatesY == uint32(0) && rosterData.coordinatesUpdatedAt == uint64(0) && rosterData.targetCoordinatesX == uint32(0) && rosterData.targetCoordinatesY == uint32(0) && rosterData.originCoordinatesX == uint32(0) && rosterData.originCoordinatesY == uint32(0) && rosterData.sailDuration == uint64(0) && rosterData.setSailAt == uint64(0) && rosterData.currentSailSegment == uint16(0) && rosterData.shipBattleId == uint256(0) && rosterData.shipIds.length == 0) {
      revert RosterDoesNotExist(playerId, sequenceNumber);
    }
    RosterShipEquipmentsMounted memory rosterShipEquipmentsMounted = RosterMountShipEquipmentsLogic.verify(playerId, sequenceNumber, shipId, mountingPosition, equipments, rosterData);
    rosterShipEquipmentsMounted.playerId = playerId;
    rosterShipEquipmentsMounted.sequenceNumber = sequenceNumber;
    emit RosterShipEquipmentsMountedEvent(rosterShipEquipmentsMounted.playerId, rosterShipEquipmentsMounted.sequenceNumber, rosterShipEquipmentsMounted.shipId, rosterShipEquipmentsMounted.mountingPosition);
    RosterData memory updatedRosterData = RosterMountShipEquipmentsLogic.mutate(rosterShipEquipmentsMounted, rosterData);
    Roster.set(playerId, sequenceNumber, updatedRosterData);
  }

  function rosterUnmountShipEquipments(uint256 playerId, uint32 sequenceNumber, uint256 shipId, uint8 mountingPosition, ItemIdQuantityPair[] memory equipments) public {
    RosterData memory rosterData = Roster.get(playerId, sequenceNumber);
    if (rosterData.status == uint8(0) && rosterData.speed == uint32(0) && rosterData.baseExperience == uint32(0) && rosterData.environmentOwned == false && rosterData.updatedCoordinatesX == uint32(0) && rosterData.updatedCoordinatesY == uint32(0) && rosterData.coordinatesUpdatedAt == uint64(0) && rosterData.targetCoordinatesX == uint32(0) && rosterData.targetCoordinatesY == uint32(0) && rosterData.originCoordinatesX == uint32(0) && rosterData.originCoordinatesY == uint32(0) && rosterData.sailDuration == uint64(0) && rosterData.setSailAt == uint64(0) && rosterData.currentSailSegment == uint16(0) && rosterData.shipBattleId == uint256(0) && rosterData.shipIds.length == 0) {
      revert RosterDoesNotExist(playerId, sequenceNumber);
    }
    RosterShipEquipmentsUnmounted memory rosterShipEquipmentsUnmounted = RosterUnmountShipEquipmentsLogic.verify(playerId, sequenceNumber, shipId, mountingPosition, equipments, rosterData);
    rosterShipEquipmentsUnmounted.playerId = playerId;
    rosterShipEquipmentsUnmounted.sequenceNumber = sequenceNumber;
    emit RosterShipEquipmentsUnmountedEvent(rosterShipEquipmentsUnmounted.playerId, rosterShipEquipmentsUnmounted.sequenceNumber, rosterShipEquipmentsUnmounted.shipId, rosterShipEquipmentsUnmounted.mountingPosition);
    RosterData memory updatedRosterData = RosterUnmountShipEquipmentsLogic.mutate(rosterShipEquipmentsUnmounted, rosterData);
    Roster.set(playerId, sequenceNumber, updatedRosterData);
  }

}
