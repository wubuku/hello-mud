// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { System } from "@latticexyz/world/src/System.sol";
import { Terrain, TerrainData } from "../codegen/index.sol";
import { TerrainCreated, TerrainUpdated } from "./TerrainEvents.sol";
import { TerrainCreateLogic } from "./TerrainCreateLogic.sol";
import { TerrainUpdateLogic } from "./TerrainUpdateLogic.sol";
import { IAppSystemErrors } from "./IAppSystemErrors.sol";

contract TerrainSystem is System, IAppSystemErrors {
  event TerrainCreatedEvent(uint32 indexed x, uint32 indexed y, string terrainType, uint8[] foo, bytes bar);

  event TerrainUpdatedEvent(uint32 indexed x, uint32 indexed y, string terrainType, uint8[] foo, bytes bar);

  function terrainCreate(uint32 x, uint32 y, string memory terrainType, uint8[] memory foo, bytes memory bar) public {
    TerrainData memory terrainData = Terrain.get(x, y);
    if (!(bytes(terrainData.terrainType).length == 0 && terrainData.foo.length == 0 && terrainData.bar.length == 0)) {
      revert TerrainAlreadyExists(x, y);
    }
    TerrainCreated memory terrainCreated = TerrainCreateLogic.verify(x, y, terrainType, foo, bar);
    terrainCreated.x = x;
    terrainCreated.y = y;
    emit TerrainCreatedEvent(terrainCreated.x, terrainCreated.y, terrainCreated.terrainType, terrainCreated.foo, terrainCreated.bar);
    TerrainData memory newTerrainData = TerrainCreateLogic.mutate(terrainCreated);
    Terrain.set(x, y, newTerrainData);
  }

  function terrainUpdate(uint32 x, uint32 y, string memory terrainType, uint8[] memory foo, bytes memory bar) public {
    TerrainData memory terrainData = Terrain.get(x, y);
    if (bytes(terrainData.terrainType).length == 0 && terrainData.foo.length == 0 && terrainData.bar.length == 0) {
      revert TerrainDoesNotExist(x, y);
    }
    TerrainUpdated memory terrainUpdated = TerrainUpdateLogic.verify(x, y, terrainType, foo, bar, terrainData);
    terrainUpdated.x = x;
    terrainUpdated.y = y;
    emit TerrainUpdatedEvent(terrainUpdated.x, terrainUpdated.y, terrainUpdated.terrainType, terrainUpdated.foo, terrainUpdated.bar);
    TerrainData memory updatedTerrainData = TerrainUpdateLogic.mutate(terrainUpdated, terrainData);
    Terrain.set(x, y, updatedTerrainData);
  }

}
